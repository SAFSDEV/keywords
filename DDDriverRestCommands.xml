<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE keyword_library SYSTEM "keyword_library.dtd">
<keyword_library>

	<libraryType type="DRIVER" />

	<libraryInfo name="DDDriverRestCommands"
		doc="DDDriverRestCommands.htm" sourcecode="TIDDriverRestCommands.java"
		class="REST" chainTo="TIDDriverCommands.java">

		<description>
			<short_desc>
				REST Driver Commands for handling Response like store,
				delete etc.
			</short_desc>
			<detailed_desc>
				<p>
					This keyword library provides Driver Commands that
					can be used by all three DDE Drivers--CycleDriver,
					SuiteDriver, and StepDriver. That means they can be
					used in any keyword driven test tables regardless of
					the test tables level--Cycle, Suite, or Step.
				</p>
				<p>
					Each different driver command has different
					parameters as described in its documentation. For
					reference, the first fields of ALL Driver Command
					test records are defined below:
				</p>
				<dl>
					<dt>Field #1</dt>
					<dd>
						The "C" = DRIVER COMMAND record type specifier.
					</dd>

					<dt>Field #2</dt>
					<dd>The Driver Command keyword.</dd>
				</dl>
				<p>Example:</p>

				<code>
					C, RestStoreResponse, responseId, varnamePrefix
				</code>

				<p>
					Driver Command parameters must be placed in the test
					record in the field position specified in the
					documentation. Some parameters are optional.
					However, the field associated with that parameter
					must be honored. If you wish to skip an optional
					parameter you must still provide an empty field for
					that parameter.
				</p>
				<p>Example:</p>

				<code>
					C, LaunchApplication, NOTEPAD, NOTEPAD.EXE, , , "AppMap.map"
				</code>

				<p>
					The above example shows two optional fields after
					NOTEPAD.EXE which are given no value(skipped).
				</p>
			</detailed_desc>
		</description>
	</libraryInfo>
	<!-- The runtime platform is not really a concern because the implementation is with Java. -->
	<runtime platform="Windows" engine="TIDDriverCommands.java" version="2016" />
	
	<!-- Begin to specify all supported keywords: a draft version -->
	<keywords>

        <keyword name="RESTCLEANRESPONSEMAP" displayText="RestCleanResponseMap"
            deprecated="NO" expectFailSupport="NO" expectWarnSupport="NO">

            <description>
                <short_desc>
                    Delete REST response (and request if it is stored) from the internal Map.
                </short_desc>
                <detailed_desc>
                    Delete a REST response (and request if it is stored) from the internal Map.
                    The REST response/request is stored internally in a Map of pair (responsID, Response).
                    <b>
                        BE CAREFUL WHNE CALLING THIS KEYWORD! It will clean Response from internal Map, and
                        can cause other keyword fails to work.
                    </b>
                </detailed_desc>
            </description>

            <engines>
                <engine vendor="SAFS" tool="TIDDriverCommands" name="Tool-Independent Driver" since="20161231">
                    <libraryInfo name="DDDriverRestCommands" doc="DDDriverRestCommands.htm"
                        sourcecode="TIDDriverRestCommands.java" class="REST" chainTo="TIDDriverCommands.java"/>
                </engine>
            </engines>

            <parameters>
                <parameter name="RESPONSEID" displayText="responseID" optional="YES">
                    <description>
                        <short_desc>
                            The ID used to delete Response Object from internal Map.
                        </short_desc>
                        <detailed_desc>
                            Every single Request generates a new Response, which will be stored
                            in a map internally. This responseID is the key to get that Response
                            Object from that map. This responseID should be generated by SAFS after
                            executing a REST request, such as GET, POST, DELETE, PUT etc.
                        </detailed_desc>
                    </description>
                </parameter>
            </parameters>
            <examples>
                <example>
                    <usage>C, RestCleanResponseMap, responseID</usage>
                    <description>
                        <short_desc>
                            Delete Response identified by 'responseID' from internal Map.
                        </short_desc>
                    </description>
                </example>
                <example>
                    <usage>C, RestCleanResponseMap</usage>
                    <description>
                        <short_desc>
                            Delete all Responses from internal Map, which means the internal Map
                            will be cleaned up.<br/>
                            <b>BE CAREFUL WHNE CALLING THIS KEYWORD! It can cause other keyword fails to work.</b>
                        </short_desc>
                    </description>
                </example>
            </examples>
        </keyword>

		<keyword name="RESTDELETERESPONSE" displayText="RestDeleteResponse"
			deprecated="NO" expectFailSupport="NO" expectWarnSupport="NO">

			<description>
				<short_desc>
					Delete a REST response (and request if it is stored) from the persistent storage.
				</short_desc>
				<detailed_desc>
					Delete a REST response (and request if it is stored) from the persistent storage.
					The REST response/request is supposed to store in a persistent storage.
					The persistent storage can be a series of variables, a file or something else, 
					please refer to explanation of parameter <b>variablePrefix</b>).
				</detailed_desc>
			</description>

			<engines>
				<engine vendor="SAFS" tool="TIDDriverCommands" name="Tool-Independent Driver" since="20161231">
					<libraryInfo name="DDDriverRestCommands" doc="DDDriverRestCommands.htm"
						sourcecode="TIDDriverRestCommands.java" class="REST" chainTo="TIDDriverCommands.java"/>
				</engine>
			</engines>

			<parameters>
				<parameter name="VARIABLEPREFIX" displayText="variablePrefix" optional="NO">
					<description>
						<short_desc>
							The prefix of the variables (storing the information of a REST response/request) to be deleted.
							Or the name of the file (holding the information of a REST response/request) to be deleted.
						</short_desc>
						<detailed_desc>
						    <p>
                                If this parameter means a 'variable prefix'.<br/>
	                            The variablePrefix is used to deduce variables to be deleted.
	                            Deduced variables regarding response are listed as below:
	                            <ul>
	                                <li>variablePrefix.Response.Id</li>
	                                <li>variablePrefix.Response.StatusCode</li>
	                                <li>variablePrefix.Response.HttpVersion</li>
	                                <li>etc...</li>
	                            </ul>
	                            Deduced variables regarding request are listed as below:
	                            <ul>
	                                <li>variablePrefix.Request.Method</li>
	                                <li>variablePrefix.Request.URI</li>
	                                <li>etc...</li>
	                            </ul>
	                            Please refer to keyword <b>RestStoreResponse</b> if you want to know exactly what variables
	                            are used to store a REST response/request.
                            </p>
                            <p>
                                If this parameter means a file (holding the the information of a REST response/request),
                                the this file will be deleted.
                            </p>
						</detailed_desc>
					</description>
				</parameter>
                <parameter name="PERSISTFILE" default="False" displayText="persistFile" optional="YES">
                    <description>
                        <short_desc>
                            If this parameter is true, then the parameter 'variablePrefix' represents
                            persistent file holding Response/Request information.
                        </short_desc>
                    </description>
                </parameter>
			</parameters>
			<examples>
				<example>
					<usage>C, RestDeleteResponse, BayerCustomerGet</usage>
					<description>
						<short_desc>
							Delete from the variable storage the variables related to a REST response/request. 
						</short_desc>
						<detailed_desc>
                            The variables to be deleted are listed as below:
                            <ul>
	                           <li>BayerCustomerGet.Response.Id</li>
	                           <li>BayerCustomerGet.Response.StatusCode</li>
	                           <li>BayerCustomerGet.Response.HttpVersion</li>
	                           <li>etc...</li>
	                        </ul>
                            <ul>
	                           <li>BayerCustomerGet.Request.Method</li>
	                           <li>BayerCustomerGet.Request.URI</li>
	                           <li>etc...</li>
	                        </ul>
						</detailed_desc>
						
					</description>
				</example>
                <example>
                    <usage>C, RestDeleteResponse, persistentFile, True</usage>
                    <description>
                        <short_desc>
                            Delete the file 'persistentFile', which holds a REST response/request. 
                        </short_desc>
                    </description>
                </example>
			</examples>
		</keyword>

		<keyword name="RESTDELETERESPONSESTORE" displayText="RestDeleteResponseStore"
			deprecated="NO" expectFailSupport="NO" expectWarnSupport="NO">

            <description>
                <short_desc>
                    Delete ALL REST responses (and requests if stored) from the persistent storage.
                </short_desc>
                <detailed_desc>
                    Delete ALL REST responses (and requests if stored) from the persistent storage. 
                    The REST response/request is supposed to store in the persistent storage.
                    The persistent storage can be a series of variables, a file or something else, 
                    please refer to explanation of parameter <b>variablePrefix</b>).
                    So these variables, files related to all responses/requests will be deleted, which
                    means the persistent storage will be cleaned up for all REST responses/requests.                    
                </detailed_desc>
            </description>

            <engines>
                <engine vendor="SAFS" tool="TIDDriverCommands" name="Tool-Independent Driver" since="20161231">
                    <libraryInfo name="DDDriverRestCommands" doc="DDDriverRestCommands.htm"
                        sourcecode="TIDDriverRestCommands.java" class="REST" chainTo="TIDDriverCommands.java"/>
                </engine>
            </engines>

            <parameters/>

            <examples>
                <example>
                    <usage>C, RestDeleteResponseStore</usage>
                    <description>
                        <short_desc>
                            Delete from the persistent storage the all variables or files related to ALL REST responses/requests. 
                        </short_desc>
                        <detailed_desc>
                            Delete ALL the variables ended with suffix listed below:
                            <ul>
                               <li>.Response.Id</li>
                               <li>.Response.StatusCode</li>
                               <li>.Response.HttpVersion</li>
                               <li>etc...</li>
                            </ul>
                            <ul>
                               <li>.Request.Method</li>
                               <li>.Request.URI</li>
                               <li>etc...</li>
                            </ul>
                            This keyword will also delete the persistent files holding Response/Request.
                        </detailed_desc>
                    </description>
                </example>
            </examples>
		</keyword>

        <!-- TODO What should be the keyword name and parameters, headers file format etc.? -->
        <keyword name="RESTHEADERSLOAD" displayText="RestHeadersLoad"
            deprecated="NO" expectFailSupport="NO" expectWarnSupport="NO">

            <description>
                <short_desc>
                    Load headers from a file.
                </short_desc>
                <detailed_desc>
                    This might be called before invoking a REST action, like RESTGetXML etc.
                    And the loaded headers will be used when executing that REST action 
                    if no headers are provided as parameter of that REST action.
                </detailed_desc>
            </description>

            <engines>
                <engine vendor="SAFS" tool="TIDDriverCommands" name="Tool-Independent Driver" since="20161231">
                    <libraryInfo name="DDDriverRestCommands" doc="DDDriverRestCommands.htm"
                        sourcecode="TIDDriverRestCommands.java" class="REST" chainTo="TIDDriverCommands.java"/>
                </engine>
            </engines>

            <parameters>
                <parameter name="HEADERSFILE" displayText="headersFile" optional="NO">
                    <description>
                        <short_desc>
                            The path to file holding headers information.
                        </short_desc>
                        <detailed_desc>
                            The content is to be decided.<!-- TODO what is the format, a properties file, a json file, XML file? -->
                            JSON=single/multi-line header<br/>
                            XML=single/multi-line header<br/>
                        </detailed_desc>
                    </description>
                </parameter>
                <parameter name="METHOD" displayText="method" optional="YES">
                    <description>
                        <short_desc>
                            The method is used to load the "headers" from a file.<br/>
                            If this parameter is not provided, then "headers" of all methods will be loaded.<br/> 
                        </short_desc>
                        <detailed_desc>
                            The possible methods are listed below:
                            <ul>
                               <li>DELETE</li>
                               <li>GET</li>
                               <li>HEAD</li>
                               <li>PATCH</li>
                               <li>POST</li>
                               <li>PUT</li>
                            </ul>
                        </detailed_desc>
                    </description>
                </parameter>
                <parameter name="TYPE" displayText="type" optional="YES">
                    <description>
                        <short_desc>
                            The type is used to load the "headers" from a file.<br/>
                            If this parameter is not provided, then "headers" of all types will be loaded.<br/> 
                        </short_desc>
                        <detailed_desc>
                            The possible types are listed below:
                            <ul>
                               <li>BINARY</li>
                               <li>CSS</li>
                               <li>CUSTOM</li>
                               <li>HTML</li>
                               <li>JSON</li>
                               <li>IMAGE</li>
                               <li>SCRIPT</li>
                               <li>TEXT</li>
                               <li>XML</li>
                            </ul>
                        </detailed_desc>
                    </description>
                </parameter>
            </parameters>
            <examples>
                <example>
                    <usage>C, RestHeadersLoad, C:\SAFS\projects\rest\HeadersFile, GET, JSON</usage>
                    <description>
                        <short_desc>
                            Load the "headers" of type "JSON" for method "GET" from file HeadersFile. 
                        </short_desc>
                        <detailed_desc>
                        </detailed_desc>
                    </description>
                </example>
                <example>
                    <usage>C, RestHeadersLoad, C:\SAFS\projects\rest\HeadersFile, DELETE</usage>
                    <description>
                        <short_desc>
                            Load the "headers" of all types for method "DELETE" from file HeadersFile. 
                        </short_desc>
                        <detailed_desc>
                        </detailed_desc>
                    </description>
                </example>
                <example>
                    <usage>C, RestHeadersLoad, C:\SAFS\projects\rest\HeadersFile, , JSON</usage>
                    <description>
                        <short_desc>
                            Load the "headers" of type "JSON" for all methods from file HeadersFile. 
                        </short_desc>
                        <detailed_desc>
                        </detailed_desc>
                    </description>
                </example>
                <example>
                    <usage>C, RestHeadersLoad, C:\SAFS\projects\rest\HeadersFile</usage>
                    <description>
                        <short_desc>
                            Load all "headers" from file HeadersFile. 
                        </short_desc>
                        <detailed_desc>
                        </detailed_desc>
                    </description>
                </example>
            </examples>
        </keyword>

        <keyword name="RESTSTORERESPONSE" displayText="RestStoreResponse"
            deprecated="NO" expectFailSupport="NO" expectWarnSupport="NO">

            <description>
                <short_desc>Save a REST response into a persistent storage.</short_desc>
                <detailed_desc>
                    Retrieve a REST response according to the responseID, and store the response into
                    a persistent storage. The persistent storage can be a series of variables, a file 
                    or something else, please refer to explanation of parameter <b>variablePrefix</b>).
                </detailed_desc>
            </description>

            <engines>
                <engine vendor="SAFS" tool="TIDDriverCommands" name="Tool-Independent Driver" since="20161231">
                    <libraryInfo name="DDDriverRestCommands" doc="DDDriverRestCommands.htm"
                        sourcecode="TIDDriverRestCommands.java" class="REST" chainTo="TIDDriverCommands.java"/>
                </engine>
            </engines>

            <parameters>
                <parameter name="RESPONSEID" displayText="responseID" optional="NO">
                    <description>
                        <short_desc>
                            The ID used to retrieve Response Object from internal Map.
                        </short_desc>
                        <detailed_desc>
                            Every single Request generates a new Response, which will be stored
                            in a map internally. This responseID is the key to get that Response
                            Object from that map. This responseID should be generated by SAFS after
                            executing a REST request, such as GET, POST, DELETE, PUT etc.
                        </detailed_desc>
                    </description>
                </parameter>
                <parameter name="VARIABLEPREFIX" displayText="variablePrefix" optional="NO">
                    <description>
                        <short_desc>
                            The prefix of the variables to store the information of a REST response.<br/>
                            Or the file name holding the information of a REST response.
                        </short_desc>
                        <detailed_desc>
                            <p>
	                            If this parameter means a 'variable prefix'.<br/>
	                            The variablePrefix is used to deduce variables to store a REST response. Deduced variables listed as below:
	                            <ul>
	                                <li>variablePrefix.Response.Id</li>
	                                <li>variablePrefix.Response.StatusCode</li>
	                                <li>variablePrefix.Response.HttpVersion</li>
	                                <li>variablePrefix.Response.ContentType</li>
	                                <li>variablePrefix.Response.EntityBody</li>
	                                <li>variablePrefix.Response.EntityLength</li>
	                                <li>variablePrefix.Response.Headers</li><!-- maybe in json format? -->
	                                <li>to be added ...</li>
	                            </ul>
	                            If the parameter <b>storeRequest</b> is true, then the originating REST Request 
	                            will also be stored in the deduced variables listed as below:
	                            <ul>
	                                <li>variablePrefix.Request.Method</li>
	                                <li>variablePrefix.Request.URI</li>
	                                <li>variablePrefix.Request.HttpVersion</li>
	                                <li>variablePrefix.Request.Headers</li><!-- maybe in json format? -->
	                                <li>variablePrefix.Request.MessageBody</li>
	                                <li>to be added ...</li>
	                            </ul>
                            </p>
                            <p>
	                            If this parameter means a file.<br/>
	                            This file will store the the information of a REST response.
	                            <!--  TODO what is the format of this file, a property file, a json file, or an XML file ... -->
	                            <!-- a json bench file for example 
	                                {
	                                  "Response": {
	                                    "StatusCode": "200",
	                                    "Headers": {
	                                        "ContentType": "text/xml"
	                                    }
	                                  }
	                                  "Request": {
	                                    "Method": "GET",
	                                    "Headers": {
	                                        "Accept": "text/xml;application/json"
	                                    }
	                                  }
	                                }
	                             -->
                            </p>
                        </detailed_desc>
                    </description>
                </parameter>
                <parameter name="STOREREQUEST" default="False" displayText="storeRequest" optional="YES">
                    <description>
                        <short_desc>Store the originating Request information if this parameter is true. The default value is false.</short_desc>
                    </description>
                </parameter>
                <parameter name="PERSISTFILE" default="False" displayText="persistFile" optional="YES">
                    <description>
                        <short_desc>Store the Response/Request information into a file if this parameter is true.</short_desc>
                    </description>
                </parameter>
            </parameters>
            <examples>
                <example>
                    <usage>C, RestStoreResponse, ResponseID, BayerCustomerGet</usage>
                    <description>
                        <short_desc>
                            Store a REST response into a series of variables prefixed by "BayerCustomerGet".
                        </short_desc>
                        <detailed_desc>
                            After executing a REST GET request on "http://www.thomas-bayer.com/sqlrest/CUSTOMER/", SAFS
                            returns a ResponseID. Here the keyword 'RestStoreResponse' is going to store the Response
                            into a series of variables prefixed by "BayerCustomerGet", such as:
                            <ul>
                                <li>BayerCustomerGet.Response.StatusCode</li>
                                <li>BayerCustomerGet.Response.ContentType</li>
                                <li>BayerCustomerGet.Response.EntityBody</li>
                                <li>etc...</li>
                            </ul>
                        </detailed_desc>
                    </description>
                </example>
                <example>
                    <usage>C, RestStoreResponse, ResponseID, BayerCustomerGet, True</usage>
                    <description>
                        <short_desc>
                            Store a REST response and originating request into a series of variables prefixed by "BayerCustomerGet".
                        </short_desc>
                        <detailed_desc>
                            After executing a REST GET request on "http://www.thomas-bayer.com/sqlrest/CUSTOMER/", SAFS
                            returns a ResponseID. Here the keyword 'RestStoreResponse' is going to store the Response
                            into a series of variables prefixed by "BayerCustomerGet", such as:
                            <ul>
                                <li>BayerCustomerGet.Response.StatusCode</li>
                                <li>BayerCustomerGet.Response.ContentType</li>
                                <li>BayerCustomerGet.Response.EntityBody</li>
                                <li>etc...</li>
                            </ul>
                            and at the same time it is going to store the originating REST Request 
                            into a series of variables prefixed by "BayerCustomerGet", such as:
                            <ul>
                                <li>BayerCustomerGet.Request.Method</li>
                                <li>BayerCustomerGet.Request.URI</li>
                                <li>BayerCustomerGet.Request.Headers</li><!-- maybe in json format? -->
                                <li>BayerCustomerGet.Request.MessageBody</li>
                                <li>etc...</li>
                            </ul>
                        </detailed_desc>
                    </description>
                </example>
                <example>
                    <usage>C, RestStoreResponse, ResponseID, persistentFile, , True</usage>
                    <description>
                        <short_desc>
                            Store a REST response into a persistent file.
                        </short_desc>
                        <detailed_desc>
                            After executing a REST GET request on "http://www.thomas-bayer.com/sqlrest/CUSTOMER/", SAFS
                            returns a ResponseID stored in variable ResponseIDVar. Here the keyword 'RestStoreResponse' 
                            is going to store the Response into a persistent file.
                        </detailed_desc>
                    </description>
                </example>
                <example>
                    <usage>C, RestStoreResponse, ^ResponseIDVar, BayerCustomerGet</usage>
                    <description>
                        <short_desc>
                            Store a REST response into a series of variables prefixed by "BayerCustomerGet".
                        </short_desc>
                        <detailed_desc>
                            After executing a REST GET request on "http://www.thomas-bayer.com/sqlrest/CUSTOMER/", SAFS
                            returns a ResponseID stored in variable ResponseIDVar. Here the keyword 'RestStoreResponse' 
                            is going to store the Response into a series of variables prefixed by "BayerCustomerGet", such as:
                            <ul>
                                <li>BayerCustomerGet.Response.StatusCode</li>
                                <li>BayerCustomerGet.Response.ContentType</li>
                                <li>BayerCustomerGet.Response.EntityBody</li>
                                <li>etc...</li>
                            </ul>
                        </detailed_desc>
                    </description>
                </example>
            </examples>
        </keyword>

        <keyword name="RESTVERIFYRESPONSE" displayText="RestVerifyResponse"
            deprecated="NO" expectFailSupport="NO" expectWarnSupport="NO">

            <description>
                <short_desc>Verify a REST response is what is expected.</short_desc>
                <detailed_desc>
                    Retrieve a REST response according to the responseID, and compare the response with
                    the content stored in a bench file.
                </detailed_desc>
            </description>

            <engines>
                <engine vendor="SAFS" tool="TIDDriverCommands" name="Tool-Independent Driver" since="20161231">
                    <libraryInfo name="DDDriverRestCommands" doc="DDDriverRestCommands.htm"
                        sourcecode="TIDDriverRestCommands.java" class="REST" chainTo="TIDDriverCommands.java"/>
                </engine>
            </engines>

            <parameters>
                <parameter name="RESPONSEID" displayText="responseID" optional="NO">
                    <description>
                        <short_desc>
                            The ID used to retrieve Response Object from internal Map.
                        </short_desc>
                        <detailed_desc>
                            Every single Request generates a new Response, which will be stored
                            in a map internally. This responseID is the key to get that Response
                            Object from that map. This responseID should be generated by SAFS after
                            executing a REST request, such as GET, POST, DELETE, PUT etc.
                        </detailed_desc>
                    </description>
                </parameter>
                <parameter name="BNECHFILE" displayText="benchFile" optional="NO">
                    <description>
                        <short_desc>
                            The bench file for verifying a REST response.
                        </short_desc>
                        <detailed_desc>
                            <!--  TODO what is the format of this bench file, a property file, a json file, or an XML file ... -->
                            <!-- We need to define the format, do we need a keyword to store the response into a file -->
                            <!-- which will be used as a bench? -->
                            <!--
                                a json bench file for example:
								{
								  "Response": {
								    "StatusCode": "200",
								    "Headers": {
								        "ContentType": "text/xml"
								    }
								  }
								  "Request": {
								    "Method": "GET",
								    "Headers": {
								        "Accept": "text/xml;application/json"
								    }
								  }
								}
                             -->
                        </detailed_desc>
                    </description>
                </parameter>
                <parameter name="RESULT" displayText="result" optional="YES">
                    <description>
                        <short_desc>
                            The variable holding the verification result.
                        </short_desc>
                        <detailed_desc>
                            If this parameter is not provided, then the 'verification result' will be automatically saved
                            to a deduced variable "responseID.verification.result".
                        </detailed_desc>
                    </description>
                </parameter>
            </parameters>
            <examples>
                <example>
                    <usage>C, RestVerifyResponse, ResponseID, TheBenchFile</usage>
                    <description>
                        <short_desc>
                            Compare the Response identified by ResponseID with the content stored in TheBenchFile.
                        </short_desc>
                        <detailed_desc>
                            According to the ResponseID, a Response object will be retrieved from the internal Map
                            storage, and it will be compared with the content stored in the TheBenchFile.<br/>
                            The 'verification result' will be automatically saved to the variable "responseID.verification.result".
                        </detailed_desc>
                    </description>
                </example>
            </examples>
        </keyword>
        
        <keyword name="RESTVERIFYRESPONSECONTAINS" displayText="RestVerifyResponseContains"
            deprecated="NO" expectFailSupport="NO" expectWarnSupport="NO">

            <description>
                <short_desc>Verify a REST response contains what is expected.</short_desc>
                <detailed_desc>
                    Retrieve a REST response according to the responseID, and verify that the response contains
                    the content stored in a bench file.<br/>
                    The <b>Contains</b> in keyword RestVerifyResponseContains means the Response contains the fields
                     defined in the bench file, for the field's value, it should be exact match.
                </detailed_desc>
            </description>

            <engines>
                <engine vendor="SAFS" tool="TIDDriverCommands" name="Tool-Independent Driver" since="20161231">
                    <libraryInfo name="DDDriverRestCommands" doc="DDDriverRestCommands.htm"
                        sourcecode="TIDDriverRestCommands.java" class="REST" chainTo="TIDDriverCommands.java"/>
                </engine>
            </engines>

            <parameters>
                <parameter name="RESPONSEID" displayText="responseID" optional="NO">
                    <description>
                        <short_desc>
                            The ID used to retrieve Response Object from internal Map.
                        </short_desc>
                        <detailed_desc>
                            Every single Request generates a new Response, which will be stored
                            in a map internally. This responseID is the key to get that Response
                            Object from that map. This responseID should be generated by SAFS after
                            executing a REST request, such as GET, POST, DELETE, PUT etc.
                        </detailed_desc>
                    </description>
                </parameter>
                <parameter name="BNECHFILE" displayText="benchFile" optional="NO">
                    <description>
                        <short_desc>
                            The bench file for verifying a REST response.
                        </short_desc>
                        <detailed_desc>
                            <!--  TODO what is the format of this bench file, a property file, a json file, or an XML file ... -->
                            <!-- We need to define the format, do we need a keyword to store the response into a file -->
                            <!-- which will be used as a bench? -->
                            <!-- some json bench files for example 
                                {
                                  "Response": {
                                    "StatusCode": "200",
                                  }
                                }
                                
                                {
                                  "Response": {
                                    "Headers": {
                                        "ContentType": "text/xml"
                                    }
                                  }
                                }
                                
                                {
                                  "Request": {
                                    "Method": "GET",
                                  }
                                }
                             -->
                        </detailed_desc>
                    </description>
                </parameter>
                <parameter name="RESULT" displayText="result" optional="YES">
                    <description>
                        <short_desc>
                            The variable holding the verification result.
                        </short_desc>
                        <detailed_desc>
                            If this parameter is not provided, then the 'verification result' will be automatically saved
                            to a deduced variable "responseID.verification.result".
                        </detailed_desc>
                    </description>
                </parameter>
            </parameters>
            <examples>
                <example>
                    <usage>C, RestVerifyResponseContains, ResponseID, TheBenchFile</usage>
                    <description>
                        <short_desc>
                            Verify that the Response identified by ResponseID contains the content stored in TheBenchFile.
                        </short_desc>
                        <detailed_desc>
                            According to the ResponseID, a Response object will be retrieved from the internal Map
                            storage, and it will be used to verify containing the content stored in the TheBenchFile.<br/>
                            The 'verification result' will be automatically saved to the variable "responseID.verification.result".
                        </detailed_desc>
                    </description>
                </example>
            </examples>
        </keyword>
        
	</keywords>
</keyword_library>