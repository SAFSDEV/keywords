<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE keyword_library SYSTEM "keyword_library.dtd">
<keyword_library><libraryType type="COMPONENT" />
    <libraryInfo name="ComboEditBoxFunctions" 
                 doc="ComboEditBoxFunctions.htm" 
                 sourcecode="ComboEditBoxFunctions.sbl" 
                 chainTo="GenericObjectFunctions"
                 class="ComboEditBox">

        <description>
           <short_desc> 
              Actions for working with ComboEditBox objects
           </short_desc>
        </description>

    </libraryInfo>
    <runtime platform="Windows" engine="Robot" version="2002" />
    
    <keywords>
    <keyword name="CLICK" 
             displayText="Click" 
             deprecated="YES" 
             deprecatedFor="Generic CLICK" 
             expectFailSupport="NO" 
             expectWarnSupport="NO">
             
         <description>
              <short_desc> 
                 Defaults to Generic CLICK where applicable.
              </short_desc>
              <detailed_desc> 
                <p>Attempts to perform a standard Click on the ComboEditBox.  If the ComboEditBox 
                list is not exposed then this may expose the list of items.  If the
                list is already exposed, then this may close the list.  It may also just provide 
                focus to the ComboEditBox.</p>
                <p>  
                It must be noted that when you expose the list in a ComboEditBox, it is no 
                longer a ComboEditBox.  It typically converts to a ComboListBox.  This may 
                not be an issue on controls that Robot can recognize with a NAME= method. </p>
                <p>
                However, if the control is recognized by ObjectIndex or some other means 
                then the original ComboEditBox may no longer be found on the screen. 
                With this scenario, you need to reference the ComboEditBox and the ComboListBox
                in the application map (and associated data files) as two separate items.</p>
                <p>
                To avoid these potential problems, use the ComboEditBox 'SELECT' command 
                to actually open the list and select the item all with a single command.</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine name="WinRunner" 
	   	   		       since="20040607" 
	   	   		       tool="WinRunner" 
	   	   		       vendor="Mercury Interactive">
	   	   	       <libraryInfo class="COMBOEDITBOX" 
	   	   				name="ComboEditBoxFunctions" 
	   	   				sourcecode="ComboEditBoxFunctions">
	   	   	       </libraryInfo>
           </engine>
           <engine name="Test Complete" 
		       since="20081027" 
		       tool="TestComplete" 
		       vendor="AutomatedQA">
	       <libraryInfo class="COMBOEDITBOX" 
				name="ComboEditBoxFunctions" 
				sourcecode="ComboEditBoxFunctions.SVB">
	       </libraryInfo>
           </engine>
       </engines>

       <parameters /><examples>

        <example>
           <usage>T, WINDOW, ComboEditBox, CLICK</usage>
           <description>
              <short_desc> 
                 Used to show or hide the drop down list or get focus for the ComboEditBox object.  
              </short_desc>
              <detailed_desc> 
                 Used to show or hide the drop down list or get focus for the ComboEditBox object.
                 Use the Select command INSTEAD of Click if you actually want to Select an item in the list.
              </detailed_desc>
           </description>
        </example>

     </examples></keyword>
     
  <keyword name="SELECT" 
           displayText="Select" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                 Select an item by its text value from a ComboEditBox.
              </short_desc>
              <detailed_desc> 
                <p>Select an item by its text value from a ComboEditBox.  
                This method combines the initial Click required to expose the list 
                of items and then the subsequent selection of a text item from the list.</p>
                <p>
                The routine will first attempt to see if the item exists in the list 
                and should provide a warning if it cannot find the item or cannot 
                read the list of items.  The routine will then attempt the selection.</p>
                <p>
                After the selection is attempted, the routine tries to verify that the 
                list has the specified item as the selected item.  A warning will be 
                issued if the routine cannot read the list.  A failure will be issued 
                if the routine CAN read the list and determines that the specified 
                item is NOT the currently selected item.</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" >
	       <libraryInfo name="ComboEditBoxFunctions" 
                            doc="ComboEditBoxFunctions.htm" 
                            sourcecode="ComboEditBoxFunctions.sbl" 
                            class="COMBOEDITBOX" />
           </engine>
           <engine name="WinRunner" 
	   	   	   		       since="20040607" 
	   	   	   		       tool="WinRunner" 
	   	   	   		       vendor="Mercury Interactive">
	   	   	   	       <libraryInfo class="COMBOEDITBOX" 
	   	   	   				name="ComboEditBoxFunctions" 
	   	   	   				sourcecode="ComboEditBoxFunctions">
	   	   	   	       </libraryInfo>
           </engine>
           <engine name="Test Complete" 
	   		       since="20081027" 
	   		       tool="TestComplete" 
	   		       vendor="AutomatedQA">
	   	       <libraryInfo class="COMBOEDITBOX" 
	   				name="ComboEditBoxFunctions" 
	   				sourcecode="ComboEditBoxFunctions.SVB">
	   	       </libraryInfo>
           </engine>
       </engines>

       <parameters>
        <parameter name="TEXTVALUE" displayText="TextValue" optional="NO">
           <description>
              <short_desc> 
                 The case-sensitive item in the drop down list to select.
              </short_desc>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WINDOW, ComboEditBox, SELECT, "MySelection"</usage>
           <description>
              <short_desc> 
                 This action attempts to Click AND Select "MySelection" (case-sensitive) from the ComboEditBox.
              </short_desc>
           </description>
        </example>

     </examples></keyword>
     
  <keyword name="SELECTINDEX" 
           displayText="SelectIndex" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                 Select an item by its index from a ComboEditBox (ComboBox).
              </short_desc>
              <detailed_desc> 
                <p>Select an item by its index from a ComboEditBox (ComboBox).  
                This method combines the initial Click required to expose the list 
                of items and then the subsequent selection of the item from the list.</p>
                <p>
                The routine will first attempt to see if the index exists in the list 
                and should provide a warning if it cannot find the item or cannot 
                read the list of items.  The routine will then attempt the selection.</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" >
	       <libraryInfo name="ComboEditBoxFunctions" 
                            doc="ComboEditBoxFunctions.htm" 
                            sourcecode="ComboEditBoxFunctions.sbl" 
                            class="COMBOEDITBOX" />
           </engine>
           <engine name="WinRunner" 
	   	   	   		       since="20040607" 
	   	   	   		       tool="WinRunner" 
	   	   	   		       vendor="Mercury Interactive">
	   	   	   	       <libraryInfo class="COMBOEDITBOX" 
	   	   	   				name="ComboEditBoxFunctions" 
	   	   	   				sourcecode="ComboEditBoxFunctions">
	   	   	   	       </libraryInfo>
           </engine>
           <engine name="Test Complete" 
	   		       since="20081027" 
	   		       tool="TestComplete" 
	   		       vendor="AutomatedQA">
	   	       <libraryInfo class="COMBOEDITBOX" 
	   				name="ComboEditBoxFunctions" 
	   				sourcecode="ComboEditBoxFunctions.SVB">
	   	       </libraryInfo>
           </engine>
       </engines>

       <parameters>
        <parameter name="INDEXVALUE" displayText="IndexValue" optional="NO">
           <description>
              <short_desc> 
                 The item index in the drop down list to select.
              </short_desc>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WINDOW, ComboEditBox, SELECTINDEX, "1"</usage>
           <description>
              <short_desc> 
                 This action attempts to Click AND Select item #1 from the ComboEditBox list.
              </short_desc>
           </description>
        </example>

     </examples></keyword>
     
  <keyword name="SETTEXTVALUE" 
           displayText="SetTextValue" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
            Set the text of the ComboEditBox
              </short_desc>
              <detailed_desc> 
                <p>This action sets the text of the ComboEditBox.  This version allows the use 
                of special character combinations and substrings to identify specific 
                keyboard keys.  These are the same special characters and interpretation 
                used for Robot's InputKeys command and the Windows Scripting Host.</p>
                <p>
                ~^+%{( are primarily the characters that induce special processing.</p>
                <p>
                The routine verifies we can read the text property, sets the text value 
                and will verify that the property has been set to that value *IF* none 
                of the special characters exist in the provided text value.  If those 
                special characters exist, then no post-set verification will occur.</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" >
	       <libraryInfo name="ComboEditBoxFunctions" 
                            doc="ComboEditBoxFunctions.htm" 
                            sourcecode="ComboEditBoxFunctions.sbl" 
                            class="COMBOEDITBOX" />
           </engine>
           <engine name="WinRunner" 
	   	   	   		       since="20040607" 
	   	   	   		       tool="WinRunner" 
	   	   	   		       vendor="Mercury Interactive">
	   	   	   	       <libraryInfo class="COMBOEDITBOX" 
	   	   	   				name="ComboEditBoxFunctions" 
	   	   	   				sourcecode="ComboEditBoxFunctions">
	   	   	   	       </libraryInfo>
           </engine>
           <engine name="Test Complete" 
	   		       since="20081027" 
	   		       tool="TestComplete" 
	   		       vendor="AutomatedQA">
	   	       <libraryInfo class="COMBOEDITBOX" 
	   				name="ComboEditBoxFunctions" 
	   				sourcecode="ComboEditBoxFunctions.SVB">
	   	       </libraryInfo>
           </engine>
       </engines>

       <parameters>

        <parameter name="TEXTVALUE" displayText="TextValue" optional="YES" default="">
           <description>
              <short_desc> 
             The text that will be typed into the ComboEditBox.
              </short_desc>
              <detailed_desc> 
             TextValue will be the text that will be typed into the ComboEditBox.
                 Quoted text may be used to ensure proper expected value retrieval.
                 There is also no check for a missing field because that would be
                 the same as specifying no text ("")--which is valid.
              </detailed_desc>
           </description>
        </parameter>

     </parameters><examples>

        <example>
           <usage>T, WINDOW, ComboEditBox, SETTEXTVALUE,  "MyPassword"</usage>
           <description>
              <short_desc> 
             "MyPassword" is typed into the ComboEditBox
              </short_desc>
           </description>
        </example>

     </examples></keyword>

  <keyword name="SETUNVERIFIEDTEXTVALUE" 
           displayText="SetUnverifiedTextValue" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
            Set the text of the ComboEditBox without verification
              </short_desc>
              <detailed_desc> 
                <p>This action sets the text of the ComboEditBox.  This version allows the use 
                of special character combinations and substrings to identify specific 
                keyboard keys.  These are the same special characters and interpretation 
                used for Robot's InputKeys command and the Windows Scripting Host.</p>
                <p>
                ~^+%{( are primarily the characters that induce special processing.</p>
                <p>
                The routine verifies we can read the text property, sets the text value 
                but does not verify that the property has been set to that value and does not verify whether
		or not any of the special characters exist in the provided text value.
		</p>

              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20060327" >
	       <libraryInfo name="ComboEditBoxFunctions" 
                            doc="ComboEditBoxFunctions.htm" 
                            sourcecode="ComboEditBoxFunctions.sbl" 
                            class="COMBOEDITBOX" />
           </engine>
           <engine name="Test Complete" 
	   		       since="20081027" 
	   		       tool="TestComplete" 
	   		       vendor="AutomatedQA">
	   	       <libraryInfo class="COMBOEDITBOX" 
	   				name="ComboEditBoxFunctions" 
	   				sourcecode="ComboEditBoxFunctions.SVB">
	   	       </libraryInfo>
           </engine>
       </engines>

       <parameters>

        <parameter name="TEXTVALUE" displayText="TextValue" optional="YES" default="">
           <description>
              <short_desc> 
             The text that will be typed into the ComboEditBox.
              </short_desc>
              <detailed_desc> 
             TextValue will be the text that will be typed into the ComboEditBox.
                 Quoted text may be used to ensure proper expected value retrieval.
                 There is also no check for a missing field because that would be
                 the same as specifying no text ("")--which is valid.
              </detailed_desc>
           </description>
        </parameter>

     </parameters><examples>

        <example>
           <usage>T, WINDOW, ComboEditBox, SETUNVERIFIEDTEXTVALUE,  "MyPassword"</usage>
           <description>
              <short_desc> 
             "MyPassword" is typed into the ComboEditBox, but not verified
              </short_desc>
           </description>
        </example>

     </examples></keyword>
     
  <keyword name="SELECTPARTIALMATCH" 
           displayText="SelectPartialMatch" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                 Select an item via a partial text match.
              </short_desc>
              <detailed_desc> 
                <p>Select an item via a partial text match.
                This method combines the initial Click required to expose the list 
                of items and then the subsequent selection of a text item from the list.</p>
                <p>
                The routine will first attempt to see if the item exists in the list 
                and should provide a warning if it cannot find the item or cannot 
                read the list of items.  The routine will then attempt the selection.</p>
                <p>
                After the selection is attempted, the routine tries to verify that the 
                list has the specified item as the selected item.  A warning will be 
                issued if the routine cannot read the list.  A failure will be issued 
                if the routine CAN read the list and determines that the specified 
                item is NOT the currently selected item.</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" >
	       <libraryInfo name="ComboEditBoxFunctions" 
                            doc="ComboEditBoxFunctions.htm" 
                            sourcecode="ComboEditBoxFunctions.sbl" 
                            class="COMBOEDITBOX" />
           </engine>
           <engine name="WinRunner" 
	   	   	   		       since="20040607" 
	   	   	   		       tool="WinRunner" 
	   	   	   		       vendor="Mercury Interactive">
	   	   	   	       <libraryInfo class="COMBOEDITBOX" 
	   	   	   				name="ComboEditBoxFunctions" 
	   	   	   				sourcecode="ComboEditBoxFunctions">
	   	   	   	       </libraryInfo>
           </engine>
           <engine name="Test Complete" 
	   		       since="20081027" 
	   		       tool="TestComplete" 
	   		       vendor="AutomatedQA">
	   	       <libraryInfo class="COMBOEDITBOX" 
	   				name="ComboEditBoxFunctions" 
	   				sourcecode="ComboEditBoxFunctions.SVB">
	   	       </libraryInfo>
           </engine>
       </engines>

       <parameters>
        <parameter name="TEXTVALUE" displayText="TextValue" optional="NO">
           <description>
              <short_desc> 
                 The case-sensitive substring of an item in the drop down list to select.
              </short_desc>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WINDOW, ComboEditBox, SelectPartialMatch, "ATextSubstring"</usage>
           <description>
              <short_desc> 
                 This action attempts to Click AND Select the first item containing the 
                 substring provided.
              </short_desc>
           </description>
        </example>

     </examples></keyword>
</keywords></keyword_library>