<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE keyword_library SYSTEM "keyword_library.dtd">
<keyword_library>

    <libraryType type="COMPONENT" />
    
    <libraryInfo name="GenericObjectFunctions" 
                 doc="GenericObjectFunctions.htm" 
                 sourcecode="GenericObjectFunctions.sbl" 
                 chainTo="GenericMasterFunctions" 
                 class="GENERIC">

        <description>
           <short_desc> 
              Actions for working with GENERIC objects
           </short_desc><detailed_desc />
        </description>

    </libraryInfo>
    <runtime platform="Windows" engine="Robot" version="2002" />
    <keywords>
    
    <keyword name="VERIFYIMAGE" 
             displayText="VerifyImage" 
             deprecated="NO" 
             expectFailSupport="NO" 
             expectWarnSupport="NO">
             
         <description>
              <short_desc> 
                 Performs a GenericObjectVP CompareImage OR a RegionImageVP on an object.
              </short_desc>
              <detailed_desc> 
                <p>Performs a GenericObjectVP CompareImage OR a RegionImageVP on an object.  
                The benchmark VP must already exist and be an asset of the currently 
                running script.</p>
                <p>
                A RegionImageVP can be accomplished by having the name of the VP as an item 
                under the component in the application map.  The item's value must be 
                the coordinate values required by the RegionImageVP (i.e. "65,100,200,250").</p>
                <p>
                Example 1: Perform a GenericObjectVP CompareImage</p>
                <p>
                MainWindow SomeGenericObject VerifyImage StoredVP</p>
                <p>
                (no StoredVP item found in the app map under SomeGenericObject)</p>
                <p>
                The named VP (StoredVP) must not exist in the application map.  The 
                entire panel/object of SomeGenericObject will be captured and compared 
                against the StoredVP baseline which must already exist as an asset of the
                currently running script.</p>
                <p> 
                Example 2: Perform a RegionImageVP on a particular area of the screen</p>
                <p>
                MainWindow SomeGenericObject VerifyImage StoredVP</p>
                <pre>
                (StoredVP found as:
                
                "65,100,200,250"   OR
                "Coords=65,100,200,250"
                </pre><p> 
                in the SomeGenericObject section of the app map)</p>
                <p> 
                The named VP (StoredVP) is found to exist in the application map as a
                subitem in the SomeGenericObject section of the map.  This causes 
                the routine to attempt a RegionImageVP using the map's value of the StoredVP 
                item as the coordinates for the region to capture.  StoredVP is ALSO the 
                name of the VP which must already exist as an asset of the currently 
                running script.</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" >
	       <libraryInfo name="GenericObjectFunctions" 
                            doc="GenericObjectFunctions.htm" 
                            sourcecode="GenericObjectFunctions.sbl" 
                            class="GENERIC" />
           </engine>
       </engines>

       <parameters>
        <parameter name="VPASSET" displayText="VPAsset" optional="NO">
           <description>
              <short_desc> 
                Name of the pre-existing VP asset stored in the currently running script.
              </short_desc>
              <detailed_desc>
                Name of the pre-existing VP asset stored in the currently running script.
                If the name also exists in the app map under the component then 
                a RegionImageVP will be attempted.
              </detailed_desc>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WINDOW, AnObject, VERIFYIMAGE, "AStoredVP"</usage>
           <description>
              <short_desc> 
                This action verifies the AnObject image against the "AStoredVP" benchmark.
              </short_desc>
              <detailed_desc> 
                Field  5 : TQ String. The name of a stored VP which must exist as an asset of the
                currently running script.  
                Normally, a straight Robot CompareImage of the entire object would be performed. 
                However, if the AStoredVP value given exists in the Application Map as a reference
                under the provided Component Object then a RegionImage test will be attempted instead.
              </detailed_desc>
           </description>
        </example>

     </examples></keyword>
     
  <keyword name="COMPARESTOREDPROPERTIES" 
           displayText="CompareStoredProperties" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                Performs a GenericObjectVP CompareProperties on an object.
              </short_desc>
              <detailed_desc> 
                <p>Performs a GenericObjectVP CompareProperties on an object.</p>
                <p>
                THE BENCHMARK VP MUST ALREADY EXIST AND BE AN ASSET OF THE CURRENTLY
                RUNNING SCRIPT.</p>
                <p>
                Modified VP parameter information can be added to the standard
                VP=VPName by including the VPName reference in the application map
                in a section defined for the object.  If this is done, the value 
                retrieved from the application map will be appended to VP=VPName.
                The required semicolon for this append will be provided by this routine.</p>
                <p>
                Example 1: Perform a standard HTMLImage CompareProperties.  To perform
                a basic CompareProperties the name "StoredVP" will not exist in the app map:</p>
                <p>
                The Step File call:</p>
                <p> 
                BrowserWindow AnHTMLImage CompareStoredProperties StoredVP</p>
                <p> 
                This will produce a VP with "VP=StoredVP;Wait=2,10".</p>
                <p>
                The StoredVP baseline MUST already exist as an asset of the
                currently running script.</p>
                <p>
                Example 2: Perform a HTMLImage CompareProperties providing addition 
                parameter information (such as ExpectedResult=FAIL).  To do this the
                HTMLImage object must have its own section in the app map and an item
                with the same name as the StoredVP.  The value of that item will be
                appended to the standard VP argument with a semicolon.</p>
                <p>
                Part of App Map:</p>
                <pre>
                [BrowserWindow]
                BrowserWindow=WindowTag=WEBBrowser
                AnHTMLImage=&lt;snipped for brevity&gt;;\;Type=HTMLImage;Index=1
                ...
                [AnHTMLImage]
                StoredVP=ExpectedResult=FAIL;Wait=3,30
                </pre><p>
                The Step File call:</p>
                <p>
                BrowserWindow AnHTMLImage CompareStoredProperties StoredVP</p>
                <p>
                This will produce a VP with all the parameters appended
                like this: "VP=StoredVP;ExpectedResult=FAIL;Wait=3,30".
                NOTE:When stored parameters are found in the app map then the default Wait= 
                parameter used in the standard compare is no longer provided.  If you still 
                need a Wait= parameter, then it must be included in the stored parameters.</p>
                <p>
                The StoredVP baseline MUST already exist as an asset of the
                currently running script.</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" >
	       <libraryInfo name="GenericObjectFunctions" 
                            doc="GenericObjectFunctions.htm" 
                            sourcecode="GenericObjectFunctions.sbl" 
                            class="GENERIC" />
           </engine>
           <engine name="WinRunner" 
			       since="20020821" 
			       tool="WinRunner" 
			       vendor="Mercury Interactive">
		       <libraryInfo class="GENERIC" 
					name="GenericObjectFunctions" 
					sourcecode="GenericObjectFunctions">
		       </libraryInfo>
           </engine>
       </engines>

       <parameters>
        <parameter name="VPASSET" displayText="VPAsset" optional="NO">
           <description>
              <short_desc> 
                Name of the pre-existing VP asset stored in the currently running script.
              </short_desc>
              <detailed_desc>
                Name of the pre-existing VP asset stored in the currently running script.
              </detailed_desc>
           </description>
        </parameter>
        <parameter name="ADDPARAMS" displayText="AddParams" optional="YES">
           <description>
              <short_desc> 
                Additional parameter name used for lookup, or as literal text.
              </short_desc>
              <detailed_desc>
                Another parameter that can be stored as a lookup reference in the app map 
                that will be added to any also stored in the app map under the VP name.
                This parameter will also be treated as literal text if lookup in the app map 
                fails.  In this way, we can add parameters to the VP thru literal text 
                instead of requiring any App Map entry.
              </detailed_desc>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WINDOW, AnObject, COMPARESTOREDPROPERTIES, "AStoredVP"</usage>
           <description>
              <short_desc> 
                This action performs a CompareProperties on AnObject against the "AStoredVP" benchmark.
              </short_desc>
              <detailed_desc> 
                Field  5 : TQ String. The name of a stored ComparePropertiesVP which must exist as an
                asset of the currently running script.   
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, AnObject, COMPARESTOREDPROPERTIES, "AStoredVP", "ExpectedResult=FAIL"</usage>
           <description>
              <short_desc> 
                This action performs a CompareProperties on AnObject against the "AStoredVP" benchmark.
              </short_desc>
              <detailed_desc> 
                Field  5 : TQ String. The name of a stored ComparePropertiesVP which must exist as an
                asset of the currently running script.   
                <p>
                Field  6 : TQ String. Literal text to be added to the VP info for execution.   
                </p>
              </detailed_desc>
           </description>
        </example>
     </examples></keyword>

  <keyword name="COMPARESTOREDDATA" 
           displayText="CompareStoredData" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                Performs a GenericObjectVP CompareData on an object.
              </short_desc>
              <detailed_desc> 
                <p>
                THE BENCHMARK VP MUST ALREADY EXIST AND BE AN ASSET OF THE CURRENTLY
                RUNNING SCRIPT.</p>
                <p>
                Modified VP parameter information can be added to the standard
                VP=VPName by including the VPName reference in the application map
                in a section defined for the object.  If this is done, the value 
                retrieved from the application map will be appended to VP=VPName.
                The required semicolon for this append will be provided by this routine.</p>
                <p>
                Example 1: Perform a standard HTMLImage CompareData.  To perform
                a basic CompareData the name "StoredVP" will not exist in the app map:</p>
                <p>
                The Step File call:</p>
                <p> 
                BrowserWindow AnHTMLImage CompareStoredData StoredVP</p>
                <p> 
                This will produce a CompareData VP with "VP=StoredVP;Wait=2,10".</p>
                <p>
                The StoredVP baseline MUST already exist as an asset of the
                currently running script.</p>
                <p>
                Example 2: Perform a HTMLImage CompareData providing addition 
                parameter information (such as ExpectedResult=FAIL).  To do this the
                HTMLImage object must have its own section in the app map and an item
                with the same name as the StoredVP.  The value of that item will be
                appended to the standard VP argument with a semicolon.</p>
                <p>
                Part of App Map:</p>
                <pre>
                [BrowserWindow]
                BrowserWindow=WindowTag=WEBBrowser
                AnHTMLImage=&lt;snipped for brevity&gt;;\;Type=HTMLImage;Index=1
                ...
                [AnHTMLImage]
                StoredVP=ExpectedResult=FAIL;Wait=3,30
                </pre><p>
                The Step File call:</p>
                <p>
                BrowserWindow AnHTMLImage CompareStoredData StoredVP</p>
                <p>
                This will produce a CompareData VP with all the parameters appended
                like this: "VP=StoredVP;ExpectedResult=FAIL;Wait=3,30".
                NOTE:When stored parameters are found in the app map then the default Wait= 
                parameter used in the standard compare is no longer provided.  If you still 
                need a Wait= parameter, then it must be included in the stored parameters.</p>
                <p>
                The StoredVP baseline MUST already exist as an asset of the
                currently running script.</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20051014" >
	       <libraryInfo name="GenericObjectFunctions" 
                            doc="GenericObjectFunctions.htm" 
                            sourcecode="GenericObjectFunctions.sbl" 
                            class="GENERIC" />
           </engine>
       </engines>

       <parameters>
        <parameter name="VPASSET" displayText="VPAsset" optional="NO">
           <description>
              <short_desc> 
                Name of the pre-existing VP asset stored in the currently running script.
              </short_desc>
              <detailed_desc>
                Name of the pre-existing VP asset stored in the currently running script.
                If the name also exists in the app map under the component then the
                additional stored parameters are appended to the VP call.
              </detailed_desc>
           </description>
        </parameter>
        <parameter name="ADDPARAMS" displayText="AddParams" optional="YES">
           <description>
              <short_desc> 
                Additional parameter name used for lookup, or as literal text.
              </short_desc>
              <detailed_desc>
                Another parameter that can be stored as a lookup reference in the app map 
                that will be added to any also stored in the app map under the VP name.
                This parameter will also be treated as literal text if lookup in the app map 
                fails.  In this way, we can add parameters to the VP thru literal text 
                instead of requiring any App Map entry.
              </detailed_desc>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WebBrowser, SiteMapImage, COMPARESTOREDDATA, "AStoredVP"</usage>
           <description>
              <short_desc> 
                This action compares stored data on the SiteMapImage object against "AStoredVP".
              </short_desc>
              <detailed_desc> 
                <p>Field  5 : TQ String. The name of a stored CompareData VP which must exist
                as an asset of the currently running script. 
                You can also specify additional VP parameters by including a reference
                in the application map.</p>
                <p>[URLLink]</p>
                <p>AStoredVP=ExpectedResult=FAIL;Wait=3,30</p>
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, AnObject, COMPARESTOREDDATA, "AStoredVP", "ExpectedResult=FAIL"</usage>
           <description>
              <short_desc> 
                This action performs a CompareData VP on AnObject against the "AStoredVP" benchmark.
              </short_desc>
              <detailed_desc> 
                Field  5 : TQ String. The name of a stored CompareData VP which must exist as an
                asset of the currently running script.   
                <p>
                Field  6 : TQ String. Literal text to be added to the VP info for execution.   
                </p>
              </detailed_desc>
           </description>
        </example>
     </examples></keyword>
          
  <keyword name="TAP" 
           displayText="Tap" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                A single Tap on a touchscreen object.  Use keyword "Click" syntax and parameters.
              </short_desc>
       </description>
       <engines>
            <engine vendor="Google" tool="Android" name="Android" since="20120501" >
				<libraryInfo name="CFViewFunctions" 
					 doc="http://safsdev.sourceforge.net/doc/org/safs/android/CFViewFunctions.html" 
					 sourcecode="org.safs.android.CFViewFunctions.java" 
					 class="GENERIC" />
            	<domains>
            		<domain name="DEV" since="20120501">
	        			<libraryInfo name="ViewProcessor" 
                             doc="http://safsdev.sourceforge.net/doc/org/safs/android/engine/ViewProcessor.html" 
                             sourcecode="org.safs.android.engine.ViewProcessor.java" 
                             class="GENERIC" />
                    </domain>
                </domains>
            </engine>
           <engine vendor="Apple" tool="IOS" name="Apple XCode Instruments" since="20111011" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/ios/CFComponent.html" 
                            sourcecode="org.safs.ios.CFComponent.java" 
                            class="GENERIC" />
           </engine>
       </engines>
  </keyword>
  
  <keyword name="DOUBLETAP" 
           displayText="DoubleTap" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                A double-tap on a touchscreen object.  Use keyword "DoubleClick" syntax and parameters.
              </short_desc>
       </description>
       <engines>
           <engine vendor="Apple" tool="IOS" name="Apple XCode Instruments" since="20111011" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/ios/CFComponent.html" 
                            sourcecode="org.safs.ios.CFComponent.java" 
                            class="GENERIC" />
           </engine>
       </engines>
  </keyword>
  
  <keyword name="PRESS" 
           displayText="Press" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                Press a touchscreen object for a number of seconds--0 seconds by default.
              </short_desc>
       </description>
       <engines>
            <engine vendor="Google" tool="Android" name="Android" since="20120501" >
				<libraryInfo name="CFViewFunctions" 
					 doc="http://safsdev.sourceforge.net/doc/org/safs/android/CFViewFunctions.html" 
					 sourcecode="org.safs.android.CFViewFunctions.java" 
					 class="GENERIC" />
            	<domains>
            		<domain name="DEV" since="20120501">
	        			<libraryInfo name="ViewProcessor" 
                             doc="http://safsdev.sourceforge.net/doc/org/safs/android/engine/ViewProcessor.html" 
                             sourcecode="org.safs.android.engine.ViewProcessor.java" 
                             class="GENERIC" />
                    </domain>
                </domains>
            </engine>
           <engine vendor="Apple" tool="IOS" name="Apple XCode Instruments" since="20111011" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/ios/CFComponent.html" 
                            sourcecode="org.safs.ios.CFComponent.java" 
                            class="GENERIC" />
           </engine>
       </engines>
       <parameters>
         <parameter name="DURATION" displayText="Duration" optional="YES" default="0">
           <description>
              <short_desc>
                 Optional number of seconds (0 to N) to press on the object.
              </short_desc>
              <detailed_desc>
                 Optional number of seconds (0 to N) to press on the item.  The default if no value is provided is 0.  
              </detailed_desc>
           </description>
         </parameter>
       </parameters>
       <examples>
         <example>
           <usage>T, WINDOW, COMPONENT, Press</usage>
           <description>
              <short_desc> 
               A press on the object for less than 1 second.
              </short_desc>
              <detailed_desc> 
               A press on the object for less than 1 second.
              </detailed_desc>
           </description>
         </example>
         <example>
           <usage>T, WINDOW, COMPONENT, Press, 3</usage>
           <description>
              <short_desc> 
               A press on the object for 3 seconds.
              </short_desc>
              <detailed_desc> 
               A press on the object for 3 seconds.
              </detailed_desc>
           </description>
         </example>
       </examples>
  </keyword>
  
  <keyword name="TWOFINGERTAP" 
           displayText="TwoFingerTap" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                A two-finger tap on a touchscreen object.
              </short_desc>
       </description>
       <engines>
           <engine vendor="Apple" tool="IOS" name="Apple XCode Instruments" since="20111011" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/ios/CFComponent.html" 
                            sourcecode="org.safs.ios.CFComponent.java" 
                            class="GENERIC" />
           </engine>
       </engines>
       <examples>
         <example>
           <usage>T, WINDOW, COMPONENT, TwoFingerTap</usage>
           <description>
              <short_desc> 
               A two-fingered tap on the object.
              </short_desc>
              <detailed_desc> 
               A two-fingered tap on the object.
              </detailed_desc>
           </description>
         </example>
       </examples>
  </keyword>
  
  <keyword name="FLICK" 
           displayText="Flick" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                A user-defined flick or swipe on a touchscreen object.
              </short_desc>
              <detailed_desc>
                The user would use this command if they need to customize parameters like:
                <ul>
                <li>Number of fingers used: default=1,</li>
                <li>Start and ending offsets within the object: defaults=90;50;10;50</li>
                <li>How long (in seconds) to complete the flick from start to end: default=1.</li>
                </ul>
              </detailed_desc>
       </description>
       <engines>
           <engine vendor="Apple" tool="IOS" name="Apple XCode Instruments" since="20111011" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/ios/CFComponent.html" 
                            sourcecode="org.safs.ios.CFComponent.java" 
                            class="GENERIC" />
           </engine>
       </engines>
       <parameters>
         <parameter name="APPMAPSUBKEY" displayText="AppMapSubKey" optional="YES" default="90;50;10;50">
           <description>
              <short_desc>
                 Optional AppMap SubKey (or literal text) containing x1,y1,x2,y2 flick offsets within the object.
              </short_desc>
              <detailed_desc>
                 Without this we should perform a default right-to-left Flick.
                 <p>Name of the AppMap subkey to lookup and use for the command.
                 We expect the AppMap or literal text to contain the item in the format "x1,y1,x2,y2":</p>
                 <pre>
                 [ComponentName]
                 OffsetName="0;0;100;100"
                 </pre><p>  
                 Both Fields #3 (Component Name) and #5 (Offset Name) are used to locate the item in the App Map.
                 This routine does not specify an App Map so only the current Map is used and it is expected to be valid.
                 </p><p>
                 If no such App Map lookup exists, then we will assume the field contains the offset value directly.
                 </p><p>                 
                 Offsets are "relative" to the object.  Each value should be an integer 0-100 representing 
                 the relative percentage where 0 is the minimum (left or top) and 100 is the maximum width or height 
                 of the object.  Thus: 0,0,100,100 represents a flick from the topleft corner to the bottomright 
                 corner of the object.
		         </p><p>
		         Engines should attempt to support offsets separated by different characters.  
		         The most common separators that should be supported would be:
		         <ul>
		         <li>"," (comma) Example: "0,0,100,100" (topleft to bottomright)</li>
		         <li>";" (semi-colon) Example: "100;0;0;100" (topright to bottomleft)</li>
		         <li>" " (space) Example: "0 50 100 50" (leftcenter to rightcenter)</li>
		         </ul>
		         </p>
              </detailed_desc>
           </description>
         </parameter>
         <parameter name="DURATION" displayText="Duration" optional="YES" default="1">
           <description>
              <short_desc>
                 Optional number of seconds (0 to N) to press on the object.
              </short_desc>
              <detailed_desc>
                 Optional number of seconds (0 to N) to press on the item.  The default value is 1.  
              </detailed_desc>
           </description>
         </parameter>
         <parameter name="TOUCHES" displayText="Touches" optional="YES" default="1">
           <description>
              <short_desc>
                 Optional number of touches or fingers to use.
              </short_desc>
              <detailed_desc>
                 Optional number of touches or fingers to use.  The default value is 1.  
              </detailed_desc>
           </description>
         </parameter>
         <parameter name="REPEAT" displayText="Repeat" optional="YES" default="1">
           <description>
              <short_desc>
                 Optional number of times to repeat the operation.
              </short_desc>
              <detailed_desc>
                 Optional number of times to repeat the operation.  
              </detailed_desc>
           </description>
         </parameter>
       </parameters>
       <examples>
         <example>
           <usage>T, WINDOW, COMPONENT, Flick</usage>
           <description>
              <short_desc> 
               A simple flick on the object, from right-to-left with one touch/finger taking 1 second.
              </short_desc>
              <detailed_desc> 
               A simple flick on the object, from right-to-left with one touch/finger taking 1 second.
              </detailed_desc>
           </description>
         </example>
         <example>
           <usage>T, MainApp, MyTree, Flick, TopRightToBottom</usage>
           <description>
              <short_desc> 
               A flick on the MyTree object using AppMapped offsets with one touch/finger taking 1 second.
              </short_desc>
              <detailed_desc> 
               A flick on the MyTree object with one touch/finger taking 1 second. The AppMap is intended to 
               contains something like below:
               <p><pre>
               [MyTree]
               TopRightToBottom="90;0;90;100"
               </pre></p>
              </detailed_desc>
           </description>
         </example>
         <example>
           <usage>T, MainApp, MyTree, Flick, TopRightToBottom, 3</usage>
           <description>
              <short_desc> 
               A flick on the MyTree object using AppMapped offsets with one touch/finger taking 3 second.
              </short_desc>
              <detailed_desc> 
               A flick on the MyTree object using AppMapped offsets with one touch/finger taking 3 second.
              </detailed_desc>
           </description>
         </example>
         <example>
           <usage>T, MainApp, MyTree, Flick, "", "", 2</usage>
           <description>
              <short_desc> 
               A simple right-to-left flick on the MyTree object taking 1 second with 2 fingers.
              </short_desc>
              <detailed_desc> 
               A simple right-to-left flick on the MyTree object taking 1 second with 2 fingers.
              </detailed_desc>
           </description>
         </example>
         <example>
           <usage>T, MainApp, MyTree, Flick, "", "", "", 3</usage>
           <description>
              <short_desc> 
               3 simple right-to-left flicks on the MyTree object taking 1 second each.
              </short_desc>
              <detailed_desc> 
               3 simple right-to-left flicks on the MyTree object taking 1 second each.
              </detailed_desc>
           </description>
         </example>
       </examples>
  </keyword>
  
  <keyword name="FLICKLEFT" 
           displayText="FlickLeft" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                A flick or swipe on a touchscreen object from right-to-left.
              </short_desc>
       </description>
       <engines>
           <engine vendor="Apple" tool="IOS" name="Apple XCode Instruments" since="20111011" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/ios/CFComponent.html" 
                            sourcecode="org.safs.ios.CFComponent.java" 
                            class="GENERIC" />
           </engine>
       </engines>
       <parameters>
         <parameter name="REPEAT" displayText="Repeat" optional="YES" default="1">
           <description>
              <short_desc>
                 Optional number of times to repeat the operation.
              </short_desc>
              <detailed_desc>
                 Optional number of times to repeat the operation.  
              </detailed_desc>
           </description>
         </parameter>
       </parameters>
       <examples>
         <example>
           <usage>T, WINDOW, COMPONENT, FlickLeft</usage>
           <description>
              <short_desc> 
               A simple flick on the object from right-to-left.
              </short_desc>
              <detailed_desc> 
               A simple flick on the object from right-to-left.
              </detailed_desc>
           </description>
         </example>
         <example>
           <usage>T, WINDOW, COMPONENT, FlickLeft, 3</usage>
           <description>
              <short_desc> 
               3 simple flicks on the object from right-to-left.
              </short_desc>
              <detailed_desc> 
               3 simple flicks on the object from right-to-left.
              </detailed_desc>
           </description>
         </example>
       </examples>
  </keyword>
  
  <keyword name="FLICKRIGHT" 
           displayText="FlickRight" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                A flick or swipe on a touchscreen object from left-to-right.
              </short_desc>
       </description>
       <engines>
           <engine vendor="Apple" tool="IOS" name="Apple XCode Instruments" since="20111011" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/ios/CFComponent.html" 
                            sourcecode="org.safs.ios.CFComponent.java" 
                            class="GENERIC" />
           </engine>
       </engines>
       <parameters>
         <parameter name="REPEAT" displayText="Repeat" optional="YES" default="1">
           <description>
              <short_desc>
                 Optional number of times to repeat the operation.
              </short_desc>
              <detailed_desc>
                 Optional number of times to repeat the operation.  
              </detailed_desc>
           </description>
         </parameter>
       </parameters>
       <examples>
         <example>
           <usage>T, WINDOW, COMPONENT, FlickRight</usage>
           <description>
              <short_desc> 
               A simple flick on the object from left-to-right.
              </short_desc>
              <detailed_desc> 
               A simple flick on the object from left-to-right.
              </detailed_desc>
           </description>
         </example>
         <example>
           <usage>T, WINDOW, COMPONENT, FlickRight, 3</usage>
           <description>
              <short_desc> 
               3 simple flicks on the object from left-to-right.
              </short_desc>
              <detailed_desc> 
               3 simple flicks on the object from left-to-right.
              </detailed_desc>
           </description>
         </example>
       </examples>
  </keyword>
  
  <keyword name="FLICKDOWN" 
           displayText="FlickDown" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                A flick or swipe on a touchscreen object from top-to-bottom.
              </short_desc>
       </description>
       <engines>
           <engine vendor="Apple" tool="IOS" name="Apple XCode Instruments" since="20111011" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/ios/CFComponent.html" 
                            sourcecode="org.safs.ios.CFComponent.java" 
                            class="GENERIC" />
           </engine>
       </engines>
       <parameters>
         <parameter name="REPEAT" displayText="Repeat" optional="YES" default="1">
           <description>
              <short_desc>
                 Optional number of times to repeat the operation.
              </short_desc>
              <detailed_desc>
                 Optional number of times to repeat the operation.  
              </detailed_desc>
           </description>
         </parameter>
       </parameters>
       <examples>
         <example>
           <usage>T, WINDOW, COMPONENT, FlickDown</usage>
           <description>
              <short_desc> 
               A simple flick on the object from top-to-bottom.
              </short_desc>
              <detailed_desc> 
               A simple flick on the object from top-to-bottom.
              </detailed_desc>
           </description>
         </example>
         <example>
           <usage>T, WINDOW, COMPONENT, FlickDown, 3</usage>
           <description>
              <short_desc> 
               3 simple flicks on the object from top-to-bottom.
              </short_desc>
              <detailed_desc> 
               3 simple flicks on the object from top-to-bottom.
              </detailed_desc>
           </description>
         </example>
       </examples>
  </keyword>
  
  <keyword name="FLICKUP" 
           displayText="FlickUp" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                A flick or swipe on a touchscreen object from bottom-to-top.
              </short_desc>
       </description>
       <engines>
           <engine vendor="Apple" tool="IOS" name="Apple XCode Instruments" since="20111011" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/ios/CFComponent.html" 
                            sourcecode="org.safs.ios.CFComponent.java" 
                            class="GENERIC" />
           </engine>
       </engines>
       <parameters>
         <parameter name="REPEAT" displayText="Repeat" optional="YES" default="1">
           <description>
              <short_desc>
                 Optional number of times to repeat the operation.
              </short_desc>
              <detailed_desc>
                 Optional number of times to repeat the operation.  
              </detailed_desc>
           </description>
         </parameter>
       </parameters>
       <examples>
         <example>
           <usage>T, WINDOW, COMPONENT, FlickUp</usage>
           <description>
              <short_desc> 
               A simple flick on the object from bottom-to-top.
              </short_desc>
              <detailed_desc> 
               A simple flick on the object from bottom-to-top.
              </detailed_desc>
           </description>
         </example>
         <example>
           <usage>T, WINDOW, COMPONENT, FlickUp, 3</usage>
           <description>
              <short_desc> 
               3 simple flicks on the object from bottom-to-top.
              </short_desc>
              <detailed_desc> 
               3 simple flicks on the object from bottom-to-top.
              </detailed_desc>
           </description>
         </example>
       </examples>
  </keyword>
  
  <keyword name="CLICK" 
           displayText="Click" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                A single click on an object.
              </short_desc>
              <detailed_desc>
                <p>
                By default, clicks on the center of the component.
                We can also click on any part of an object, or any point relative to an object 
                based on a provided x,y coordinate or other component-specific parameters.  
                </p><p>
                For SE+, the coordinate can be percentage format, like "20%,30%". This percentage format 
                indicates the point (20% width of component, 30% height of component) relative to the object.
                </p><p>
                The object to be clicked is first given context and then a click is 
                generated at the coordinates.  Thus, a subitem or object can be 
                referenced by name even though it is only recognized via coordinates.
                </p><p>
                The coordinate lookup is done with the component name of the record AND 
                Field #5 or by providing the literal text of the coordinates, where supported.</p>
                <p>
                Typical Data Table records:</p>
                <p>
                (1) t MainWindow MainWindow  Click<br/>
                (2) t MainWindow MainWindow  Click AnObject<br/>
                (3) t MainWindow FolderTree  Click Node1<br/>
                (4) t MainWindow MainWindow  Click "50,200"<br/>
                (5) t MainWindow MainWindow  Click "Coords=50,200"
                </p><p>
                For SE+, the Data Table records can be:
                </p><p>
                (6) t MainWindow MainWindow  Click "50%,20%"<br/>
                (7) t MainWindow MainWindow  Click "50,20%"<br/>
                </p><p>
                #2 above will contain an AnObject="3,10" entry in the MainWindow section 
                of the Application Map to click at x=3, y=10 in the MainWindow.
                </p><p>
                #3 above will contain a FolderTree entry in the MainWindow section with 
                normal recognition information for it.  FolderTree will also have it's
                own section in the Application Map in which there will be an entry like 
                Node1="15,30".  This will tell Robot to locate the FolderTree Generic 
                object and click at the coordinates specified by the reference.
                </p><p>
                #4 and #5 above show using literal text instead of an App Map entry to specify 
                where to click relative to the item.
                </p><p>
                #6 and #7 above show using percentage format in <b>SE+</b>. #6 will click at position, 
                where the X value equals 50% width of component, its Y value equals 20% height of component, 
                relative to the object. #7 will click at position, where the X value equals 50, 
                its Y value equals 20% height of component, relative to the object.
                </p><p>
                Rational Robot no longer requires the AppMapSubKey be provided and will 
                attempt to use the string as literal text if no AppMapSubKey is found in 
                the current App Map.  Robot also no longer assumes the AppMapSubKey value 
                or the literal value is presenting coordinate information.  This allows 
                components that can accept parameters other than coordinates, like table 
                row/col values or ImageMap areas to be specified.
                </p><p>
                If the value is deduced to contain coordinates, but is not prefixed with 
                "Coords=" text, then Robot will add the prefix.  Otherwise, the text value 
                will remain unmodified.
                </p><p>
		        This is the direction we expect all tools to follow going forward.
		        </p><p>
		        Engines should also attempt to support coordinates separated by alternate separators.  
		        The most common separators that should be supported would be:
		        <ul>
		        <li>"," (comma) Example: "50,200"</li>
		        <li>";" (semi-colon) Example: "50;200"</li>
		        <li>" " (space) Example: "50 200"</li>
		        </ul>
		        </p><p>
		        Note: the TID supports this command using 
		        <a href="http://safsdev.sourceforge.net/sqabasic2000/SAFSImageBasedRecognition.htm" 
		        target="imagebased" alt="SAFS Image-Based Recognition Doc">Image-Based Testing</a> 
		        techniques and App Map entries as well as literal text coordinates.
		        </p>
		        <p>For IOS: Any optional coordinates MUST be specified as an integer number between 
		        0-100.  0 represents the extreme left (or top), while 100 represents the extreme 
		        right (or bottom). IOS does not use absolute coordinates, but relative coordinates 
		        representing a percentage of the element width or height.
		        </p>
              </detailed_desc>
           </description>
           
       <engines>
            <engine vendor="Google" tool="Android" name="Android" since="20120501" >
				<libraryInfo name="CFViewFunctions" 
					 doc="http://safsdev.sourceforge.net/doc/org/safs/android/CFViewFunctions.html" 
					 sourcecode="org.safs.android.CFViewFunctions.java" 
					 class="GENERIC" />
            	<domains>
            		<domain name="DEV" since="20120501">
	        			<libraryInfo name="ViewProcessor" 
                             doc="http://safsdev.sourceforge.net/doc/org/safs/android/engine/ViewProcessor.html" 
                             sourcecode="org.safs.android.engine.ViewProcessor.java" 
                             class="GENERIC" />
                    </domain>
                </domains>
            </engine>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" >
	       <libraryInfo name="GenericObjectFunctions" 
                            doc="GenericObjectFunctions.htm" 
                            sourcecode="GenericObjectFunctions.sbl" 
                            class="GENERIC" />
           </engine>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20030827" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="GENERIC" />
           </engine>
           <engine vendor="Apple" tool="IOS" name="Apple XCode Instruments" since="20111011" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/ios/CFComponent.html" 
                            sourcecode="org.safs.ios.CFComponent.java" 
                            class="GENERIC" />
           </engine>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20080918" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
           <engine name="WinRunner" 
	   		       since="20020821" 
	   		       tool="WinRunner" 
	   		       vendor="Mercury Interactive">
	   	       <libraryInfo class="GENERIC" 
	   				name="GenericObjectFunctions" 
	   				sourcecode="GenericObjectFunctions">
	   	       </libraryInfo>
           </engine>
           <engine name="Test Complete" 
				   since="20081028" 
				   tool="TestComplete" 
				   vendor="Automated QA">
			   <libraryInfo class="GENERIC" 
					name="GenericObjectFunctions" 
					sourcecode="GenericObjectFunctions.SVB">
			   </libraryInfo>
           </engine>
           <engine vendor="Abbot" tool="Abbot" name="Abbot" since="20050923" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/abbot/CFComponent.html" 
                            sourcecode="org.safs.abbot.CFComponent.java" 
                            class="GENERIC" />
           </engine>
	   	   <engine vendor="OpenQA" tool="Selenium" name="Selenium" since="20070130" >
	    	<libraryInfo name="CFComponent" 
			doc="org/safs/selenium/CFComponent.html" 
			sourcecode="org.safs.selenium.CFComponent.java" 
			class="CFComponent" />
            </engine>
           <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140305" >
	           <libraryInfo name="CFComponent" 
                            doc="org/safs/selenium/webdriver/CFComponent.html" 
                            sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
                            class="CFComponent"/>
           </engine>
           <engine vendor="AUTOIT Team" tool="Autoit" name="Autoit" since="20160719" >
                <libraryInfo name="AutoItComponent" 
                         doc="org/safs/tools/engines/AutoItComponent.html" 
                         sourcecode="org.safs.tools.engines.AutoItComponent.java" 
                         class="CFComponent" />
           </engine>
       </engines>

       <parameters>
        <parameter name="APPMAPSUBKEY" displayText="AppMapSubkey" optional="YES">
           <description>
              <short_desc> 
                (Optional)Name of the AppMap subkey to lookup or the literal text to use for the click.
              </short_desc>
              <detailed_desc>
                Without this we should click on the center of the object.
                <p>Name of the AppMap subkey to lookup and use for the click.
                We expect the AppMap or literal text to contain the item in the format "x,y":</p>
                <pre>
                [FolderTree]
                Node1="33,120"      OR
                Node1="Coords=33,120"
                ...
                [AnHTMLImage]
                AMappdedRegion=Coords=10,10
                ANamedRegion=AreaName=TechSupport
                AnIndexedRegion=AreaIndex=2
                AnotherRegion=AreaID=Contact
                </pre><p>  
                The results from the lookup are appended to the "Coords=" string 
                used by the Click command in Robot (only if necessary).  So any 
                valid content used with the Click command can be part of 
                this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.
                </p><p>
                The Rational Robot implementation also supports using literal text in 
                this parameter instead of an AppMapSubKey.  If the value retrieved from 
                this field is NOT found to exist in the App Map as a Sub Key then it 
                will be used as literal text as if it HAD been retrieved from the App Map.
				</p><p>
				Engines should also attempt to support coordinates separated by alternate separators.  
				The most common separators that should be supported would be:
				<ul>
				<li>"," (comma) Example: "50,200"</li>
				<li>";" (semi-colon) Example: "50;200"</li>
				<li>" " (space) Example: "50 200"</li>
				</ul>
				</p>
                <p><b>Important TID note.</b> The <a href="http://safsdev.sourceforge.net/sqabasic2000/SAFSImageBasedRecognition.htm" 
		target="imagebased" alt="SAFS Image-Based Recognition Doc">TID IBT implementation</a> supports using literal text in 
                this parameter instead of an AppMapSubKey.  If the value retrieved from 
                this field is NOT found to exist in the App Map as a Sub Key then it 
                will be used as literal text as if it HAD been retrieved from the App Map.
                </p><p>
                Any coordinates provided for TID IBT are considered relative to the top-left (0,0) of the 
                image or item found unless PointRelative and\or Hotspot information in the IBT recognition 
                string change this initial relative point to be somewhere else.
                </p>
                <p><b>Important Abbot note.</b> Presently, there is no support for AppMapSubkey
                specification (5th field).
                </p>
		        <p>For IOS: Any optional coordinates MUST be specified as an integer number between 
		        0-100.  0 represents the extreme left (or top), while 100 represents the extreme 
		        right (or bottom). IOS does not use absolute coordinates, but relative coordinates 
		        representing a percentage of the element width or height.
		        </p>
              </detailed_desc>
           </description>
        </parameter>
        <parameter name="AUTOSCROLL" displayText="AutoScroll" optional="YES">
           <description>
              <short_desc> 
                (Optional) True|False. If the component will be scrolled into view automatically before clicking. The default value is true.
              </short_desc>
              <detailed_desc>
                If the component is out of view, the click action will not succeed. Normally we will scroll the component into view,
                and then perform the click action. But sometimes, the component is partially shown and click could work and user does not
                want the component shift, then we could turn off the auto-scroll ability by setting this parameter to false.<br/>
                If this auto-scroll is turned off, user needs to make sure that component is shown by himself.
              </detailed_desc>
              <note>
                <engines><engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20160422"/></engines>
                <value>For now, this optional parameter is only supported in Selenium2.0 Engine. </value>
              </note>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WINDOW, COMPONENT, CLICK</usage>
           <description>
              <short_desc> 
               A single click on the center of the object.
              </short_desc>
              <detailed_desc> 
               A single click on the center of the object.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, WINDOW, CLICK, AnObject</usage>
           <description>
              <short_desc> 
               A single click will be performed at a x,y coordinate indicated by the AnObject reference in
               the Application Map.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. A reference identified in the Application Map identifying coordinates
               on which to click
               This example shows AnObject which will be found in the Application Map as a referenced item
               in the WINDOW section.    
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, AnObject, CLICK, ASubObject</usage>
           <description>
              <short_desc> 
               A single click will be performed at a x,y coordinate indicated by the ASubObject reference in
               the Application Map.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. A reference identified in the Application Map identifying coordinates
               on which to click
               This example shows AnObject as a viable object in the WINDOW but that it also has its own
               section in the Application Map which contains one or more named references like
               ASubObject which are used for test.   
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, AnObject, CLICK, 10;20</usage>
           <description>
              <short_desc> 
               A single click will be performed at coordinate 10,20 in the object.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. The item does not exist in the app map so will be 
               treated as literal text.  Note we allow semi-colon delimited coordinates 
               to support the case when commas are used as field delimiters and cannot be 
               used to delimit the X and Y coordinates.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, AnObject, CLICK, "Coords=10;20"</usage>
           <description>
              <short_desc> 
               A single click will be performed at coordinate 10,20 in the object.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. The item does not exist in the app map so will be 
               treated as literal text.  Note we allow semi-colon delimited coordinates 
               to support the case when commas are used as field delimiters and cannot be 
               used to delimit the X and Y coordinates.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, AnObject, CLICK, 10;20, False</usage>
           <description>
              <short_desc> 
               A single click will be performed at coordinate 10,20 in the object. <b>And the object
               will not be scrolled into view automatically before clicking.</b>
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. The item does not exist in the app map so will be 
               treated as literal text.  Note we allow semi-colon delimited coordinates 
               to support the case when commas are used as field delimiters and cannot be 
               used to delimit the X and Y coordinates.
              </detailed_desc>
              <note>
                <engines><engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20160422"/></engines>
                <value>Auto-scroll will be turned off.</value>
              </note>
           </description>
        </example>
     </examples></keyword>
     <keyword name="MOUSECLICK" 
           displayText="MouseClick" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                A single click on an object by mouse event. It uses low level mouse event to click on an object.
              </short_desc>
              <detailed_desc>
                <p>
                By default, mouse click on the center of the component.
                We can also mouse click on any part of an object, or any point relative to an object 
                based on a provided x,y coordinate or other component-specific parameters.  
                </p><p>
                The object to be mouse clicked is first given context and then a mouse click is 
                generated at the coordinates.  Thus, a subitem or object can be 
                referenced by name even though it is only recognized via coordinates.
                </p><p>
                The coordinate lookup is done with the component name of the record AND 
                Field #5 or by providing the literal text of the coordinates, where supported.</p>
                <p>
                Typical Data Table records:</p>
                <p>
                (1) t MainWindow MainWindow  MouseClick<br/>
                (2) t MainWindow MainWindow  MouseClick AnObject<br/>
                (3) t MainWindow FolderTree  MouseClick Node1<br/>
                (4) t MainWindow MainWindow  MouseClick "50,200"<br/>
                (5) t MainWindow MainWindow  MouseClick "Coords=50,200"</p>
                <p>
                #2 above will contain an AnObject="3,10" entry in the MainWindow section 
                of the Application Map to mouse click at x=3, y=10 in the MainWindow.
                </p><p>
                #3 above will contain a FolderTree entry in the MainWindow section with 
                normal recognition information for it.  FolderTree will also have it's
                own section in the Application Map in which there will be an entry like 
                Node1="15,30".  This will tell Robot to locate the FolderTree Generic 
                object and mouse click at the coordinates specified by the reference.
                </p><p>
                #4 and #5 above show using literal text instead of an App Map entry to specify 
                where to mouse click relative to the item.
                </p><p>
                Rational Robot no longer requires the AppMapSubKey be provided and will 
                attempt to use the string as literal text if no AppMapSubKey is found in 
                the current App Map.  Robot also no longer assumes the AppMapSubKey value 
                or the literal value is presenting coordinate information.  This allows 
                components that can accept parameters other than coordinates, like table 
                row/col values or ImageMap areas to be specified.
                </p><p>
                If the value is deduced to contain coordinates, but is not prefixed with 
                "Coords=" text, then Robot will add the prefix.  Otherwise, the text value 
                will remain unmodified.
                </p><p>
		This is the direction we expect all tools to follow going forward.
		</p><p>
		Engines should also attempt to support coordinates separated by alternate separators.  
		The most common separators that should be supported would be:
		<ul>
		<li>"," (comma) Example: "50,200"</li>
		<li>";" (semi-colon) Example: "50;200"</li>
		<li>" " (space) Example: "50 200"</li>
		</ul>	
		</p>	
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20030827" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="GENERIC" />
           </engine>         
       </engines>
       <parameters>
        <parameter name="APPMAPSUBKEY" displayText="AppMapSubkey" optional="YES">
           <description>
              <short_desc> 
                (Optional)Name of the AppMap subkey to lookup or the literal text to use for the click.
              </short_desc>
              <detailed_desc>
                Without this we should click on the center of the object.
                <p>Name of the AppMap subkey to lookup and use for the click.
                We expect the AppMap or literal text to contain the item in the format "x,y":</p>
                <pre>
                [FolderTree]
                Node1="33,120"      OR
                Node1="Coords=33,120"
                ...
                [AnHTMLImage]
                AMappdedRegion=Coords=10,10
                ANamedRegion=AreaName=TechSupport
                AnIndexedRegion=AreaIndex=2
                AnotherRegion=AreaID=Contact
                </pre><p>  
                The results from the lookup are appended to the "Coords=" string 
                used by the MouseClick command in Robot (only if necessary).  So any 
                valid content used with the MouseClick command can be part of 
                this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.
                </p><p>
                The Rational Robot implementation also supports using literal text in 
                this parameter instead of an AppMapSubKey.  If the value retrieved from 
                this field is NOT found to exist in the App Map as a Sub Key then it 
                will be used as literal text as if it HAD been retrieved from the App Map.
				</p><p>
				Engines should also attempt to support coordinates separated by alternate separators.  
				The most common separators that should be supported would be:
				<ul>
				<li>"," (comma) Example: "50,200"</li>
				<li>";" (semi-colon) Example: "50;200"</li>
				<li>" " (space) Example: "50 200"</li>
				</ul>
				</p>                
              </detailed_desc>
           </description>
        </parameter>
     </parameters><examples>
        <example>
           <usage>T, WINDOW, COMPONENT, MOUSECLICK</usage>
           <description>
              <short_desc> 
               A single mouse click on the center of the object.
              </short_desc>
              <detailed_desc> 
               A single click on the center of the object.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, WINDOW, MOUSECLICK, AnObject</usage>
           <description>
              <short_desc> 
               A single mouse click will be performed at a x,y coordinate indicated by the AnObject reference in
               the Application Map.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. A reference identified in the Application Map identifying coordinates
               on which to click
               This example shows AnObject which will be found in the Application Map as a referenced item
               in the WINDOW section.    
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, AnObject, MOUSECLICK, ASubObject</usage>
           <description>
              <short_desc> 
               A single mouse click will be performed at a x,y coordinate indicated by the ASubObject reference in
               the Application Map.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. A reference identified in the Application Map identifying coordinates
               on which to click
               This example shows AnObject as a viable object in the WINDOW but that it also has its own
               section in the Application Map which contains one or more named references like
               ASubObject which are used for test.   
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, AnObject, MOUSECLICK, 10;20</usage>
           <description>
              <short_desc> 
               A single mouse click will be performed at coordinate 10,20 in the object.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. The item does not exist in the app map so will be 
               treated as literal text.  Note we allow semi-colon delimited coordinates 
               to support the case when commas are used as field delimiters and cannot be 
               used to delimit the X and Y coordinates.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, AnObject, MOUSECLICK, "Coords=10;20"</usage>
           <description>
              <short_desc> 
               A single mouse click will be performed at coordinate 10,20 in the object.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. The item does not exist in the app map so will be 
               treated as literal text.  Note we allow semi-colon delimited coordinates 
               to support the case when commas are used as field delimiters and cannot be 
               used to delimit the X and Y coordinates.
              </detailed_desc>
           </description>
        </example>
     </examples></keyword>   
  <keyword name="MULTICLICK" 
           displayText="MultiClick" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                Multiple clicks on an object.
              </short_desc>
              <detailed_desc>
                <p>
                By default, clicks on the center of the component 3 times.<br/>
                Use the optional ClickCount parameter to specify the desired number of clicks.<br/>
                We can also click on any part of an object, or any point relative to an object 
                based on a provided x,y coordinate or other component-specific parameters.  
                </p><p>
                The object to be clicked is first given context and then the clicks are 
                generated at the coordinates.  Thus, a subitem or object can be 
                referenced by name even though it is only recognized via coordinates.
                </p><p>
                The optional coordinate lookup is done with the component name of the record AND 
                Field #5 or by providing the literal text of the coordinates, where supported.</p>
                <p>
                Typical Data Table records with relative references:</p>
                <p>
                (1) t MainWindow MainWindow  MultiClick <br/>
                (2) t MainWindow MainWindow  MultiClick AnObject<br/>
                (3) t MainWindow FolderTree  MultiClick Node1  "4"<br/>
                (4) t MainWindow MainWindow  MultiClick "50,200" "3"<br/>
                (5) t MainWindow MainWindow  MultiClick "Coords=50,200" "2"</p>
                <p>
                #1 above should click 3 times (default) at the center (default) of the MainWindow.
                </p><p>
                #2 above will contain an AnObject="3,10" entry in the MainWindow section 
                of the Application Map to click 3 times (default) at x=3, y=10 in the MainWindow.
                </p><p>
                #3 above will contain a FolderTree entry in the MainWindow section with 
                normal recognition information for it.  FolderTree will also have it's
                own section in the Application Map in which there will be an entry like 
                Node1="15,30".  This will tell the runtime to locate the FolderTree Generic 
                object and click 3 times (default) at the coordinates specified by the reference.
                </p><p>
                #4 and #5 above show using literal text instead of an App Map entry to specify 
                where to click relative to the item.  The item will be clicked 3 times and 2 times, 
                respectively
                </p><p>
		Note: the TID supports this command using 
		<a href="http://safsdev.sourceforge.net/sqabasic2000/SAFSImageBasedRecognition.htm" 
		target="imagebased" alt="SAFS Image-Based Recognition Doc">Image-Based Testing</a> 
		techniques and App Map entries as well as literal text coordinates.
		</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20100708" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="GENERIC" />
           </engine>
       </engines>

       <parameters>
        <parameter name="APPMAPSUBKEY" displayText="AppMapSubkey" optional="YES">
           <description>
              <short_desc> 
                (Optional)Name of the AppMap subkey to lookup or the literal text to use for the clicks.
              </short_desc>
              <detailed_desc>
                Without this we should click on the center of the object.
                <p>Name of the AppMap subkey to lookup and use for the click.
                We expect the AppMap or literal text to contain the item in the format "x,y":</p>
                <pre>
                [FolderTree]
                Node1="33,120"      OR
                Node1="Coords=33,120"
                ...
                [AnHTMLImage]
                AMappdedRegion=Coords=10,10
                ANamedRegion=AreaName=TechSupport
                AnIndexedRegion=AreaIndex=2
                AnotherRegion=AreaID=Contact
                </pre><p>  
                The results from the lookup are appended to the "Coords=" string 
                used by the Click command in Robot (only if necessary).  So any 
                valid content used with the Click command can be part of 
                this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.
                </p>
                <p><b>Important TID note.</b> The <a href="http://safsdev.sourceforge.net/sqabasic2000/SAFSImageBasedRecognition.htm" 
		target="imagebased" alt="SAFS Image-Based Recognition Doc">TID IBT implementation</a> supports using literal text in 
                this parameter instead of an AppMapSubKey.  If the value retrieved from 
                this field is NOT found to exist in the App Map as a Sub Key then it 
                will be used as literal text as if it HAD been retrieved from the App Map.
                </p><p>
                Any coordinates provided for TID IBT are considered relative to the top-left (0,0) of the 
                image or item found unless PointRelative and\or Hotspot information in the IBT recognition 
                string change this initial relative point to be somewhere else.
                </p>
              </detailed_desc>
           </description>
        </parameter>               
        <parameter name="CLICKCOUNT" displayText="ClickCount" optional="YES" default="3">
           <description>
              <short_desc>
                 Optional number of times (1 to N) to click the item.
              </short_desc>
              <detailed_desc>
                 Optional number of times (1 to N) to click the item.  The default if no value is provided is 3.  
              </detailed_desc>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WINDOW, COMPONENT, MULTICLICK</usage>
           <description>
              <short_desc> 
               Click 3 times (default) on the center of the object.
              </short_desc>
              <detailed_desc> 
               Click 3 times (default) on the center of the object.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, COMPONENT, MULTICLICK, "", "4"</usage>
           <description>
              <short_desc> 
               Click 4 times on the center of the object.
              </short_desc>
              <detailed_desc> 
               Click 4 times on the center of the object.  
               No AppMapSubKey or Literal Text is given to alter the relative coordinates for the click.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, WINDOW, MULTICLICK, AnObject</usage>
           <description>
              <short_desc> 
               Click 3 times (default) at relative x,y coordinates stored in "AnObject" in the App Map.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. An item in the App Map holding relative coordinates to click.<br/>
               This example shows "AnObject" which will be found in the App Map in the "WINDOW" section.    
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, COMPONENT, MULTICLICK, ASubObject</usage>
           <description>
              <short_desc> 
               Click 3 times (default) at relative x,y coordinates stored in "ASubObject" in the App Map.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. An item in the App Map holding relative coordinates to click.<br/>
               This example shows "ASubObject" which will be found in the App Map in the "COMPONENT" section.    
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, COMPONENT, MULTICLICK, 10;20</usage>
           <description>
              <short_desc> 
               Click 3 times (default) at coordinate 10,20 in the object.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. The item does not exist in the app map so will be 
               treated as literal text.  Note we allow semi-colon delimited coordinates 
               to support the case when commas are used as field delimiters and cannot be 
               used to delimit the X and Y coordinates.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, AnObject, MULTICLICK, "Coords=10;20", "4"</usage>
           <description>
              <short_desc> 
               4 clicks at coordinate 10,20 in the object.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. The item does not exist in the app map so will be 
               treated as literal text.  Note we allow semi-colon delimited coordinates 
               to support the case when commas are used as field delimiters and cannot be 
               used to delimit the X and Y coordinates.
              </detailed_desc>
           </description>
        </example>

     </examples></keyword>
     
  <keyword name="MULTICLICKSCREENIMAGE" 
           displayText="MultiClickScreenImage" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                Same as <a href="#detail_MultiClick" alt="Goto MultiClick">MULTICLICK</a>.
              </short_desc>
              <detailed_desc>
                The keyword is simply provided as a means to differentiate 
                Object-Based Testing from Image-Based Testing in your tests. 
                However, this differentiation is not required.
		<p>
		Note: the TID supports this command using 
		<a href="http://safsdev.sourceforge.net/sqabasic2000/SAFSImageBasedRecognition.htm" 
		target="imagebased" alt="SAFS Image-Based Recognition Doc">Image-Based Testing</a> 
		techniques and App Map entries as well as literal text coordinates.
		</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20100708" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="GENERIC" />
           </engine>
       </engines>

       <parameters>
        <parameter name="APPMAPSUBKEY" displayText="AppMapSubkey" optional="YES">
           <description>
              <short_desc> 
                (Optional)Name of the AppMap subkey to lookup or the literal text to use for the clicks.
              </short_desc>
              <detailed_desc>
                Same as <a href="#detail_MultiClick" alt="Goto MultiClick">MULTICLICK</a>.<br/>
                The keyword is simply provided as a means to differentiate 
                Object-Based Testing from Image-Based Testing in your tests. 
                However, this differentiation is not required.
		<p>
		Note: the TID supports this command using 
		<a href="http://safsdev.sourceforge.net/sqabasic2000/SAFSImageBasedRecognition.htm" 
		target="imagebased" alt="SAFS Image-Based Recognition Doc">Image-Based Testing</a> 
		techniques and App Map entries as well as literal text coordinates.
		</p>
              </detailed_desc>
           </description>
        </parameter>               
        <parameter name="CLICKCOUNT" displayText="ClickCount" optional="YES" default="3">
           <description>
              <short_desc>
                 Optional number of times (1 to N) to click the item.
              </short_desc>
              <detailed_desc>
                 Optional number of times (1 to N) to click the item.  The default if no value is provided is 3.  
              </detailed_desc>
           </description>
        </parameter>
     </parameters><examples>
        <example>
           <usage>T, WINDOW, COMPONENT, MULTICLICKSCREENIMAGE</usage>
           <description>
              <short_desc> 
               Click 3 times (default) on the center of the object.
              </short_desc>
              <detailed_desc> 
               Click 3 times (default) on the center of the object.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, COMPONENT, MULTICLICKSCREENIMAGE, "", "4"</usage>
           <description>
              <short_desc> 
               Click 4 times on the center of the object.
              </short_desc>
              <detailed_desc> 
               Click 4 times on the center of the object.  
               No AppMapSubKey or Literal Text is given to alter the relative coordinates for the click.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, WINDOW, MULTICLICKSCREENIMAGE, AnObject</usage>
           <description>
              <short_desc> 
               Click 3 times (default) at relative x,y coordinates stored in "AnObject" in the App Map.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. An item in the App Map holding relative coordinates to click.<br/>
               This example shows "AnObject" which will be found in the App Map in the "WINDOW" section.    
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, COMPONENT, MULTICLICKSCREENIMAGE, ASubObject</usage>
           <description>
              <short_desc> 
               Click 3 times (default) at relative x,y coordinates stored in "ASubObject" in the App Map.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. An item in the App Map holding relative coordinates to click.<br/>
               This example shows "ASubObject" which will be found in the App Map in the "COMPONENT" section.    
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, COMPONENT, MULTICLICKSCREENIMAGE, 10;20</usage>
           <description>
              <short_desc> 
               Click 3 times (default) at coordinate 10,20 in the object.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. The item does not exist in the app map so will be 
               treated as literal text.  Note we allow semi-colon delimited coordinates 
               to support the case when commas are used as field delimiters and cannot be 
               used to delimit the X and Y coordinates.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, AnObject, MULTICLICKSCREENIMAGE, "Coords=10;20", "4"</usage>
           <description>
              <short_desc> 
               4 clicks at coordinate 10,20 in the object.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. The item does not exist in the app map so will be 
               treated as literal text.  Note we allow semi-colon delimited coordinates 
               to support the case when commas are used as field delimiters and cannot be 
               used to delimit the X and Y coordinates.
              </detailed_desc>
           </description>
        </example>

     </examples></keyword>
     
  <keyword name="CLICKSCREENIMAGE" 
           displayText="ClickScreenImage" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                Same as Click.
              </short_desc>
              <detailed_desc>
                The keyword is simply provided as a means to differentiate 
                Object-Based Testing from Image-Based Testing in your tests. 
                However, this differentiation is not required.
		<p>
		Note: the TID supports this command using 
		<a href="http://safsdev.sourceforge.net/sqabasic2000/SAFSImageBasedRecognition.htm" 
		target="imagebased" alt="SAFS Image-Based Recognition Doc">Image-Based Testing</a> 
		techniques and App Map entries as well as literal text coordinates.
		</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20080918" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
       </engines>

       <parameters>
        <parameter name="APPMAPSUBKEY" displayText="AppMapSubKey" optional="YES">
           <description>
              <short_desc> 
                (Optional) AppMapSubKey type of use as documented in the CLICK command.
              </short_desc>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WINDOW, COMPONENT, ClickScreenImage</usage>
           <description>
              <short_desc> 
               A single click on the center of the item.
              </short_desc>
              <detailed_desc> 
               A single click on the center of the item.
               Refer to the CLICK command for details.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, COMPONENT, ClickScreenImage, AppMapLookup</usage>
           <description>
              <short_desc> 
               A single click on a point relative to the item.
              </short_desc>
              <detailed_desc> 
               A single click on a point relative to the item.  
               Refer to the CLICK command for details.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, COMPONENT, ClickScreenImage, "Coords=50;200"</usage>
           <description>
              <short_desc> 
               A single click on a point relative to the item.
              </short_desc>
              <detailed_desc> 
               A single click on a point relative to the item.  
               Refer to the CLICK command for details.
              </detailed_desc>
           </description>
        </example>
     </examples></keyword>

  <keyword name="CTRLCLICKSCREENIMAGE" 
           displayText="CtrlClickScreenImage" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                Same as CtrlClick.
              </short_desc>
              <detailed_desc>
                The keyword is simply provided as a means to differentiate 
                Object-Based Testing from Image-Based Testing in your tests. 
                However, this differentiation is not required.
		<p>
		Note: the TID supports this command using 
		<a href="http://safsdev.sourceforge.net/sqabasic2000/SAFSImageBasedRecognition.htm" 
		target="imagebased" alt="SAFS Image-Based Recognition Doc">Image-Based Testing</a> 
		techniques and App Map entries as well as literal text coordinates.
		</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20100708" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="GENERIC" />
           </engine>
       </engines>

       <parameters>
        <parameter name="APPMAPSUBKEY" displayText="AppMapSubKey" optional="YES">
           <description>
              <short_desc> 
                (Optional) AppMapSubKey type of use as documented in the CLICK command.
              </short_desc>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WINDOW, COMPONENT, CtrlClickScreenImage</usage>
           <description>
              <short_desc> 
               A single click on the center of the item.
              </short_desc>
              <detailed_desc> 
               A single click on the center of the item with CTRL key pressed.
               Refer to the CTRLCLICK command for details.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, COMPONENT, CtrlClickScreenImage, AppMapLookup</usage>
           <description>
              <short_desc> 
               A single click on a point relative to the item.
              </short_desc>
              <detailed_desc> 
               A single click on a point relative to the item with CTRL key pressed.  
               Refer to the CTRLCLICK command for details.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, COMPONENT, CtrlClickScreenImage, "Coords=50;200"</usage>
           <description>
              <short_desc> 
               A single click on a point relative to the item.
              </short_desc>
              <detailed_desc> 
               A single click on a point relative to the item with CTRL key pressed.  
               Refer to the CTRLCLICK command for details.
              </detailed_desc>
           </description>
        </example>
     </examples></keyword>

  <keyword name="CTRLRIGHTCLICKSCREENIMAGE" 
           displayText="CtrlRightClickScreenImage" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                Same as CtrlRightClick.
              </short_desc>
              <detailed_desc>
                The keyword is simply provided as a means to differentiate 
                Object-Based Testing from Image-Based Testing in your tests. 
                However, this differentiation is not required.
		<p>
		Note: the TID supports this command using 
		<a href="http://safsdev.sourceforge.net/sqabasic2000/SAFSImageBasedRecognition.htm" 
		target="imagebased" alt="SAFS Image-Based Recognition Doc">Image-Based Testing</a> 
		techniques and App Map entries as well as literal text coordinates.
		</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20100708" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="GENERIC" />
           </engine>
       </engines>

       <parameters>
        <parameter name="APPMAPSUBKEY" displayText="AppMapSubKey" optional="YES">
           <description>
              <short_desc> 
                (Optional) AppMapSubKey type of use as documented in the CLICK command.
              </short_desc>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WINDOW, COMPONENT, CtrlRightClickScreenImage</usage>
           <description>
              <short_desc> 
               A single right-click on the center of the item.
              </short_desc>
              <detailed_desc> 
               A single right-click on the center of the item with CTRL key pressed.
               Refer to the CtrlRightClick command for details.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, COMPONENT, CtrlRightClickScreenImage, AppMapLookup</usage>
           <description>
              <short_desc> 
               A single right-click on a point relative to the item.
              </short_desc>
              <detailed_desc> 
               A single right-click on a point relative to the item with CTRL key pressed.  
               Refer to the CtrlRightClick command for details.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, COMPONENT, CtrlRightClickScreenImage, "Coords=50;200"</usage>
           <description>
              <short_desc> 
               A single right-click on a point relative to the item.
              </short_desc>
              <detailed_desc> 
               A single right-click on a point relative to the item with CTRL key pressed.  
               Refer to the CtrlRightClick command for details.
              </detailed_desc>
           </description>
        </example>
     </examples></keyword>

  <keyword name="SHIFTCLICKSCREENIMAGE" 
           displayText="ShiftClickScreenImage" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                Same as ShiftClick.
              </short_desc>
              <detailed_desc>
                The keyword is simply provided as a means to differentiate 
                Object-Based Testing from Image-Based Testing in your tests. 
                However, this differentiation is not required.
		<p>
		Note: the TID supports this command using 
		<a href="http://safsdev.sourceforge.net/sqabasic2000/SAFSImageBasedRecognition.htm" 
		target="imagebased" alt="SAFS Image-Based Recognition Doc">Image-Based Testing</a> 
		techniques and App Map entries as well as literal text coordinates.
		</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20100708" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="GENERIC" />
           </engine>
       </engines>

       <parameters>
        <parameter name="APPMAPSUBKEY" displayText="AppMapSubKey" optional="YES">
           <description>
              <short_desc> 
                (Optional) AppMapSubKey type of use as documented in the CLICK command.
              </short_desc>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WINDOW, COMPONENT, ShiftClickScreenImage</usage>
           <description>
              <short_desc> 
               A single click on the center of the item.
              </short_desc>
              <detailed_desc> 
               A single click on the center of the item with SHIFT key pressed.
               Refer to the SHIFTCLICK command for details.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, COMPONENT, ShiftClickScreenImage, AppMapLookup</usage>
           <description>
              <short_desc> 
               A single click on a point relative to the item.
              </short_desc>
              <detailed_desc> 
               A single click on a point relative to the item with SHIFT key pressed.  
               Refer to the SHIFTCLICK command for details.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, COMPONENT, ShiftClickScreenImage, "Coords=50;200"</usage>
           <description>
              <short_desc> 
               A single click on a point relative to the item.
              </short_desc>
              <detailed_desc> 
               A single click on a point relative to the item with SHIFT key pressed.  
               Refer to the SHIFTCLICK command for details.
              </detailed_desc>
           </description>
        </example>
     </examples></keyword>

  <keyword name="CLICKSCREENLOCATION" 
           displayText="ClickScreenLocation" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                Click a specified screen location.
              </short_desc>
              <detailed_desc>
                Click a specified screen location.
                <p>We can click on any screen location based on stored x,y 
                coordinates or hardcoded literal values. The Window:Component fields 
                can be anything at all and will be ignored if they do not exist in the app map, 
                or if the retrieved app map data does not contain coordinate data. 
                Thus, an item or object can be referenced by name even though it is only 
                known via coordinates.
                </p><p>
                If the Window:Component AppMap lookup does NOT contain coordinate data and is ignored, then 
                the AppMapSubKey field is REQUIRED and is expected to contain a reference or literal 
                text containing absolute screen coordinates.
                </p><p>
                If the Window:Component AppMap lookup DOES contain coordinate data, this data is treated as 
                the absolute screen coordinates to be used.  The AppMapSubKey field becomes OPTIONAL and 
                coordinate data in the field is treated as a relative offset added to the absolute values 
                found for the Window:Component.
                </p><p>
                Any AppMapSubKey lookup is done with the Component name in the record AND 
                Field #5.</p>
                <p>
                Typical Data Table records:</p>
                <p>
                (1) t MainWindow Component ClickScreenLocation<br/>
                (2) t MainWindow MainWindow ClickScreenLocation AnObject<br/>
                (3) t MainWindow MainWindow ClickScreenLocation 50,80<br/>
                (4) t AnyWin AnyComp ClickScreenLocation Node1</p>
                <p>
                #1 above will contain a blank as it's 5th field. Because the AppMapSubKey 
                field is blank, the [MainWindow] section of the AppMap MUST have a Component item with valid 
                absolute screen coordinates for the click.</p>
                <p>
                #2 above will contain an AnObject="Coords=50,80" entry in the [MainWindow] section 
                of the AppMap. If there is a MainWindow component in the AppMap with valid screen coordinates 
                then the click will occur with a relative offset of 50,80 from those absolute screen 
                coordinates. Otherwise, the click will occur at absolute screen coordinates 50,80.</p>
                <p>
                #3 If there is a MainWindow component in the [MainWindow] section of the AppMap with valid screen 
                coordinates then the click will occur with a relative offset of 50,80 from those absolute 
                screen coordinates. Otherwise, the click will occur at absolute screen coordinates 50,80.</p>
                <p>
                #4 above will contain no valid AnyWin:AnyComp coordinate data and 
                those fields will be ignored.  However, Node1 MUST exist in the 
                Application Map [AnyComp] section to provide absolute screen coordinates for the click.</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20100324" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
       </engines>

       <parameters>
        <parameter name="APPMAPSUBKEY" displayText="AppMapSubkey" optional="YES">
           <description>
              <short_desc> 
                (Sometimes Optional)Name of the AppMap subkey to locate in the AppMap.
              </short_desc>
              <detailed_desc>
                Without this there MUST be absolute screen coordinates stored in the AppMap 
                for the Window:Component specified.
                <p>
                Name of the AppMap subkey to locate in the App Map.  
                We expect the AppMap to contain the coordinates in the following supported formats:
                </p><p><pre>
                [Component]
                Node1="33,120"        (comma-delimited)      OR
                Node1="33;120"        (semi-colon delimited) OR
                Node1="33 120"        (space-delimited)      OR
                Node1="Coords=33,120" (comma-delimited)      OR
                Node1="Coords=33;120" (semi-colon delimited) OR
                Node1="Coords=33 120" (space-delimited)
                </pre></p><p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
                <p>
                This field can instead contain the literal text of any absolute or relative coordinates 
                in the same formats as shown above. </p>
              </detailed_desc>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WINDOW, WINDOW, ClickScreenLocation</usage>
           <description>
              <short_desc> 
               Click at specified screen coordinates for WINDOW.
              </short_desc>
              <detailed_desc> 
               Click at screen coordinates specified for the Window item stored in the 
               [Window] section of the current AppMap.
              </detailed_desc>
           </description>
        </example>
        <example>
	   <usage>T, WINDOW, AnObject, ClickScreenLocation, "Coords=200,400"</usage>
	   <description>
	      <short_desc> 
	       Click at screen coordinates 200,400.
	      </short_desc>
	      <detailed_desc> 
	       Click at screen coordinates 200,400.  This assumes AnObject 
	       is NOT an item in the [Window] section of the current AppMap with valid coordinate data.
	      </detailed_desc>
	   </description>
        </example>
        <example>
           <usage>T, WINDOW, AnObject, ClickScreenLocation, ASubObject</usage>
           <description>
              <short_desc> 
               Click at screen coordinates stored in the ASubObject reference in the 
               [AnObject] section of the current AppMap.
              </short_desc>
              <detailed_desc> 
               ASubObject reference found in the AppMap [AnObject] section must contain the screen coordinates
               on which to click.
              </detailed_desc>
           </description>
        </example>
        <example>
	   <usage>T, WINDOW, AnObject, ClickScreenLocation</usage>
	   <description>
	      <short_desc> 
	       Click on the Window:AnObject screen coordinates.
	      </short_desc>
	      <detailed_desc> 
	       Because no AppMapSubKey is provided the AnObject item MUST exist in the [WINDOW] section 
	       of the current AppMap and it MUST contain valid screen coordinate data.
	      </detailed_desc>
	   </description>
        </example>
     </examples></keyword>     


  <keyword name="CLICKSCREENPOINT" 
           displayText="ClickScreenPoint" 
           deprecated="YES" 
           deprecatedFor="GenericObject ClickScreenLocation" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                (Deprecated) Click a specified screen location.
              </short_desc>
              <detailed_desc>
                (Deprecated) Click a specified screen location. See <a href="#detail_ClickScreenLocation">ClickScreenLocation</a> 
                for the preferred method to click on screen coordinates.
                <p>
                We can click on any screen location based on literal text x,y 
                coordinates retrieved from Field #5.  Window and Component names and App Map entries are 
                completely ignored.  So the user can put anything in those fields that might help test readability.  
                </p><p>
                It is not recommended to hardcode screen coordinates in the test table in this way.
                </p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20100324" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
       </engines>

       <parameters>
        <parameter name="COORDS" displayText="Coords" optional="NO">
           <description>
              <short_desc> 
                The hardcoded X,Y screen coordinates--or the result of an expression--that provides the 
                absolute screen coordinates to click.
              </short_desc>
              <detailed_desc>
                The coordinates must be in the following supported formats:
                <p><pre>
                "33,120"        (comma-delimited)      OR
                "33;120"        (semi-colon delimited) OR
                "33 120"        (space-delimited)
                </pre></p><p>
		Note the "Coords=" prefix is NOT supported for this deprecated command.
		</p>
              </detailed_desc>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, BogusWin, BogusComp, ClickScreenPoint, 33;120</usage>
           <description>
              <short_desc> 
               Click at screen coordinates 33,120.
              </short_desc>
              <detailed_desc> 
               Click at screen coordinates 33,120
              </detailed_desc>
           </description>
        </example>
     </examples></keyword>     


  <keyword name="DOUBLECLICK" 
           displayText="DoubleClick" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                A double click on an object.
              </short_desc>
              <detailed_desc> 
                By default we should click the center of the object.
                <p>We can also double click on any part of an object based on a stored 
                x,y coordinate.  The object containing the coordinate is first given 
                context and then a double click is generated at the coordinate.  Thus, 
                an item or object can be referenced by name even though it is only 
                recognized via coordinates.</p>
                <p>
                The coordinate lookup is done with the component name of the record AND 
                Field #5.</p>
                <p>
                Typical Data Table records:</p>
                <p>
                (1) t MainWindow MainWindow DoubleClick<br/>
                (2) t MainWindow MainWindow DoubleClick AnObject<br/>
                (3) t MainWindow FolderTree DoubleClick Node1</p>
                <p>
                #2 above will contain an AnObject="3,10" entry in the MainWindow section 
                of the Application Map to double click at x=3, y=10 in the MainWindow. <b>For SE+</b>, the coordinate 
                can be percentage format, like "20%,30%". This percentage format indicates 
                the point (20% width of component, 30% height of component) relative to the object.</p>
                <p>
                #3 above will contain a FolderTree entry in the MainWindow section with 
                normal recognition information for it .  FolderTree will also have it's
                own section in the Application Map in which there will be an entry like 
                Node1="15,30".  This will tell Robot to locate the FolderTree 
                object and double click at the coordinates specified by the reference.
  		        </p><p>
		        Engines should also attempt to support coordinates separated by alternate separators.  
		        The most common separators that should be supported would be:
		        <ul>
				<li>"," (comma) Example: "50,200"</li>
				<li>";" (semi-colon) Example: "50;200"</li>
				<li>" " (space) Example: "50 200"</li>
		        </ul>
		        </p><p>
		        Note: the TID supports this command using 
		        <a href="http://safsdev.sourceforge.net/sqabasic2000/SAFSImageBasedRecognition.htm" 
		        target="imagebased" alt="SAFS Image-Based Recognition Doc">Image-Based Testing</a> 
		        techniques and App Map entries as well as literal text coordinates.
		        </p>
		        <p>For IOS: Any optional coordinates MUST be specified as an integer number between 
		        0-100.  0 represents the extreme left (or top), while 100 represents the extreme 
		        right (or bottom). IOS does not use absolute coordinates, but relative coordinates 
		        representing a percentage of the element width or height.
		        </p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" >
	       <libraryInfo name="GenericObjectFunctions" 
                            doc="GenericObjectFunctions.htm" 
                            sourcecode="GenericObjectFunctions.sbl" 
                            class="GENERIC" />
           </engine>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20051017" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="GENERIC" />
           </engine>
           <engine vendor="Apple" tool="IOS" name="Apple XCode Instruments" since="20111011" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/ios/CFComponent.html" 
                            sourcecode="org.safs.ios.CFComponent.java" 
                            class="GENERIC" />
           </engine>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20080918" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
           <engine name="Test Complete" 
				   since="20110415" 
				   tool="TestComplete" 
				   vendor="Automated QA">
			   <libraryInfo class="GENERIC" 
					name="GenericObjectFunctions" 
					sourcecode="GenericObjectFunctions.SVB">
			   </libraryInfo>
           </engine>
           <engine name="WinRunner" 
			       since="20020821" 
			       tool="WinRunner" 
			       vendor="Mercury Interactive">
		       <libraryInfo class="GENERIC" 
					name="GenericObjectFunctions" 
					sourcecode="GenericObjectFunctions">
		       </libraryInfo>
           </engine>
           <engine vendor="Abbot" tool="Abbot" name="Abbot" since="20050923" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/abbot/CFComponent.html" 
                            sourcecode="org.safs.abbot.CFComponent.java" 
                            class="GENERIC" />
           </engine>
	   	   <engine vendor="OpenQA" tool="Selenium" name="Selenium" since="20070130" >
	    	<libraryInfo name="CFComponent" 
			doc="org/safs/selenium/CFComponent.html" 
			sourcecode="org.safs.selenium.CFComponent.java" 
			class="CFComponent" />
           </engine>
           <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140305" >
	           <libraryInfo name="CFComponent" 
                            doc="org/safs/selenium/webdriver/CFComponent.html" 
                            sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
                            class="CFComponent"/>
           </engine>
           <engine vendor="AUTOIT Team" tool="Autoit" name="Autoit" since="20161014" >
                <libraryInfo name="AutoItComponent" 
                         doc="org/safs/tools/engines/AutoItComponent.html" 
                         sourcecode="org.safs.tools.engines.AutoItComponent.java" 
                         class="CFComponent" />
           </engine>
       </engines>

       <parameters>
        <parameter name="APPMAPSUBKEY" displayText="AppMapSubkey" optional="YES">
           <description>
              <short_desc> 
                (Optional) Name of the AppMap subkey to lookup or the literal text to use for the double click.
              </short_desc>
              <detailed_desc>
                Without this we should click the center of the object.
                <p>Name of the AppMap subkey to lookup and use for the double click.
                We expect the AppMap or literal text to contain the item in the format "x,y":</p>
                <p><pre>
                [FolderTree]
                Node1="33,120"      OR
                Node1="Coords=33,120"
                </pre></p>
                <p>
                The results from the lookup are appended to the "Coords=" string 
                used by the GenericObject DBLClick command in Robot (if necessary).  
                So any valid content used with the DBLClick command can be 
                part of this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
                <p><b>Important Abbot note.</b> Presently, there is no support for AppMapSubkey
                specification (5th field).
				</p><p>
				Engines should also attempt to support coordinates separated by alternate separators.  
				The most common separators that should be supported would be:
				<ul>
				<li>"," (comma) Example: "50,200"</li>
				<li>";" (semi-colon) Example: "50;200"</li>
				<li>" " (space) Example: "50 200"</li>
				</ul>
				</p>
                <p><b>Important TID note.</b> The <a href="http://safsdev.sourceforge.net/sqabasic2000/SAFSImageBasedRecognition.htm" 
		target="imagebased" alt="SAFS Image-Based Recognition Doc">TID IBT implementation</a> supports using literal text in 
                this parameter instead of an AppMapSubKey.  If the value retrieved from 
                this field is NOT found to exist in the App Map as a Sub Key then it 
                will be used as literal text as if it HAD been retrieved from the App Map.
                </p><p>
                Any coordinates provided for TID IBT are considered relative to the top-left (0,0) of the 
                image or item found unless PointRelative and\or Hotspot information in the IBT recognition 
                string change this initial relative point to be somewhere else.
                </p>
		        <p>For IOS: Any optional coordinates MUST be specified as an integer number between 
		        0-100.  0 represents the extreme left (or top), while 100 represents the extreme 
		        right (or bottom). IOS does not use absolute coordinates, but relative coordinates 
		        representing a percentage of the element width or height.
		        </p>
              </detailed_desc>
           </description>
        </parameter>
        <parameter name="AUTOSCROLL" displayText="AutoScroll" optional="YES">
           <description>
              <short_desc> 
                (Optional) True|False. If the component will be scrolled into view automatically before clicking. The default value is true.
              </short_desc>
              <detailed_desc>
                If the component is out of view, the click action will not succeed. Normally we will scroll the component into view,
                and then perform the click action. But sometimes, the component is partially shown and click could work and user does not
                want the component shift, then we could turn off the auto-scroll ability by setting this parameter to false.<br/>
                If this auto-scroll is turned off, user needs to make sure that component is shown by himself.
              </detailed_desc>
              <note>
                <engines><engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20160422"/></engines>
                <value>For now, this optional parameter is only supported in Selenium2.0 Engine. </value>
              </note>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WINDOW, COMPONENT, DOUBLECLICK</usage>
           <description>
              <short_desc> 
               A double click should be performed on the center of the object.
              </short_desc>
              <detailed_desc> 
               A double click should be performed on the center of the object.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, COMPONENT, DOUBLECLICK, , False</usage>
           <description>
              <short_desc> 
               A double click should be performed on the center of the object. <b>And the object
               will not be scrolled into view automatically before clicking.</b>
              </short_desc>
              <note>
                <engines><engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20160422"/></engines>
                <value>Auto-scroll will be turned off.</value>
              </note>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, WINDOW, DOUBLECLICK, AnObject</usage>
           <description>
              <short_desc> 
               A double click will be performed at a x,y coordinate indicated by the AnObject reference in
               the Application Map.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. A reference identified in the Application Map identifying coordinates
               on which to double-click
               This example shows AnObject which will be found in the Application Map as a referenced item
               in the WINDOW section.    
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, AnObject, DOUBLECLICK, ASubObject</usage>
           <description>
              <short_desc> 
               A double click will be performed at a x,y coordinate indicated by the ASubObject reference in
               the Application Map.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. A reference identified in the Application Map identifying coordinates
               on which to double-click
               This example shows AnObject as a viable object in the WINDOW but that it also has its own
               section in the Application Map which contains one or more named references like
               ASubObject which are used for test.   
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, AnObject, DOUBLECLICK, "Coords=10;20"</usage>
           <description>
              <short_desc> 
               A double click will be performed at coordinate 10,20 in the object.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. The item does not exist in the app map so will be 
               treated as literal text.  Note we allow semi-colon delimited coordinates 
               to support the case when commas are used as field delimiters and cannot be 
               used to delimit the X and Y coordinates.
              </detailed_desc>
           </description>
        </example>

     </examples></keyword>
     
  <keyword name="DOUBLECLICKSCREENIMAGE" 
           displayText="DoubleClickScreenImage" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                Same as DoubleClick.
              </short_desc>
              <detailed_desc>
                The keyword is simply provided as a means to differentiate 
                Object-Based Testing from Image-Based Testing in your tests. 
                However, this differentiation is not required.
		<p>
		Note: the TID supports this command using 
		<a href="http://safsdev.sourceforge.net/sqabasic2000/SAFSImageBasedRecognition.htm" 
		target="imagebased" alt="SAFS Image-Based Recognition Doc">Image-Based Testing</a> 
		techniques and App Map entries as well as literal text coordinates.
		</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20080918" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
       </engines>

       <parameters>
        <parameter name="APPMAPSUBKEY" displayText="AppMapSubKey" optional="YES">
           <description>
              <short_desc> 
                (Optional) AppMapSubKey as documented in the CLICK command.
              </short_desc>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WINDOW, COMPONENT, DoubleClickScreenImage</usage>
           <description>
              <short_desc> 
               A double-click on the point as documented in the CLICK command.
              </short_desc>
              <detailed_desc> 
               A double-click on the point as documented in the CLICK command.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, COMPONENT, DoubleClickScreenImage, AppMapItem</usage>
           <description>
              <short_desc> 
               A double-click on the point as documented in the CLICK command.
              </short_desc>
              <detailed_desc> 
               A double-click on the point as documented in the CLICK command.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, COMPONENT, DoubleClickScreenImage, "50;100"</usage>
           <description>
              <short_desc> 
               A double-click on the point as documented in the CLICK command.
              </short_desc>
              <detailed_desc> 
               A double-click on the point as documented in the CLICK command.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, COMPONENT, DoubleClickScreenImage, "Coords=50;100"</usage>
           <description>
              <short_desc> 
               A double-click on the point as documented in the CLICK command.
              </short_desc>
              <detailed_desc> 
               A double-click on the point as documented in the CLICK command.
              </detailed_desc>
           </description>
        </example>
     </examples></keyword>

  <keyword name="DOUBLECLICKSCREENLOCATION" 
           displayText="DoubleClickScreenLocation" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                DoubleClick a specified screen location.
              </short_desc>
              <detailed_desc>
                DoubleClick a specified screen location.
                <p>We can click on any screen location based on stored x,y 
                coordinates or hardcoded literal values. The Window:Component fields 
                can be anything at all and will be ignored if they do not exist in the app map, 
                or if the retrieved app map data does not contain coordinate data. 
                Thus, an item or object can be referenced by name even though it is only 
                known via coordinates.
                </p><p>
                If the Window:Component AppMap lookup does NOT contain coordinate data and is ignored, then 
                the AppMapSubKey field is REQUIRED and is expected to contain a reference or literal 
                text containing absolute screen coordinates.
                </p><p>
                If the Window:Component AppMap lookup DOES contain coordinate data, this data is treated as 
                the absolute screen coordinates to be used.  The AppMapSubKey field becomes OPTIONAL and 
                coordinate data in the field is treated as a relative offset added to the absolute values 
                found for the Window:Component.
                </p><p>
                Any AppMapSubKey lookup is done with the Component name in the record AND 
                Field #5.</p>
                <p>
                Typical Data Table records:</p>
                <p>
                (1) t MainWindow Component DoubleClickScreenLocation<br/>
                (2) t MainWindow MainWindow DoubleClickScreenLocation AnObject<br/>
                (3) t MainWindow MainWindow DoubleClickScreenLocation 50,80<br/>
                (4) t AnyWin AnyComp DoubleClickScreenLocation Node1</p>
                <p>
                #1 above will contain a blank as it's 5th field. Because the AppMapSubKey 
                field is blank, the [MainWindow] section of the AppMap MUST have a Component item with valid 
                absolute screen coordinates for the click.</p>
                <p>
                #2 above will contain an AnObject="Coords=50,80" entry in the [MainWindow] section 
                of the AppMap. If there is a MainWindow component in the AppMap with valid screen coordinates 
                then the click will occur with a relative offset of 50,80 from those absolute screen 
                coordinates. Otherwise, the click will occur at absolute screen coordinates 50,80.</p>
                <p>
                #3 If there is a MainWindow component in the [MainWindow] section of the AppMap with valid screen 
                coordinates then the click will occur with a relative offset of 50,80 from those absolute 
                screen coordinates. Otherwise, the click will occur at absolute screen coordinates 50,80.</p>
                <p>
                #4 above will contain no valid AnyWin:AnyComp coordinate data and 
                those fields will be ignored.  However, Node1 MUST exist in the 
                Application Map [AnyComp] section to provide absolute screen coordinates for the click.</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20100324" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
       </engines>

       <parameters>
        <parameter name="APPMAPSUBKEY" displayText="AppMapSubkey" optional="YES">
           <description>
              <short_desc> 
                (Sometimes Optional)Name of the AppMap subkey to locate in the AppMap.
              </short_desc>
              <detailed_desc>
                Without this there MUST be absolute screen coordinates stored in the AppMap 
                for the Window:Component specified.
                <p>
                Name of the AppMap subkey to locate in the App Map.  
                We expect the AppMap to contain the coordinates in the following supported formats:
                </p><p><pre>
                [Component]
                Node1="33,120"        (comma-delimited)      OR
                Node1="33;120"        (semi-colon delimited) OR
                Node1="33 120"        (space-delimited)      OR
                Node1="Coords=33,120" (comma-delimited)      OR
                Node1="Coords=33;120" (semi-colon delimited) OR
                Node1="Coords=33 120" (space-delimited)
                </pre></p><p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
                <p>
                This field can instead contain the literal text of any absolute or relative coordinates 
                in the same formats as shown above. </p>
              </detailed_desc>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WINDOW, WINDOW, DoubleClickScreenLocation</usage>
           <description>
              <short_desc> 
               DoubleClick at specified screen coordinates for WINDOW.
              </short_desc>
              <detailed_desc> 
               DoubleClick at screen coordinates specified for the Window item stored in the 
               [Window] section of the current AppMap.
              </detailed_desc>
           </description>
        </example>
        <example>
	   <usage>T, WINDOW, AnObject, DoubleClickScreenLocation, "Coords=200,400"</usage>
	   <description>
	      <short_desc> 
	       DoubleClick at screen coordinates 200,400.
	      </short_desc>
	      <detailed_desc> 
	       DoubleClick at screen coordinates 200,400.  This assumes AnObject 
	       is NOT an item in the [Window] section of the current AppMap with valid coordinate data.
	      </detailed_desc>
	   </description>
        </example>
        <example>
           <usage>T, WINDOW, AnObject, DoubleClickScreenLocation, ASubObject</usage>
           <description>
              <short_desc> 
               DoubleClick at screen coordinates stored in the ASubObject reference in the 
               [AnObject] section of the current AppMap.
              </short_desc>
              <detailed_desc> 
               ASubObject reference found in the AppMap [AnObject] section must contain the screen coordinates
               on which to click.
              </detailed_desc>
           </description>
        </example>
        <example>
	   <usage>T, WINDOW, AnObject, DoubleClickScreenLocation</usage>
	   <description>
	      <short_desc> 
	       DoubleClick on the Window:AnObject screen coordinates.
	      </short_desc>
	      <detailed_desc> 
	       Because no AppMapSubKey is provided the AnObject item MUST exist in the [WINDOW] section 
	       of the current AppMap and it MUST contain valid screen coordinate data.
	      </detailed_desc>
	   </description>
        </example>
     </examples></keyword>     

  <keyword name="DOUBLECLICKSCREENPOINT" 
           displayText="DoubleClickScreenPoint" 
           deprecated="YES" 
           deprecatedFor="GenericObject DoubleClickScreenLocation" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                (Deprecated) DoubleClick a specified screen location.
              </short_desc>
              <detailed_desc>
                (Deprecated) DoubleClick a specified screen location. See <a href="#detail_DoubleClickScreenLocation">DoubleClickScreenLocation</a> 
                for the preferred method to click on screen coordinates.
                <p>
                We can click on any screen location based on literal text x,y 
                coordinates retrieved from Field #5.  Window and Component names and App Map entries are 
                completely ignored.  So the user can put anything in those fields that might help test readability.  
                </p><p>
                It is not recommended to hardcode screen coordinates in the test table in this way.
                </p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20100324" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
       </engines>

       <parameters>
        <parameter name="COORDS" displayText="Coords" optional="NO">
           <description>
              <short_desc> 
                The hardcoded X,Y screen coordinates--or the result of an expression--that provides the 
                absolute screen coordinates to click.
              </short_desc>
              <detailed_desc>
                The coordinates must be in the following supported formats:
                <p><pre>
                "33,120"        (comma-delimited)      OR
                "33;120"        (semi-colon delimited) OR
                "33 120"        (space-delimited)
                </pre></p><p>
		Note the "Coords=" prefix is NOT supported for this deprecated command.
		</p>
              </detailed_desc>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, BogusWin, BogusComp, DoubleClickScreenPoint, 33;120</usage>
           <description>
              <short_desc> 
               DoubleClick at screen coordinates 33,120.
              </short_desc>
              <detailed_desc> 
               DoubleClick at screen coordinates 33,120
              </detailed_desc>
           </description>
        </example>
     </examples></keyword>     


  <keyword name="RIGHTCLICK" 
           displayText="RightClick" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                A right click on an object.
              </short_desc>
              <detailed_desc> 
                By default we should click on the center of the object.
                <p>We can also right click on any part of an object based on a stored x,y 
                coordinate.  The object containing the coordinate is first given 
                context and then a right click is generated at the coordinate.  Thus, an item 
                or object can be referenced by name even though it is only recognized
                via coordinates.</p>
                <p>
                The coordinate lookup is done with the component name of the record AND 
                Field #5.</p>
                <p>
                Typical Data Table records:</p>
                <p> 
                (1) t MainWindow MainWindow RightClick <br/>
                (2) t MainWindow MainWindow RightClick AnObject<br/>
                (3) t MainWindow  ToolItem  RightClick PrintTool</p>
                <p>
                #2 above will contain an AnObject="3,10" entry in the MainWindow section 
                of the Application Map to right click at x=3, y=10 in the MainWindow. <b>For SE+</b>, the 
                coordinate can be percentage format, like "20%,30%". This percentage format indicates 
                the point (20% width of component, 30% height of component) relative to the object.</p>
                <p>
                #3 above will contain a ToolItem entry in the MainWindow section with 
                normal recognition information for it .  ToolItem will also have it's
                own section in the Application Map in which there will be an entry like 
                PrintTool="15,30".  This will tell Robot to locate the PrintTool Window 
                object and right click at the coordinates specified by the reference.
		</p><p>
		Engines should also attempt to support coordinates separated by alternate separators.  
		The most common separators that should be supported would be:
		<ul>
				<li>"," (comma) Example: "50,200"</li>
				<li>";" (semi-colon) Example: "50;200"</li>
				<li>" " (space) Example: "50 200"</li>
		</ul>
		</p><p>
		Note: the TID supports this command using 
		<a href="http://safsdev.sourceforge.net/sqabasic2000/SAFSImageBasedRecognition.htm" 
		target="imagebased" alt="SAFS Image-Based Recognition Doc">Image-Based Testing</a> 
		techniques and App Map entries as well as literal text coordinates.
		</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" >
	       <libraryInfo name="GenericObjectFunctions" 
                            doc="GenericObjectFunctions.htm" 
                            sourcecode="GenericObjectFunctions.sbl" 
                            class="GENERIC" />
           </engine>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20030827" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="GENERIC" />
           </engine>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20080918" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
           <engine name="Test Complete" 
				   since="20110415" 
				   tool="TestComplete" 
				   vendor="Automated QA">
			   <libraryInfo class="GENERIC" 
					name="GenericObjectFunctions" 
					sourcecode="GenericObjectFunctions.SVB">
			   </libraryInfo>
           </engine>
           <engine name="WinRunner" 
			       since="20020821" 
			       tool="WinRunner" 
			       vendor="Mercury Interactive">
		       <libraryInfo class="GENERIC" 
					name="GenericObjectFunctions" 
					sourcecode="GenericObjectFunctions">
		       </libraryInfo>
           </engine>
           <engine vendor="Abbot" tool="Abbot" name="Abbot" since="20050923" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/abbot/CFComponent.html" 
                            sourcecode="org.safs.abbot.CFComponent.java" 
                            class="GENERIC" />
           </engine>
           <engine vendor="OpenQA" tool="Selenium" name="Selenium" since="20110704" >
	    	<libraryInfo name="CFComponent" 
			             doc="org/safs/selenium/CFComponent.html" 
			             sourcecode="org.safs.selenium.CFComponent.java" 
			             class="GENERIC" />
           </engine>
           <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140305" >
	           <libraryInfo name="CFComponent" 
                            doc="org/safs/selenium/webdriver/CFComponent.html" 
                            sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
                            class="CFComponent"/>
           </engine>
           <engine vendor="AUTOIT Team" tool="Autoit" name="Autoit" since="20161014" >
                <libraryInfo name="AutoItComponent" 
                         doc="org/safs/tools/engines/AutoItComponent.html" 
                         sourcecode="org.safs.tools.engines.AutoItComponent.java" 
                         class="CFComponent" />
           </engine>
       </engines>

       <parameters>
        <parameter name="APPMAPSUBKEY" displayText="AppMapSubkey" optional="YES">
           <description>
              <short_desc> 
                (Optional) Name of the AppMap subkey to lookup or the literal text to use for the right click.
              </short_desc>
              <detailed_desc>
                Without this we should click on the center of the object.
                <p>Name of the AppMap subkey to lookup and use for the right click.
                We expect the AppMap or literal text to contain the item in the format "x,y":</p>
                <p><pre>
                [ToolItem]
                PrintTool="33,120"      OR
                PrintTool="Coords=33,120"
                </pre></p>
                <p>
                The results from the lookup are appended to the "Coords=" string 
                used by the GenericObject Right_Click command in Robot (if necessary).  
                So any valid content used with the Right_Click command can be 
                part of this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.
				</p><p>
				Engines should also attempt to support coordinates separated by alternate separators.  
				The most common separators that should be supported would be:
				<ul>
				<li>"," (comma) Example: "50,200"</li>
				<li>";" (semi-colon) Example: "50;200"</li>
				<li>" " (space) Example: "50 200"</li>
				</ul>				
                </p><p><b>Important TID note.</b> The <a href="http://safsdev.sourceforge.net/sqabasic2000/SAFSImageBasedRecognition.htm" 
		target="imagebased" alt="SAFS Image-Based Recognition Doc">TID IBT implementation</a> supports using literal text in 
                this parameter instead of an AppMapSubKey.  If the value retrieved from 
                this field is NOT found to exist in the App Map as a Sub Key then it 
                will be used as literal text as if it HAD been retrieved from the App Map.
                </p><p>
                Any coordinates provided for TID IBT are considered relative to the top-left (0,0) of the 
                image or item found unless PointRelative and\or Hotspot information in the IBT recognition 
                string change this initial relative point to be somewhere else.
                </p>
                <p><b>Important Abbot note.</b> Presently, there is no support for AppMapSubkey
                specification (5th field).
                </p>
              </detailed_desc>
           </description>
        </parameter>
        <parameter name="AUTOSCROLL" displayText="AutoScroll" optional="YES">
           <description>
              <short_desc> 
                (Optional) True|False. If the component will be scrolled into view automatically before clicking. The default value is true.
              </short_desc>
              <detailed_desc>
                If the component is out of view, the click action will not succeed. Normally we will scroll the component into view,
                and then perform the click action. But sometimes, the component is partially shown and click could work and user does not
                want the component shift, then we could turn off the auto-scroll ability by setting this parameter to false.<br/>
                If this auto-scroll is turned off, user needs to make sure that component is shown by himself.
              </detailed_desc>
              <note>
                <engines><engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20160422"/></engines>
                <value>For now, this optional parameter is only supported in Selenium2.0 Engine. </value>
              </note>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WINDOW, WINDOW, RIGHTCLICK</usage>
           <description>
              <short_desc> 
               A right click will be performed on the center of the object.
              </short_desc>
              <detailed_desc> 
               A right click will be performed on the center of the object.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, WINDOW, RIGHTCLICK, , False</usage>
           <description>
              <short_desc> 
               A right click will be performed on the center of the object. <b>And the object
               will not be scrolled into view automatically before clicking.</b>
              </short_desc>
              <note>
                <engines><engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20160422"/></engines>
                <value>Auto-scroll will be turned off.</value>
              </note>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, WINDOW, RIGHTCLICK, AnObject</usage>
           <description>
              <short_desc> 
               A right click will be performed at a x,y coordinate indicated by the AnObject reference in
               the Application Map.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. A reference identified in the Application Map identifying coordinates
               on which to right-click
               This example shows AnObject which will be found in the Application Map as a referenced item
               in the WINDOW section.    
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, AnObject, RIGHTCLICK, ASubObject</usage>
           <description>
              <short_desc> 
               A right click will be performed at a x,y coordinate indicated by the ASubObject reference in
               the Application Map.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. A reference identified in the Application Map identifying coordinates
               on which to right-click
               This example shows AnObject as a viable object in the WINDOW but that it also has its own
               section in the Application Map which contains one or more named references like
               ASubObject which are used for test.   
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, AnObject, RIGHTCLICK, "Coords=10;20"</usage>
           <description>
              <short_desc> 
               A single right click will be performed at coordinate 10,20 in the object.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. The item does not exist in the app map so will be 
               treated as literal text.  Note we allow semi-colon delimited coordinates 
               to support the case when commas are used as field delimiters and cannot be 
               used to delimit the X and Y coordinates.
              </detailed_desc>
           </description>
        </example>

     </examples></keyword>
     
  <keyword name="RIGHTCLICKSCREENIMAGE" 
           displayText="RightClickScreenImage" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                Same as RightClick.
              </short_desc>
              <detailed_desc>
                The keyword is simply provided as a means to differentiate 
                Object-Based Testing from Image-Based Testing in your tests. 
                However, this differentiation is not required.
		<p>
		Note: the TID supports this command using 
		<a href="http://safsdev.sourceforge.net/sqabasic2000/SAFSImageBasedRecognition.htm" 
		target="imagebased" alt="SAFS Image-Based Recognition Doc">Image-Based Testing</a> 
		techniques and App Map entries as well as literal text coordinates.
		</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20080918" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
       </engines>

       <parameters>
        <parameter name="APPMAPSUBKEY" displayText="AppMapSubKey" optional="YES">
           <description>
              <short_desc> 
                (Optional) AppMapSubKey or literal text as documented in the CLICK command.
              </short_desc>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WINDOW, COMPONENT, RightClickScreenImage</usage>
           <description>
              <short_desc> 
               A right-click as generically documented for the CLICK command.
              </short_desc>
              <detailed_desc> 
               A right-click as generically documented for the CLICK command.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, AnObject, RightClickScreenImage, "Coords=10;20"</usage>
           <description>
              <short_desc> 
               A right click as generically documented for the CLICK command.
              </short_desc>
           </description>
        </example>
     </examples></keyword>

  <keyword name="RIGHTCLICKSCREENLOCATION" 
           displayText="RightClickScreenLocation" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                RightClick a specified screen location.
              </short_desc>
              <detailed_desc>
                RightClick a specified screen location.
                <p>We can click on any screen location based on stored x,y 
                coordinates or hardcoded literal values. The Window:Component fields 
                can be anything at all and will be ignored if they do not exist in the app map, 
                or if the retrieved app map data does not contain coordinate data. 
                Thus, an item or object can be referenced by name even though it is only 
                known via coordinates.
                </p><p>
                If the Window:Component AppMap lookup does NOT contain coordinate data and is ignored, then 
                the AppMapSubKey field is REQUIRED and is expected to contain a reference or literal 
                text containing absolute screen coordinates.
                </p><p>
                If the Window:Component AppMap lookup DOES contain coordinate data, this data is treated as 
                the absolute screen coordinates to be used.  The AppMapSubKey field becomes OPTIONAL and 
                coordinate data in the field is treated as a relative offset added to the absolute values 
                found for the Window:Component.
                </p><p>
                Any AppMapSubKey lookup is done with the Component name in the record AND 
                Field #5.</p>
                <p>
                Typical Data Table records:</p>
                <p>
                (1) t MainWindow Component RightClickScreenLocation<br/>
                (2) t MainWindow MainWindow RightClickScreenLocation AnObject<br/>
                (3) t MainWindow MainWindow RightClickScreenLocation 50,80<br/>
                (4) t AnyWin AnyComp RightClickScreenLocation Node1</p>
                <p>
                #1 above will contain a blank as it's 5th field. Because the AppMapSubKey 
                field is blank, the [MainWindow] section of the AppMap MUST have a Component item with valid 
                absolute screen coordinates for the click.</p>
                <p>
                #2 above will contain an AnObject="Coords=50,80" entry in the [MainWindow] section 
                of the AppMap. If there is a MainWindow component in the AppMap with valid screen coordinates 
                then the click will occur with a relative offset of 50,80 from those absolute screen 
                coordinates. Otherwise, the click will occur at absolute screen coordinates 50,80.</p>
                <p>
                #3 If there is a MainWindow component in the [MainWindow] section of the AppMap with valid screen 
                coordinates then the click will occur with a relative offset of 50,80 from those absolute 
                screen coordinates. Otherwise, the click will occur at absolute screen coordinates 50,80.</p>
                <p>
                #4 above will contain no valid AnyWin:AnyComp coordinate data and 
                those fields will be ignored.  However, Node1 MUST exist in the 
                Application Map [AnyComp] section to provide absolute screen coordinates for the click.</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20100324" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
       </engines>

       <parameters>
        <parameter name="APPMAPSUBKEY" displayText="AppMapSubkey" optional="YES">
           <description>
              <short_desc> 
                (Sometimes Optional)Name of the AppMap subkey to locate in the AppMap.
              </short_desc>
              <detailed_desc>
                Without this there MUST be absolute screen coordinates stored in the AppMap 
                for the Window:Component specified.
                <p>
                Name of the AppMap subkey to locate in the App Map.  
                We expect the AppMap to contain the coordinates in the following supported formats:
                </p><p><pre>
                [Component]
                Node1="33,120"        (comma-delimited)      OR
                Node1="33;120"        (semi-colon delimited) OR
                Node1="33 120"        (space-delimited)      OR
                Node1="Coords=33,120" (comma-delimited)      OR
                Node1="Coords=33;120" (semi-colon delimited) OR
                Node1="Coords=33 120" (space-delimited)
                </pre></p><p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
                <p>
                This field can instead contain the literal text of any absolute or relative coordinates 
                in the same formats as shown above. </p>
              </detailed_desc>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WINDOW, WINDOW, RightClickScreenLocation</usage>
           <description>
              <short_desc> 
               RightClick at specified screen coordinates for WINDOW.
              </short_desc>
              <detailed_desc> 
               RightClick at screen coordinates specified for the Window item stored in the 
               [Window] section of the current AppMap.
              </detailed_desc>
           </description>
        </example>
        <example>
	   <usage>T, WINDOW, AnObject, RightClickScreenLocation, "Coords=200,400"</usage>
	   <description>
	      <short_desc> 
	       RightClick at screen coordinates 200,400.
	      </short_desc>
	      <detailed_desc> 
	       RightClick at screen coordinates 200,400.  This assumes AnObject 
	       is NOT an item in the [Window] section of the current AppMap with valid coordinate data.
	      </detailed_desc>
	   </description>
        </example>
        <example>
           <usage>T, WINDOW, AnObject, RightClickScreenLocation, ASubObject</usage>
           <description>
              <short_desc> 
               RightClick at screen coordinates stored in the ASubObject reference in the 
               [AnObject] section of the current AppMap.
              </short_desc>
              <detailed_desc> 
               ASubObject reference found in the AppMap [AnObject] section must contain the screen coordinates
               on which to click.
              </detailed_desc>
           </description>
        </example>
        <example>
	   <usage>T, WINDOW, AnObject, RightClickScreenLocation</usage>
	   <description>
	      <short_desc> 
	       RightClick on the Window:AnObject screen coordinates.
	      </short_desc>
	      <detailed_desc> 
	       Because no AppMapSubKey is provided the AnObject item MUST exist in the [WINDOW] section 
	       of the current AppMap and it MUST contain valid screen coordinate data.
	      </detailed_desc>
	   </description>
        </example>
     </examples></keyword>     


  <keyword name="RIGHTCLICKSCREENPOINT" 
           displayText="RightClickScreenPoint" 
           deprecated="YES" 
           deprecatedFor="GenericObject RightClickScreenLocation" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                (Deprecated) RightClick a specified screen location.
              </short_desc>
              <detailed_desc>
                (Deprecated) RightClick a specified screen location. See <a href="#detail_RightClickScreenLocation">RightClickScreenLocation</a> 
                for the preferred method to click on screen coordinates.
                <p>
                We can click on any screen location based on literal text x,y 
                coordinates retrieved from Field #5.  Window and Component names and App Map entries are 
                completely ignored.  So the user can put anything in those fields that might help test readability.  
                </p><p>
                It is not recommended to hardcode screen coordinates in the test table in this way.
                </p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20100324" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
       </engines>

       <parameters>
        <parameter name="COORDS" displayText="Coords" optional="NO">
           <description>
              <short_desc> 
                The hardcoded X,Y screen coordinates--or the result of an expression--that provides the 
                absolute screen coordinates to click.
              </short_desc>
              <detailed_desc>
                The coordinates must be in the following supported formats:
                <p><pre>
                "33,120"        (comma-delimited)      OR
                "33;120"        (semi-colon delimited) OR
                "33 120"        (space-delimited)
                </pre></p><p>
		Note the "Coords=" prefix is NOT supported for this deprecated command.
		</p>
              </detailed_desc>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, BogusWin, BogusComp, RightClickScreenPoint, 33;120</usage>
           <description>
              <short_desc> 
               RightClick at screen coordinates 33,120.
              </short_desc>
              <detailed_desc> 
               RightClick at screen coordinates 33,120
              </detailed_desc>
           </description>
        </example>
     </examples></keyword>     


  <keyword name="CTRLCLICK" 
           displayText="CtrlClick" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc>
                A CTRL-click on an object.
              </short_desc>
              <detailed_desc>
                By default we should click the center of the object.
                <p>We can also CTRL-click on any part of an object based on a stored x,y
                coordinate.  The object containing the coordinate is first given
                context and then a CTRL-click is generated at the coordinate.  Thus, an item
                or object can be referenced by name even though it is only recognized
                via coordinates.</p>
                <p>
                The coordinate lookup is done with the component name of the record AND
                Field #5.</p>
                <p>
                Typical Data Table records:</p>
                <p>
                (1) t MainWindow MainWindow CtrlClick<br/>
                (2) t MainWindow MainWindow CtrlClick AnObject<br/>
                (3) t MainWindow  ToolItem  CtrlClick PrintTool</p>
                <p>
                #2 above will contain an AnObject="3,10" entry in the MainWindow section
                of the Application Map to CTRL-click at x=3, y=10 in the MainWindow. <b>For SE+</b>, the 
                coordinate can be percentage format, like "20%,30%". This percentage format indicates 
                the point (20% width of component, 30% height of component) relative to the object.</p>
                <p>
                #3 above will contain a ToolItem entry in the MainWindow section with
                normal recognition information for it .  ToolItem will also have it's
                own section in the Application Map in which there will be an entry like
                PrintTool="15,30".  This will tell Robot to locate the PrintTool Window
                object and CTRL-click at the coordinates specified by the reference.
				</p><p>
				Engines should also attempt to support coordinates separated by alternate separators.  
				The most common separators that should be supported would be:
				<ul>
				<li>"," (comma) Example: "50,200"</li>
				<li>";" (semi-colon) Example: "50;200"</li>
				<li>" " (space) Example: "50 200"</li>
				</ul>
				</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" >
	       <libraryInfo name="GenericObjectFunctions" 
                            doc="GenericObjectFunctions.htm" 
                            sourcecode="GenericObjectFunctions.sbl" 
                            class="GENERIC" />
           </engine>
		   <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20080311" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="GENERIC" />
           </engine>
           <engine name="WinRunner" 
			       since="20020821" 
			       tool="WinRunner" 
			       vendor="Mercury Interactive">
		       <libraryInfo class="GENERIC" 
					name="GenericObjectFunctions" 
					sourcecode="GenericObjectFunctions">
		       </libraryInfo>
           </engine>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20100708" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="GENERIC" />
           </engine>
           <engine name="Test Complete" 
				   since="20110415" 
				   tool="TestComplete" 
				   vendor="Automated QA">
			   <libraryInfo class="GENERIC" 
					name="GenericObjectFunctions" 
					sourcecode="GenericObjectFunctions.SVB">
			   </libraryInfo>
           </engine>
           <engine vendor="Abbot" tool="Abbot" name="Abbot" since="20050923" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/abbot/CFComponent.html" 
                            sourcecode="org.safs.abbot.CFComponent.java" 
                            class="GENERIC" />
           </engine>
           <engine vendor="OpenQA" tool="Selenium" name="Selenium" since="20110704" >
	    	<libraryInfo name="CFComponent" 
			             doc="org/safs/selenium/CFComponent.html" 
			             sourcecode="org.safs.selenium.CFComponent.java" 
			             class="GENERIC" />
           </engine>
           <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140305" >
	           <libraryInfo name="CFComponent" 
                            doc="org/safs/selenium/webdriver/CFComponent.html" 
                            sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
                            class="CFComponent"/>
           </engine>
       </engines>

       <parameters>
        <parameter name="APPMAPSUBKEY" displayText="AppMapSubkey" optional="YES">
           <description>
              <short_desc>
                (Optional) Name of the AppMap subkey to lookup and use for the CTRL-click.
              </short_desc>
              <detailed_desc>
                Without this we should click the center of the object.
                <p>Name of the AppMap subkey to lookup and use for the CTRL-click.
                We expect the AppMap to contain the item in the format "x,y":</p>
                <p><pre>
                [ToolItem]
                PrintTool="33,120"      OR
                PrintTool="Coords=33,120"
                </pre></p>
                <p>
                The results from the lookup are appended to the "Coords=" string
                used by the GenericObject Ctrl_Click command in Robot (if necessary).
                So any valid content used with the Ctrl_Click command can be
                part of this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.
				</p><p>
				Engines should also attempt to support coordinates separated by alternate separators.  
				The most common separators that should be supported would be:
				<ul>
				<li>"," (comma) Example: "50,200"</li>
				<li>";" (semi-colon) Example: "50;200"</li>
				<li>" " (space) Example: "50 200"</li>
				</ul>
				</p><p>
                <b>Important Abbot note.</b> Presently, there is no support for AppMapSubkey
                specification (5th field).
                </p>
              </detailed_desc>
           </description>
        </parameter>
        <parameter name="AUTOSCROLL" displayText="AutoScroll" optional="YES">
           <description>
              <short_desc> 
                (Optional) True|False. If the component will be scrolled into view automatically before clicking. The default value is true.
              </short_desc>
              <detailed_desc>
                If the component is out of view, the click action will not succeed. Normally we will scroll the component into view,
                and then perform the click action. But sometimes, the component is partially shown and click could work and user does not
                want the component shift, then we could turn off the auto-scroll ability by setting this parameter to false.<br/>
                If this auto-scroll is turned off, user needs to make sure that component is shown by himself.
              </detailed_desc>
              <note>
                <engines><engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20160422"/></engines>
                <value>For now, this optional parameter is only supported in Selenium2.0 Engine. </value>
              </note>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WINDOW, WINDOW, CTRLCLICK</usage>
           <description>
              <short_desc>
               A CTRL-click will be performed on the center of the object.
              </short_desc>
              <detailed_desc>
               A CTRL-click will be performed on the center of the object.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, WINDOW, CTRLCLICK, , False</usage>
           <description>
              <short_desc>
               A CTRL-click will be performed on the center of the object. <b>And the object
               will not be scrolled into view automatically before clicking.</b>
              </short_desc>
              <note>
                <engines><engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20160422"/></engines>
                <value>Auto-scroll will be turned off.</value>
              </note>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, WINDOW, CTRLCLICK, AnObject</usage>
           <description>
              <short_desc>
               A CTRL-click will be performed at a x,y coordinate indicated by the AnObject reference in
               the Application Map.
              </short_desc>
              <detailed_desc>
               Field  5 : TQ String. A reference identified in the Application Map identifying coordinates
               on which to CTRL-click
               This example shows AnObject which will be found in the Application Map as a referenced item
               in the WINDOW section.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, AnObject, CTRLCLICK, ASubObject</usage>
           <description>
              <short_desc>
               A CTRL-click will be performed at a x,y coordinate indicated by the ASubObject reference in
               the Application Map.
              </short_desc>
              <detailed_desc>
               Field  5 : TQ String. A reference identified in the Application Map identifying coordinates
               on which to CTRL-click
               This example shows AnObject as a viable object in the WINDOW but that it also has its own
               section in the Application Map which contains one or more named references like
               ASubObject which are used for test.
              </detailed_desc>
           </description>
        </example>

     </examples></keyword>
     
  <keyword name="CTRLRIGHTCLICK" 
           displayText="CtrlRightClick" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc>
                A CTRL-Right click on an object.
              </short_desc>
              <detailed_desc>
                By default we should click the center of the object.
                <p>We can also CTRL-Right-Click on any part of an object based on a stored x,y
                coordinate.  The object containing the coordinate is first given
                context and then a CTRL-Right-Click is generated at the coordinate.  Thus, an item
                or object can be referenced by name even though it is only recognized
                via coordinates.</p>
                <p>
                The coordinate lookup is done with the component name of the record AND
                Field #5.</p>
                <p>
                Typical Data Table records:</p>
                <p>
                (1) t MainWindow MainWindow CtrlRightClick<br/>
                (2) t MainWindow MainWindow CtrlRightClick AnObject<br/>
                (3) t MainWindow  ToolItem  CtrlRightClick PrintTool</p>
                <p>
                #2 above will contain an AnObject="3,10" entry in the MainWindow section
                of the Application Map to CTRL-click at x=3, y=10 in the MainWindow. <b>For SE+</b>, the 
                coordinate can be percentage format, like "20%,30%". This percentage format indicates 
                the point (20% width of component, 30% height of component) relative to the object.</p>
                <p>
                #3 above will contain a ToolItem entry in the MainWindow section with
                normal recognition information for it .  ToolItem will also have it's
                own section in the Application Map in which there will be an entry like
                PrintTool="15,30".  This will tell Robot to locate the PrintTool Window
                object and CTRL-Right-Click at the coordinates specified by the reference.</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20060814" >
	       <libraryInfo name="GenericObjectFunctions" 
                            doc="GenericObjectFunctions.htm" 
                            sourcecode="GenericObjectFunctions.sbl" 
                            class="GENERIC" />
           </engine>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20100708" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="GENERIC" />
           </engine>
		   <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20080311" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="GENERIC" />
           </engine>
           <engine vendor="OpenQA" tool="Selenium" name="Selenium" since="20110704" >
	    	<libraryInfo name="CFComponent" 
			             doc="org/safs/selenium/CFComponent.html" 
			             sourcecode="org.safs.selenium.CFComponent.java" 
			             class="GENERIC" />
           </engine>
           <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140305" >
	           <libraryInfo name="CFComponent" 
                            doc="org/safs/selenium/webdriver/CFComponent.html" 
                            sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
                            class="CFComponent"/>
           </engine>
       </engines>

       <parameters>
        <parameter name="APPMAPSUBKEY" displayText="AppMapSubkey" optional="YES">
           <description>
              <short_desc>
                (Optional) Name of the AppMap subkey to lookup and use for the CTRL-Right-Click.
              </short_desc>
              <detailed_desc>
                Without this we should click the center of the object.
                <p>Name of the AppMap subkey to lookup and use for the CTRL-Right-Click.
                We expect the AppMap to contain the item in the format "x,y":</p>
                <p><pre>
                [ToolItem]
                PrintTool="33,120"      OR
                PrintTool="Coords=33,120"
                </pre></p>
                <p>
                The results from the lookup are appended to the "Coords=" string
                used by the GenericObject CTRL-Right-Click command in Robot (if necessary).
                So any valid content used with the CTRL-Right-Click command can be
                part of this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
              </detailed_desc>
           </description>
        </parameter>
        <parameter name="AUTOSCROLL" displayText="AutoScroll" optional="YES">
           <description>
              <short_desc> 
                (Optional) True|False. If the component will be scrolled into view automatically before clicking. The default value is true.
              </short_desc>
              <detailed_desc>
                If the component is out of view, the click action will not succeed. Normally we will scroll the component into view,
                and then perform the click action. But sometimes, the component is partially shown and click could work and user does not
                want the component shift, then we could turn off the auto-scroll ability by setting this parameter to false.<br/>
                If this auto-scroll is turned off, user needs to make sure that component is shown by himself.
              </detailed_desc>
              <note>
                <engines><engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20160422"/></engines>
                <value>For now, this optional parameter is only supported in Selenium2.0 Engine. </value>
              </note>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WINDOW, WINDOW, CtrlRightClick</usage>
           <description>
              <short_desc>
               A CTRL-Right-Click will be performed on the center of the object.
              </short_desc>
              <detailed_desc>
               A CTRL-Right-Click will be performed on the center of the object.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, WINDOW, CtrlRightClick, , False</usage>
           <description>
              <short_desc>
               A CTRL-Right-Click will be performed on the center of the object. <b>And the object
               will not be scrolled into view automatically before clicking.</b>
              </short_desc>
              <note>
                <engines><engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20160422"/></engines>
                <value>Auto-scroll will be turned off.</value>
              </note>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, WINDOW, CtrlRightClick, AnObject</usage>
           <description>
              <short_desc>
               A CTRL-Right-Click will be performed at a x,y coordinate indicated by the AnObject reference in
               the Application Map.
              </short_desc>
              <detailed_desc>
               Field  5 : TQ String. A reference identified in the Application Map identifying coordinates
               on which to CTRL-Right-Click.
               This example shows AnObject which will be found in the Application Map as a referenced item
               in the WINDOW section.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, AnObject, CtrlRightClick, ASubObject</usage>
           <description>
              <short_desc>
               A CTRL-Right-Click will be performed at a x,y coordinate indicated by the ASubObject reference in
               the Application Map.
              </short_desc>
              <detailed_desc>
               Field  5 : TQ String. A reference identified in the Application Map identifying coordinates
               on which to CTRL-Right-Click
               This example shows AnObject as a viable object in the WINDOW but that it also has its own
               section in the Application Map which contains one or more named references like
               ASubObject which are used for test.
              </detailed_desc>
           </description>
        </example>

     </examples></keyword>     
     
  <keyword name="SHIFTCLICK" 
           displayText="ShiftClick" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc>
                A SHIFT click on an object.
              </short_desc>
              <detailed_desc>
                By default we should click on the center of the object.
                <p>We can SHIFT click on any part of an object based on a stored x,y
                coordinate.  The object containing the coordinate is first given
                context and then a SHIFT click is generated at the coordinate.  Thus, an item
                or object can be referenced by name even though it is only recognized
                via coordinates.</p>
                <p>
                The coordinate lookup is done with the component name of the record AND
                Field #5.</p>
                <p>
                Typical Data Table records:</p>
                <p>
                (1) t MainWindow MainWindow ShiftClick <br/>
                (2) t MainWindow MainWindow ShiftClick AnObject<br/>
                (3) t MainWindow  ToolItem  ShiftClick PrintTool</p>
                <p>
                #2 above will contain an AnObject="3,10" entry in the MainWindow section
                of the Application Map to SHIFT click at x=3, y=10 in the MainWindow. <b>For SE+</b>, the 
                coordinate can be percentage format, like "20%,30%". This percentage format indicates 
                the point (20% width of component, 30% height of component) relative to the object.</p>
                <p>
                #3 above will contain a ToolItem entry in the MainWindow section with
                normal recognition information for it .  ToolItem will also have it's
                own section in the Application Map in which there will be an entry like
                PrintTool="15,30".  This will tell Robot to locate the PrintTool Window
                object and SHIFT click at the coordinates specified by the reference.
				</p><p>
				Engines should also attempt to support coordinates separated by alternate separators.  
				The most common separators that should be supported would be:
				<ul>
				<li>"," (comma) Example: "50,200"</li>
				<li>";" (semi-colon) Example: "50;200"</li>
				<li>" " (space) Example: "50 200"</li>
				</ul>
				</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" >
	       <libraryInfo name="GenericObjectFunctions" 
                            doc="GenericObjectFunctions.htm" 
                            sourcecode="GenericObjectFunctions.sbl" 
                            class="GENERIC" />
           </engine>
		   <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20080311" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="GENERIC" />
           </engine>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20100708" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="GENERIC" />
           </engine>
           <engine name="Test Complete" 
				   since="20110415" 
				   tool="TestComplete" 
				   vendor="Automated QA">
			   <libraryInfo class="GENERIC" 
					name="GenericObjectFunctions" 
					sourcecode="GenericObjectFunctions.SVB">
			   </libraryInfo>
           </engine>
           <engine name="WinRunner" 
			       since="20020821" 
			       tool="WinRunner" 
			       vendor="Mercury Interactive">
		       <libraryInfo class="GENERIC" 
					name="GenericObjectFunctions" 
					sourcecode="GenericObjectFunctions">
		       </libraryInfo>
           </engine>
           <engine vendor="Abbot" tool="Abbot" name="Abbot" since="20050923" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/abbot/CFComponent.html" 
                            sourcecode="org.safs.abbot.CFComponent.java" 
                            class="GENERIC" />
           </engine>
           <engine vendor="OpenQA" tool="Selenium" name="Selenium" since="20110704" >
	    	<libraryInfo name="CFComponent" 
			             doc="org/safs/selenium/CFComponent.html" 
			             sourcecode="org.safs.selenium.CFComponent.java" 
			             class="GENERIC" />
           </engine>
           <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140305" >
	           <libraryInfo name="CFComponent" 
                            doc="org/safs/selenium/webdriver/CFComponent.html" 
                            sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
                            class="CFComponent"/>
           </engine>
       </engines>

       <parameters>
        <parameter name="APPMAPSUBKEY" displayText="AppMapSubkey" optional="YES">
           <description>
              <short_desc>
                (Optional) Name of the AppMap subkey to lookup and use for the SHIFT click.
              </short_desc>
              <detailed_desc>
                Without this we should click on the center of the object.
                <p>Name of the AppMap subkey to lookup and use for the SHIFT click.
                We expect the AppMap to contain the item in the format "x,y":</p>
                <p><pre>
                [ToolItem]<br/>
                PrintTool="33,120"      OR
                PrintTool="Coords=33,120"
                </pre></p>
                <p>
                The results from the lookup are appended to the "Coords=" string
                used by the GenericObject Shift_Click command in Robot (if necessary).
                So any valid content used with the Shift_Click command can be
                part of this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.
				</p><p>
				Engines should also attempt to support coordinates separated by alternate separators.  
				The most common separators that should be supported would be:
				<ul>
				<li>"," (comma) Example: "50,200"</li>
				<li>";" (semi-colon) Example: "50;200"</li>
				<li>" " (space) Example: "50 200"</li>
				</ul>
				</p>
                <p><b>Important Abbot note.</b> Presently, there is no support for AppMapSubkey
                specification (5th field).
                </p>
              </detailed_desc>
           </description>
        </parameter>
        <parameter name="AUTOSCROLL" displayText="AutoScroll" optional="YES">
           <description>
              <short_desc> 
                (Optional) True|False. If the component will be scrolled into view automatically before clicking. The default value is true.
              </short_desc>
              <detailed_desc>
                If the component is out of view, the click action will not succeed. Normally we will scroll the component into view,
                and then perform the click action. But sometimes, the component is partially shown and click could work and user does not
                want the component shift, then we could turn off the auto-scroll ability by setting this parameter to false.<br/>
                If this auto-scroll is turned off, user needs to make sure that component is shown by himself.
              </detailed_desc>
              <note>
                <engines><engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20160422"/></engines>
                <value>For now, this optional parameter is only supported in Selenium2.0 Engine. </value>
              </note>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WINDOW, WINDOW, SHIFTCLICK</usage>
           <description>
              <short_desc>
               A SHIFT click will be performed on the center of the object.
              </short_desc>
              <detailed_desc>
               A SHIFT click will be performed on the center of the object.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, WINDOW, SHIFTCLICK, , False</usage>
           <description>
              <short_desc>
               A SHIFT click will be performed on the center of the object. <b>And the object
               will not be scrolled into view automatically before clicking.</b>
              </short_desc>
              <note>
                <engines><engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20160422"/></engines>
                <value>Auto-scroll will be turned off.</value>
              </note>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, WINDOW, SHIFTCLICK, AnObject</usage>
           <description>
              <short_desc>
               A SHIFT click will be performed at a x,y coordinate indicated by the AnObject reference in
               the Application Map.
              </short_desc>
              <detailed_desc>
               Field  5 : TQ String. A reference identified in the Application Map identifying coordinates
               on which to SHIFT-click
               This example shows AnObject which will be found in the Application Map as a referenced item
               in the WINDOW section.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, AnObject, SHIFTCLICK, ASubObject</usage>
           <description>
              <short_desc>
               A SHIFT click will be performed at a x,y coordinate indicated by the ASubObject reference in
               the Application Map.
              </short_desc>
              <detailed_desc>
               Field  5 : TQ String. A reference identified in the Application Map identifying coordinates
               on which to SHIFT-click
               This example shows AnObject as a viable object in the WINDOW but that it also has its own
               section in the Application Map which contains one or more named references like
               ASubObject which are used for test.
              </detailed_desc>
           </description>
        </example>

     </examples></keyword>
     
  <keyword name="LEFTDRAG" 
           displayText="LeftDrag" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                A left mouse drag is performed on the object based on the stored coordinates.
              </short_desc>
              <detailed_desc> 
                <p>For components that are unrecognized, we can make a mouse drag in these 
                to draw fields(rectangles) or do drag and drop, based on stored x,y start 
                and end coordinates. The object containing the starting coordinates is first 
                given context and then a left mouse drag is performed with the stored coordinates.</p>
                <p> 
                The coordinate lookup is done with the component name(Field #3) of the record AND 
                Field #5.</p>
                <p>
                Typical Data Table records:</p>
                <p>
                (1) t MainWindow GenericItem LeftDrag DragName</p>
                <p>
                #1 above will contain a GenericItem entry in the MainWindow section with 
                normal recognition information for it .  GenericItem will also have it's
                own section in the Application Map in which there will be an entry like:</p>
                <p><pre>
                DragName="15,30,60,90"    OR
                DragName="Coords=15,30,60,90"
                </pre></p>
                <p>
                This will tell Robot to locate the GenericItem Window object and left drag 
                from coordinates 15,30 to 60,90.</p>
		<p>
		Note: the TID supports this command using 
		<a href="http://safsdev.sourceforge.net/sqabasic2000/SAFSImageBasedRecognition.htm" 
		target="imagebased" alt="SAFS Image-Based Recognition Doc">Image-Based Testing</a> 
		techniques and App Map entries as well as literal text coordinates.
		</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" >
	       <libraryInfo name="GenericObjectFunctions" 
                            doc="GenericObjectFunctions.htm" 
                            sourcecode="GenericObjectFunctions.sbl" 
                            class="GENERIC" />
           </engine>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20080509" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="GENERIC" />
           </engine>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20090325" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
           <engine name="Test Complete" 
				   since="20111212" 
				   tool="TestComplete" 
				   vendor="Automated QA">
			   <libraryInfo class="GENERIC" 
					name="GenericObjectFunctions" 
					sourcecode="GenericObjectFunctions.SVB">
			   </libraryInfo>
           </engine>
           <engine name="WinRunner" 
			       since="20020821" 
			       tool="WinRunner" 
			       vendor="Mercury Interactive">
		       <libraryInfo class="GENERIC" 
					name="GenericObjectFunctions" 
					sourcecode="GenericObjectFunctions">
		       </libraryInfo>
           </engine>
	       <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20150115">
	        <libraryInfo name="CFComponent" 
			  doc="org/safs/selenium/webdriver/CFComponent.html" 
			  sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
			  class="GENERIC" />
            </engine>
       </engines>

       <parameters>
        <parameter name="APPMAPSUBKEY" displayText="AppMapSubkey" optional="NO">
           <description>
              <short_desc> 
                Name of the AppMap subkey to lookup or literal text to use for the left mouse drag.
              </short_desc>
              <detailed_desc>
                <p>Name of the AppMap subkey to lookup and use for the left drag.
                We expect the AppMap or literal text to contain the item in the format "x1,y1,x2,y2":</p>
                <p><pre>
                [GenericItem]
                DragName="3,10,12,20"     OR
                DragName="Coords=3,10,12,20"
                </pre></p>
                <p>
                The results from the lookup are appended to the "Coords=" string 
                used by the GenericObject Left_Drag command in Robot (if necessary).  
                So any valid content used with the Left_Drag command can be 
                part of this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
                <p><b>Important TID note.</b> The <a href="http://safsdev.sourceforge.net/sqabasic2000/SAFSImageBasedRecognition.htm" 
		target="imagebased" alt="SAFS Image-Based Recognition Doc">TID IBT implementation</a> supports using literal text in 
                this parameter instead of an AppMapSubKey.  If the value retrieved from 
                this field is NOT found to exist in the App Map as a Sub Key then it 
                will be used as literal text as if it HAD been retrieved from the App Map.
                </p><p>
                Any coordinates provided for TID IBT are considered relative to the top-left (0,0) of the 
                image or item found unless PointRelative and\or Hotspot information in the IBT recognition 
                string change this initial relative point to be somewhere else.
                </p>
              </detailed_desc>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WINDOW, WINDOW, LEFTDRAG, AnObject</usage>
           <description>
              <short_desc> 
               A left mouse drag will be performed based on coordinates indicated by the AnObject reference in
               the Application Map.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. A reference identified in the Application Map identifying coordinates
               on which to drag.
               This example shows AnObject which will be found in the Application Map as a referenced item
               in the WINDOW section.    
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, AnObject, LEFTDRAG, ASubObject</usage>
           <description>
              <short_desc> 
               A left mouse drag will be performed based on coordinates indicated by the ASubObject reference
               in the Application Map.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. A reference identified in the Application Map identifying coordinates
               on which to drag.
               This example shows AnObject as a viable object in the WINDOW but that it also has its own
               section in the Application Map which contains one or more named references like
               ASubObject which are used for test.   
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, AnObject, LEFTDRAG, "Coords=10;20;200;300"</usage>
           <description>
              <short_desc> 
               A left drag will be performed from point 10,20 to 200,300 relative to AnObject.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. The item does not exist in the app map so will be 
               treated as literal text.  Note we allow semi-colon delimited coordinates 
               to support the case when commas are used as field delimiters and cannot be 
               used to delimit the X and Y coordinates.
              </detailed_desc>
           </description>
        </example>

     </examples></keyword>  
   <keyword name="DRAGTO" 
             displayText="DragTo" 
             deprecated="NO" 
             expectFailSupport="NO" 
             expectWarnSupport="NO">
             

    <description>
        <short_desc>
            A left mouse drag is performed from one object to another object based
            on the offsets values.
        </short_desc>
        <detailed_desc>
            <p>Drag will be performed from component (from-component) to another
                to-component. Offsets value are the drag object select location. The
                location (drag and release) calucate by X and Y percentage
                cordination. DragTo also supports sub item of component and sub item
                of to-component.</p>
            <p> The coordination specify by offsets value. First two values are
                for from-component and another are for to-component.</p>
        </detailed_desc>
        <note>
          <value>
            Offsets can be 50%,50%,50%,50% or 50%;50%;50%;50%<br/>
            T, WINDOW,COMPONENT, DRAGTO, ToWINDOW,ToCOMPONENT,"50%,50%,50%,50%"
            Where first 50%,50% are COMPONENT or their subitem's X and Y location
            and second 50%,50% are ToCOMPONENT or their subitem's X and Y
            location.
          </value>
        </note>
    </description>
             
         <engines>
           <engine name="Test Complete" since="20111212" tool="TestComplete" vendor="Automated QA">
             <libraryInfo class="GENERIC" 
                            name="GenericObjectFunctions" 
                            sourcecode="GenericObjectFunctions.SVB">
             </libraryInfo>
           </engine>
           <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20150902" >
             <libraryInfo name="GenericObjectFunctions" 
                          doc="org/safs/selenium/webdriver/CFComponent.html" 
                          sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
                          class="GENERIC"/>
           </engine>               
         </engines>
         <parameters>
          <parameter name="TOWINDOW" displayText="ToWindow" optional="NO">
             <description>
                <short_desc>ToWindow object.</short_desc>
                <detailed_desc>ToWindow recognition string define into AppMap.</detailed_desc>
             </description>
          </parameter>
          
          <parameter name="TOCOMPONET" displayText="ToComponent" optional="NO">
            <description>
              <short_desc>ToComponent object.</short_desc>
              <detailed_desc>ToComponent recognition string define into AppMap.</detailed_desc>
            </description>
          </parameter>
          
          <parameter name="OFFSETS" displayText="Offsets" optional="YES">
            <description>
              <short_desc> 
                Drag and release location of from-component and to-component. 
                Offsets syntax will be "50%,50%,70%,70%"", where first two percentages are for from-component 
                and second two are for to-component. If offsets are not specified then center will be used.<br/>
                Default value, both components center.
              </short_desc>
              <note>
                <engines><engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20150902"/></engines>
                <value>The parameter 'Offsets' can be also given in pixel, like '20, 20, 70, 90'; or even in mix format, like "50%, 50%, 70, 90".</value>
              </note>
           </description>
          </parameter>
          
          <parameter name="FROMSUBITEM" displayText="FromSubItem" optional="YES">
            <description>
              <short_desc>Text of from-component's sub item.</short_desc>
              <detailed_desc>FromSubItem as text. e.g tree node or list item or any sub main component's item.</detailed_desc>
              <note>
                <engines><engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20150902"/></engines>
                <value>NOT supported yet.</value>
              </note>
           </description>
          </parameter>
          
          <parameter name="TOSUBITEM" displayText="ToSubItem" optional="YES">
            <description>
              <short_desc>Text of to-component's sub item.</short_desc>
              <detailed_desc>ToSubItem as text. e.g tree node or list item or any sub main component item.</detailed_desc>
              <note>
                <engines><engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20150902"/></engines>
                <value>NOT supported yet.</value>
              </note>
            </description>
          </parameter>      
          
          <parameter name="PAUSE" displayText="Pause" optional="YES">
            <description>
              <short_desc>Pause time in millisecond to hold the button before releasing.</short_desc>
              <detailed_desc>
                The default pause time is 800 milliseconds, which may not enough for the AUT to react.
                User could provide a larger value according to his needs.
              </detailed_desc>
              <note>
                <engines><engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20160929"/></engines>
                <value>Initially implemented, may not be supported for other engines.</value>
              </note>
           </description>
          </parameter>
       </parameters>

       <examples>
    	    <example>
	       <usage>T, WINDOW,COMPONENT, DRAGTO, ToWINDOW,ToCOMPONENT</usage>
	       <description>
		  <short_desc> 
		   A left mouse drag will be performed from component (COMPONENT) to to-component (ToCOMPONENT).
		  </short_desc>
		  <detailed_desc> 
		   Drag the component from center and  release on to-component's center.   
		  </detailed_desc>
	       </description>
          </example>  		
          <example>
             <usage>T, WINDOW,COMPONENT, DRAGTO, ToWINDOW,ToCOMPONENT,"50%,50%,50%,50%"</usage>
             <description>
                <short_desc> 
                 A left mouse drag will be performed from component(X=50% and Y=50%) to to-component(X=50% and Y=50%).
                </short_desc>
                <detailed_desc> 
                 Field  7 : "50%,50%,50%,50%" first two 50%s for component (COMPONENT) and another for to-component (ToCOMPONENT) drag and release point. User can use "," or ";" as separator to separate X and Y. example "50%,50%,50%,50%" or 50%;50%;50%;50%". 
                </detailed_desc>
             </description>
          </example>	
	  <example>
	       <usage>T, WINDOW,COMPONENT, DRAGTO, WINDOW,COMPONENT,"50%;50%;75%;75%"</usage>
	       <description>
		  <short_desc> 
		   A left mouse drag will be performed to resize the component (COMPONENT) from 50% to 75% size.
		  </short_desc>
		  <detailed_desc> 
		  Resize the component from (X=50%, y=50%) to X=75% and Y=75%. 
		  </detailed_desc>
	       </description>
          </example>          
           <example>
	       <usage>T, WINDOW,COMPONENT, DRAGTO, ToWINDOW,ToCOMPONENT,"50%,50%,50%,50%","FromSubItem"</usage>
	       <description>
		  <short_desc> 
		   A left mouse drag will be performed from FromSubItem (COMPONENT's sub item) to to-component (ToCOMPONENT) using offsets(50%,50%,50%,50%).
		  </short_desc>
		  <detailed_desc> 
		   Field  8 : FromSubItem of COMPONENT. It is useful when TreeNode or List Item drag to to-component. 
		  </detailed_desc>
	       </description>
          </example>
           <example>
	       <usage>T, WINDOW,COMPONENT, DRAGTO, ToWINDOW,ToCOMPONENT,50%,50%,50%,50%,"FromSubItem","ToSubItem"</usage>
	       <description>
		  <short_desc> 
		   A left mouse drag will be performed from FromSubItem (COMPONENT's sub item) to ToSubItem (ToCOMPONENT's sub item).
		  </short_desc>
		  <detailed_desc> 
		   Field  8 and 9: FromSubItem is a subitem of COMPONENT and ToSubItem is a subitem of ToCOMPONENT. It is useful when TreeNode or List Item drag to subitem of to-component. e.g DragTo tree node to list item. 
		  </detailed_desc>
	       </description>
          </example>          
  
     </examples></keyword>     
  <keyword name="RIGHTDRAG" 
           displayText="RightDrag" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                A right mouse drag is performed on the object based on the stored coordinates.
              </short_desc>
              <detailed_desc> 
                <p>For components that are unrecognized, we can make a mouse drag in these 
                to draw fields(rectangles) or do drag and drop, based on stored x,y start 
                and end coordinates. The object containing the starting coordinates is first 
                given context and then a right mouse drag is performed with the stored coordinates.</p>
                <p>
                The coordinate lookup is done with the component name(Field #3) of the record AND 
                Field #5.</p>
                <p>
                Typical Data Table records:</p>
                <p>
                (1) t MainWindow GenericItem RightDrag DragName</p>
                <p>
                #1 above will contain a GenericItem entry in the MainWindow section with 
                normal recognition information for it .  GenericItem will also have it's
                own section in the Application Map in which there will be an entry like:</p>
                <p>
                DragName="15,30,60,90"    OR
                DragName="Coords=15,30,60,90"</p>
                <p>
                This will tell Robot to locate the GenericItem Window object and right drag 
                from coordinates 15,30 to 60,90.</p>
		<p>
		Note: the TID supports this command using 
		<a href="http://safsdev.sourceforge.net/sqabasic2000/SAFSImageBasedRecognition.htm" 
		target="imagebased" alt="SAFS Image-Based Recognition Doc">Image-Based Testing</a> 
		techniques and App Map entries as well as literal text coordinates.
		</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" >
	       <libraryInfo name="GenericObjectFunctions" 
                            doc="GenericObjectFunctions.htm" 
                            sourcecode="GenericObjectFunctions.sbl" 
                            class="GENERIC" />
           </engine>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20080509" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="GENERIC" />
           </engine>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20090325" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
           <engine name="WinRunner" 
			       since="20020821" 
			       tool="WinRunner" 
			       vendor="Mercury Interactive">
		       <libraryInfo class="GENERIC" 
					name="GenericObjectFunctions" 
					sourcecode="GenericObjectFunctions">
		       </libraryInfo>
           </engine>
           <engine name="Test Complete" 
				   since="20130305" 
				   tool="TestComplete" 
				   vendor="Automated QA">
			   <libraryInfo class="GENERIC" 
					name="GenericObjectFunctions" 
					sourcecode="GenericObjectFunctions.SVB">
			   </libraryInfo>
           </engine>
	       <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20150115">
	        <libraryInfo name="CFComponent" 
			  doc="org/safs/selenium/webdriver/CFComponent.html" 
			  sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
			  class="GENERIC" />
            </engine>
       </engines>

       <parameters>
        <parameter name="APPMAPSUBKEY" displayText="AppMapSubkey" optional="NO">
           <description>
              <short_desc> 
                Name of the AppMap subkey to lookup or literal text to use for the right mouse drag.
              </short_desc>
              <detailed_desc>
                <p>Name of the AppMap subkey to lookup and use for the right drag.
                We expect the AppMap or literal text to contain the item in the format "x1,y1,x2,y2":</p>
                <p><pre>
                [GenericItem]
                DragName="3,10,12,20"     OR
                DragName="Coords=3,10,12,20"
                </pre></p>
                <p>
                The results from the lookup are appended to the "Coords=" string 
                used by the GenericObject Left_Drag command in Robot (if necessary).  
                So any valid content used with the Right_Drag command can be 
                part of this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
                <p><b>Important TID note.</b> The <a href="http://safsdev.sourceforge.net/sqabasic2000/SAFSImageBasedRecognition.htm" 
		target="imagebased" alt="SAFS Image-Based Recognition Doc">TID IBT implementation</a> supports using literal text in 
                this parameter instead of an AppMapSubKey.  If the value retrieved from 
                this field is NOT found to exist in the App Map as a Sub Key then it 
                will be used as literal text as if it HAD been retrieved from the App Map.
                </p><p>
                Any coordinates provided for TID IBT are considered relative to the top-left (0,0) of the 
                image or item found unless PointRelative and\or Hotspot information in the IBT recognition 
                string change this initial relative point to be somewhere else.
                </p>
              </detailed_desc>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WINDOW, WINDOW, RIGHTDRAG, AnObject</usage>
           <description>
              <short_desc> 
               A right mouse drag will be performed based on coordinates indicated by the AnObject reference in
               the Application Map.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. A reference identified in the Application Map identifying coordinates
               on which to drag.
               This example shows AnObject which will be found in the Application Map as a referenced item
               in the WINDOW section.    
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, AnObject, LEFTDRAG, ASubObject</usage>
           <description>
              <short_desc> 
               A right mouse drag will be performed based on coordinates indicated by the ASubObject reference
               in the Application Map.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. A reference identified in the Application Map identifying coordinates
               on which to drag.
               This example shows AnObject as a viable object in the WINDOW but that it also has its own
               section in the Application Map which contains one or more named references like
               ASubObject which are used for test.   
              </detailed_desc>
           </description>
        </example>

        <example>
           <usage>T, WINDOW, AnObject, RIGHTDRAG, "Coords=10;20;200;300"</usage>
           <description>
              <short_desc> 
               A right drag will be performed from point 10,20 to 200,300 relative to AnObject.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. The item does not exist in the app map so will be 
               treated as literal text.  Note we allow semi-colon delimited coordinates 
               to support the case when commas are used as field delimiters and cannot be 
               used to delimit the X and Y coordinates.
              </detailed_desc>
           </description>
        </example>
     </examples></keyword>
     
  <keyword name="JAVAMENUSELECT" 
           displayText="JavaMenuSelect" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                Select a JAVA Menu Item according to a stored text value.
              </short_desc>
              <detailed_desc> 
                <p>Select a JAVA Menu Item according to a stored text value.
                Until JavaMenu objects are routed elsewhere, we will handle  
                the menu selection here. 
                Each menuItem acted upon is given a name in the AppMap under 
                the name provided for the Menu.</p>
                <p>
                The menuitem lookup is done with the component\menu name of 
                the record AND Field #5.</p>
                <p>
                Typical Data Table records:</p>
                <p>
                    t JavaWindow MainMenu JavaMenuSelect FileOpen
                </p><p>
                The example will contain a FileOpen="Path=File-&gt;Open" entry in 
                the MainMenu section of the Application Map to select File-&gt;Open 
                menuItem from the menu of the MainWindow.</p>
                <p>
                MainMenu will also be an entry in the MainWindow section with 
                normal recognition information for it.  This will tell Robot to 
                locate the MainMenu Generic Object prior to the menu selection.</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" >
	       <libraryInfo name="GenericObjectFunctions" 
                            doc="GenericObjectFunctions.htm" 
                            sourcecode="GenericObjectFunctions.sbl" 
                            class="GENERIC" />
           </engine>
           <engine name="WinRunner" 
			       since="20020821" 
			       tool="WinRunner" 
			       vendor="Mercury Interactive">
		       <libraryInfo class="GENERIC" 
					name="GenericObjectFunctions" 
					sourcecode="GenericObjectFunctions">
		       </libraryInfo>
           </engine>
       </engines>

       <parameters>
        <parameter name="JAVAMENUITEM" displayText="JavaMenuItem" optional="NO">
           <description>
              <short_desc> 
                Name of the Java menuitem to lookup and use for the selection.
              </short_desc>
              <detailed_desc>
                <p>Name of the Java menuitem to lookup and use for the selection.
                We expect the AppMap to contain the item in the format "Path=Menu-&gt;Item":</p>
                <p>
                [MainMenu]
                FileOpen="Path=File-&gt;Open"</p>
                <p>  
                The full results from the AppMap lookup are used, so any 
                valid content used with the JavaMenu Click command can be part of 
                this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
              </detailed_desc>
           </description>
        </parameter>
     </parameters><examples>
        <example>
           <usage>T, WINDOW, MAINMENU, JavaMenuSelect, FileOpen</usage>
           <description>
              <short_desc> 
               A menu selection will be performed on the menuitem indicated by the FileOpen reference in
               the Application Map.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. A reference identified in the Application Map identifying the menuitem 
               on which to click.
               This example shows FileOpen which will be found in the Application Map as a referenced item
               in the MAINMENU section.    
              </detailed_desc>
           </description>
        </example>
     </examples></keyword>

  <keyword name="HSCROLLTO" 
           displayText="HScrollTo" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                 Attempts to perform an HScrollTo on an object.
              </short_desc>
              <detailed_desc> 
                Attempts to perform an HScrollTo on an object. The input record
                specifies the absolute position to scroll to.
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20031208" >
	       <libraryInfo name="GenericObjectFunctions" 
                            doc="GenericObjectFunctions.htm" 
                            sourcecode="GenericObjectFunctions.sbl" 
                            class="GENERIC" />
           </engine>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20080326" >
	       		<libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="GENERIC" />
           </engine>
           <engine name="Test Complete" 
		       since="20121214" 
		       tool="TestComplete" 
		       vendor="AutomatedQA">
  			   <libraryInfo class="GENERIC" 
  					name="GenericObjectFunctions" 
  					sourcecode="GenericObjectFunctions.SVB">
  			   </libraryInfo>
		       <domains>
                   <domain name="NET" since="20121214">
                       <libraryInfo name="GenericObjectFunctions" 
                                    class="GENERIC" 
                                    subClass="NET" 
                                    sourcecode="GenericObjectFunctions.SVB" />                  
                   </domain>
               </domains> 
           </engine>           
       </engines>

       <parameters>
        <parameter name="POSITION" displayText="POSITION" optional="NO">
           <description>
              <short_desc> 
                 Integer value that specifies the absolute position to scroll to.
              </short_desc>
              <detailed_desc> 
                 Integer value that specifies the absolute position to scroll to,
                 as would be used in the "Position=%" parameter for the HScrollTo 
                 action of the SQABasic GenericObject command.
              </detailed_desc>
           </description>
        </parameter>
     </parameters><examples>
        <example>
           <usage>T, WINDOW, Object, HSCROLLTO, 0</usage>
           <description>
              <short_desc> 
                Scrolls the object to the left most position.
              </short_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, Object, HSCROLLTO, 10</usage>
           <description>
              <short_desc> 
                Scrolls the object to the absolute horizontal position of 10.
              </short_desc>
           </description>
        </example>
     </examples></keyword>

  <keyword name="VSCROLLTO" 
           displayText="VScrollTo" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                 Attempts to perform a VScrollTo on an object.
              </short_desc>
              <detailed_desc> 
                Attempts to perform a VScrollTo on an object. The input record
                specifies the absolute position to scroll to.
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20031208" >
	       <libraryInfo name="GenericObjectFunctions" 
                            doc="GenericObjectFunctions.htm" 
                            sourcecode="GenericObjectFunctions.sbl" 
                            class="GENERIC" />
           </engine>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20080326" >
	       		<libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="GENERIC" />
           </engine>
           <engine name="Test Complete" 
		       since="20121214" 
		       tool="TestComplete" 
		       vendor="AutomatedQA">
  			   <libraryInfo class="GENERIC" 
  					name="GenericObjectFunctions" 
  					sourcecode="GenericObjectFunctions.SVB">
  			   </libraryInfo>
		       <domains>
                   <domain name="NET" since="20121214">
                       <libraryInfo name="GenericObjectFunctions" 
                                    class="GENERIC" 
                                    subClass="NET" 
                                    sourcecode="GenericObjectFunctions.SVB" />                  
                   </domain>
               </domains> 
           </engine>   		   
       </engines>

       <parameters>
        <parameter name="POSITION" displayText="POSITION" optional="NO">
           <description>
              <short_desc> 
                 Integer value that specifies the absolute position to scroll to.
              </short_desc>
              <detailed_desc> 
                 Integer value that specifies the absolute position to scroll to,
                 as would be used in the "Position=%" parameter for the VScrollTo 
                 action of the SQABasic GenericObject command.
              </detailed_desc>
           </description>
        </parameter>
     </parameters><examples>
        <example>
           <usage>T, WINDOW, Object, VSCROLLTO, 0</usage>
           <description>
              <short_desc> 
                Scrolls the object to the top most position.
              </short_desc>
           </description>
        </example>
        <example>
           <usage>T, WINDOW, Object, VSCROLLTO, 10</usage>
           <description>
              <short_desc> 
                Scrolls the object to the absolute vertical position of 10.
              </short_desc>
           </description>
        </example>
     </examples></keyword>
     
  <keyword name="SHIFTLEFTDRAG" 
           displayText="ShiftLeftDrag" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
             
       <description>
              <short_desc> 
                A SHIFT left mouse drag is performed on the object based on the stored coordinates.
              </short_desc>
              <detailed_desc> 
                <p>
                The coordinate lookup is done with the component name(Field #3) of the record AND 
                Field #5.</p>
                <p>
                Typical Data Table records:</p>
                <p>
                (1) t MainWindow GenericItem ShiftLeftDrag DragName</p>
                <p>
                #1 above will contain a GenericItem entry in the MainWindow section with 
                normal recognition information for it .  GenericItem will also have it's
                own section in the Application Map in which there will be an entry like:</p>
                <p>
                DragName="15,30,60,90"    OR
                DragName="Coords=15,30,60,90"</p>
                <p>
                This will tell RFT to locate the GenericItem Window object and SHIFT left drag 
                from coordinates 15,30 to 60,90.</p>
  	          </detailed_desc>
           </description>
             
       <engines>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20090630" >
  	           <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="GENERIC" />
           </engine>
           <engine name="Test Complete" 
				   since="20130305" 
				   tool="TestComplete" 
				   vendor="Automated QA">
			   <libraryInfo class="GENERIC" 
					name="GenericObjectFunctions" 
					sourcecode="GenericObjectFunctions.SVB">
			   </libraryInfo>
           </engine>
	       <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20150115">
	        <libraryInfo name="CFComponent" 
			  doc="org/safs/selenium/webdriver/CFComponent.html" 
			  sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
			  class="GENERIC" />
            </engine>
       </engines>
  
       <parameters>
        <parameter name="APPMAPSUBKEY" displayText="AppMapSubkey" optional="NO">
           <description>
              <short_desc> 
                  Name of the AppMap subkey to lookup or literal text to use for the SHIFT left mouse drag.
              </short_desc>
              <detailed_desc>
                  <p>Name of the AppMap subkey to lookup and use for the operation.
                  We expect the AppMap or literal text to contain the item in the format "x1,y1,x2,y2":</p>
                  <p><pre>
                  [GenericItem]
                  DragName="3,10,12,20"     OR
                  DragName="Coords=3,10,12,20"
                  </pre></p>
                  <p>
                  Both Fields #3 and #5 are used to locate the item in the App Map.
                  This routine does not specify an App Map so only the current Map
                  is used and it is expected to be valid.
                  </p>
              </detailed_desc>
           </description>
          </parameter>
       </parameters><examples>
  
          <example>
             <usage>T, WINDOW, WINDOW, SHIFTLEFTDRAG, AnObject</usage>
             <description>
                <short_desc> 
                 A SHIFT left mouse drag will be performed based on coordinates indicated by the AnObject reference in
                 the Application Map.
                </short_desc>
                <detailed_desc> 
                 Field  5 : TQ String. A reference identified in the Application Map identifying coordinates
                 on which to drag.
                 This example shows AnObject which will be found in the Application Map as a referenced item
                 in the WINDOW section.    
                </detailed_desc>
             </description>
          </example>
          <example>
             <usage>T, WINDOW, AnObject, SHIFTLEFTDRAG, ASubObject</usage>
             <description>
                <short_desc> 
                 A SHIFT left mouse drag will be performed based on coordinates indicated by the ASubObject reference
                 in the Application Map.
                </short_desc>
                <detailed_desc> 
                 Field  5 : TQ String. A reference identified in the Application Map identifying coordinates
                 on which to drag.
                 This example shows AnObject as a viable object in the WINDOW but that it also has its own
                 section in the Application Map which contains one or more named references like
                 ASubObject which are used for test.   
                </detailed_desc>
             </description>
          </example>
  
          <example>
             <usage>T, WINDOW, AnObject, SHIFTLEFTDRAG, "Coords=10;20;200;300"</usage>
             <description>
                <short_desc> 
                 A SHIFT left drag will be performed from point 10,20 to 200,300 relative to AnObject.
                </short_desc>
                <detailed_desc> 
                 Field  5 : TQ String. The item does not exist in the app map so will be 
                 treated as literal text.  Note we allow semi-colon delimited coordinates 
                 to support the case when commas are used as field delimiters and cannot be 
                 used to delimit the X and Y coordinates.
                </detailed_desc>
             </description>
          </example>
       </examples></keyword>
  
  <keyword name="CTRLSHIFTLEFTDRAG" 
           displayText="CtrlShiftLeftDrag" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
             
       <description>
              <short_desc> 
                A CTRL SHIFT left mouse drag is performed on the object based on the stored coordinates.
              </short_desc>
              <detailed_desc> 
                  <p>
                  The coordinate lookup is done with the component name(Field #3) of the record AND 
                  Field #5.</p>
                  <p>
                  Typical Data Table records:</p>
                  <p>
                  (1) t MainWindow GenericItem CtrlShiftLeftDrag DragName</p>
                  <p>
                  #1 above will contain a GenericItem entry in the MainWindow section with 
                  normal recognition information for it .  GenericItem will also have it's
                  own section in the Application Map in which there will be an entry like:</p>
                  <p>
                  DragName="15,30,60,90"    OR
                  DragName="Coords=15,30,60,90"</p>
                  <p>
                  This will tell RFT to locate the GenericItem Window object and CTRL SHIFT left mouse drag
                  from coordinates 15,30 to 60,90.</p>
  	          </detailed_desc>
           </description>
             
       <engines>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20090630" >
  	           <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="GENERIC" />
           </engine>
           <engine name="Test Complete" 
				   since="20130305" 
				   tool="TestComplete" 
				   vendor="Automated QA">
			   <libraryInfo class="GENERIC" 
					name="GenericObjectFunctions" 
					sourcecode="GenericObjectFunctions.SVB">
			   </libraryInfo>
           </engine>
	       <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20150115">
	        <libraryInfo name="CFComponent" 
			  doc="org/safs/selenium/webdriver/CFComponent.html" 
			  sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
			  class="GENERIC" />
            </engine>
       </engines>
  
       <parameters>
        <parameter name="APPMAPSUBKEY" displayText="AppMapSubkey" optional="NO">
           <description>
              <short_desc> 
                  Name of the AppMap subkey to lookup or literal text to use for the CTRL SHIFT left mouse drag.
              </short_desc>
              <detailed_desc>
                  <p>Name of the AppMap subkey to lookup and use for the CTRL SHIFT left mouse drag.
                  We expect the AppMap or literal text to contain the item in the format "x1,y1,x2,y2":</p>
                  <p><pre>
                  [GenericItem]
                  DragName="3,10,12,20"     OR
                  DragName="Coords=3,10,12,20"
                  </pre></p>
                  <p>
                  Both Fields #3 and #5 are used to locate the item in the App Map.
                  This routine does not specify an App Map so only the current Map
                  is used and it is expected to be valid.
                  </p>
              </detailed_desc>
           </description>
          </parameter>
       </parameters><examples>
  
          <example>
             <usage>T, WINDOW, WINDOW, CTRLSHIFTLEFTDRAG, AnObject</usage>
             <description>
                <short_desc> 
                 A CTRL SHIFT left mouse drag will be performed based on coordinates indicated by the AnObject reference in
                 the Application Map.
                </short_desc>
                <detailed_desc> 
                 Field  5 : TQ String. A reference identified in the Application Map identifying coordinates
                 on which to drag.
                 This example shows AnObject which will be found in the Application Map as a referenced item
                 in the WINDOW section.    
                </detailed_desc>
             </description>
          </example>
          <example>
             <usage>T, WINDOW, AnObject, CTRLSHIFTLEFTDRAG, ASubObject</usage>
             <description>
                <short_desc> 
                 A CTRL SHIFT left mouse drag will be performed based on coordinates indicated by the ASubObject reference
                 in the Application Map.
                </short_desc>
                <detailed_desc> 
                 Field  5 : TQ String. A reference identified in the Application Map identifying coordinates
                 on which to drag.
                 This example shows AnObject as a viable object in the WINDOW but that it also has its own
                 section in the Application Map which contains one or more named references like
                 ASubObject which are used for test.   
                </detailed_desc>
             </description>
          </example>
  
          <example>
             <usage>T, WINDOW, AnObject, CTRLSHIFTLEFTDRAG, "Coords=10;20;200;300"</usage>
             <description>
                <short_desc> 
                 A SHIFT left drag will be performed from point 10,20 to 200,300 relative to AnObject.
                </short_desc>
                <detailed_desc> 
                 Field  5 : TQ String. The item does not exist in the app map so will be 
                 treated as literal text.  Note we allow semi-colon delimited coordinates 
                 to support the case when commas are used as field delimiters and cannot be 
                 used to delimit the X and Y coordinates.
                </detailed_desc>
             </description>
          </example>
       </examples></keyword>
  
  <keyword name="CTRLLEFTDRAG" 
           displayText="CtrlLeftDrag" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
             
       <description>
              <short_desc> 
                  A CTRL left mouse drag is performed on the object based on the stored coordinates.
              </short_desc>
              <detailed_desc> 
                <p>
                The coordinate lookup is done with the component name(Field #3) of the record AND 
                Field #5.</p>
                <p>
                Typical Data Table records:</p>
                <p>
                (1) t MainWindow GenericItem CtrlLeftDrag DragName</p>
                <p>
                #1 above will contain a GenericItem entry in the MainWindow section with 
                normal recognition information for it .  GenericItem will also have it's
                own section in the Application Map in which there will be an entry like:</p>
                <p>
                DragName="15,30,60,90"    OR
                DragName="Coords=15,30,60,90"</p>
                <p>
                This will tell RFT to locate the GenericItem Window object and CTRL left drag 
                from coordinates 15,30 to 60,90.</p>
  	        </detailed_desc>
             </description>
             
         <engines>
             <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20090630" >
  	       <libraryInfo name="CFComponent" 
                              doc="org/safs/rational/CFComponent.html" 
                              sourcecode="org.safs.rational.CFComponent.java" 
                              class="GENERIC" />
             </engine>
           <engine name="Test Complete" 
				   since="20130305" 
				   tool="TestComplete" 
				   vendor="Automated QA">
			   <libraryInfo class="GENERIC" 
					name="GenericObjectFunctions" 
					sourcecode="GenericObjectFunctions.SVB">
			   </libraryInfo>
           </engine>
	       <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20150115">
	        <libraryInfo name="CFComponent" 
			  doc="org/safs/selenium/webdriver/CFComponent.html" 
			  sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
			  class="GENERIC" />
            </engine>
         </engines>
  
         <parameters>
          <parameter name="APPMAPSUBKEY" displayText="AppMapSubkey" optional="NO">
             <description>
                <short_desc> 
                  Name of the AppMap subkey to lookup or literal text to use for the CTRL left mouse drag.
                </short_desc>
                <detailed_desc>
                  <p>Name of the AppMap subkey to lookup and use for the CTRL left drag.
                  We expect the AppMap or literal text to contain the item in the format "x1,y1,x2,y2":</p>
                  <p><pre>
                  [GenericItem]
                  DragName="3,10,12,20"     OR
                  DragName="Coords=3,10,12,20"
                  </pre></p>
                  <p>
                  Both Fields #3 and #5 are used to locate the item in the App Map.
                  This routine does not specify an App Map so only the current Map
                  is used and it is expected to be valid.
                  </p>
                </detailed_desc>
             </description>
          </parameter>
       </parameters><examples>
  
          <example>
             <usage>T, WINDOW, WINDOW, CTRLLEFTDRAG, AnObject</usage>
             <description>
                <short_desc> 
                 A CTRL left mouse drag will be performed based on coordinates indicated by the AnObject reference in
                 the Application Map.
                </short_desc>
                <detailed_desc> 
                 Field  5 : TQ String. A reference identified in the Application Map identifying coordinates
                 on which to drag.
                 This example shows AnObject which will be found in the Application Map as a referenced item
                 in the WINDOW section.    
                </detailed_desc>
             </description>
          </example>
          <example>
             <usage>T, WINDOW, AnObject, CTRLLEFTDRAG, ASubObject</usage>
             <description>
                <short_desc> 
                 A CTRL left mouse drag will be performed based on coordinates indicated by the ASubObject reference
                 in the Application Map.
                </short_desc>
                <detailed_desc> 
                 Field  5 : TQ String. A reference identified in the Application Map identifying coordinates
                 on which to drag.
                 This example shows AnObject as a viable object in the WINDOW but that it also has its own
                 section in the Application Map which contains one or more named references like
                 ASubObject which are used for test.   
                </detailed_desc>
             </description>
          </example>
  
          <example>
             <usage>T, WINDOW, AnObject, CTRLLEFTDRAG, "Coords=10;20;200;300"</usage>
             <description>
                <short_desc> 
                 A SHIFT left drag will be performed from point 10,20 to 200,300 relative to AnObject.
                </short_desc>
                <detailed_desc> 
                 Field  5 : TQ String. The item does not exist in the app map so will be 
                 treated as literal text.  Note we allow semi-colon delimited coordinates 
                 to support the case when commas are used as field delimiters and cannot be 
                 used to delimit the X and Y coordinates.
                </detailed_desc>
             </description>
          </example>
       </examples></keyword>
  
  <keyword name="ALTLEFTDRAG" 
             displayText="AltLeftDrag" 
             deprecated="NO" 
             expectFailSupport="NO" 
             expectWarnSupport="NO">
             
         <description>
                <short_desc> 
                  An ALT left mouse drag is performed on the object based on the stored coordinates.
                </short_desc>
                <detailed_desc> 
                  <p>
                  The coordinate lookup is done with the component name(Field #3) of the record AND 
                  Field #5.</p>
                  <p>
                  Typical Data Table records:</p>
                  <p>
                  (1) t MainWindow GenericItem AltLeftDrag DragName</p>
                  <p>
                  #1 above will contain a GenericItem entry in the MainWindow section with 
                  normal recognition information for it .  GenericItem will also have it's
                  own section in the Application Map in which there will be an entry like:</p>
                  <p>
                  DragName="15,30,60,90"    OR
                  DragName="Coords=15,30,60,90"</p>
                  <p>
                  This will tell RFT to locate the GenericItem Window object and an ALT left mouse drag
                  from coordinates 15,30 to 60,90.</p>
  	        </detailed_desc>
             </description>
             
         <engines>
             <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20090630" >
  	       <libraryInfo name="CFComponent" 
                              doc="org/safs/rational/CFComponent.html" 
                              sourcecode="org.safs.rational.CFComponent.java" 
                              class="GENERIC" />
             </engine>
           <engine name="Test Complete" 
				   since="20130305" 
				   tool="TestComplete" 
				   vendor="Automated QA">
			   <libraryInfo class="GENERIC" 
					name="GenericObjectFunctions" 
					sourcecode="GenericObjectFunctions.SVB">
			   </libraryInfo>
           </engine>
	       <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20150115">
	        <libraryInfo name="CFComponent" 
			  doc="org/safs/selenium/webdriver/CFComponent.html" 
			  sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
			  class="GENERIC" />
            </engine>
         </engines>
  
         <parameters>
          <parameter name="APPMAPSUBKEY" displayText="AppMapSubkey" optional="NO">
             <description>
                <short_desc> 
                  Name of the AppMap subkey to lookup or literal text to use for an ALT left mouse drag.
                </short_desc>
                <detailed_desc>
                  <p>Name of the AppMap subkey to lookup and use for an ALT left mouse drag.
                  We expect the AppMap or literal text to contain the item in the format "x1,y1,x2,y2":</p>
                  <p><pre>
                  [GenericItem]
                  DragName="3,10,12,20"     OR
                  DragName="Coords=3,10,12,20"
                  </pre></p>
                  <p>
                  Both Fields #3 and #5 are used to locate the item in the App Map.
                  This routine does not specify an App Map so only the current Map
                  is used and it is expected to be valid.
                  </p>
                </detailed_desc>
             </description>
          </parameter>
       </parameters><examples>
  
          <example>
             <usage>T, WINDOW, WINDOW, ALTLEFTDRAG, AnObject</usage>
             <description>
                <short_desc> 
                 An ALT left mouse drag will be performed based on coordinates indicated by the AnObject reference in
                 the Application Map.
                </short_desc>
                <detailed_desc> 
                 Field  5 : TQ String. A reference identified in the Application Map identifying coordinates
                 on which to drag.
                 This example shows AnObject which will be found in the Application Map as a referenced item
                 in the WINDOW section.    
                </detailed_desc>
             </description>
          </example>
          <example>
             <usage>T, WINDOW, AnObject, ALTLEFTDRAG, ASubObject</usage>
             <description>
                <short_desc> 
                 An ALT left mouse drag will be performed based on coordinates indicated by the ASubObject reference
                 in the Application Map.
                </short_desc>
                <detailed_desc> 
                 Field  5 : TQ String. A reference identified in the Application Map identifying coordinates
                 on which to drag.
                 This example shows AnObject as a viable object in the WINDOW but that it also has its own
                 section in the Application Map which contains one or more named references like
                 ASubObject which are used for test.   
                </detailed_desc>
             </description>
          </example>
  
          <example>
             <usage>T, WINDOW, AnObject, ALTLEFTDRAG, "Coords=10;20;200;300"</usage>
             <description>
                <short_desc> 
                 An ALT left mouse drag will be performed from point 10,20 to 200,300 relative to AnObject.
                </short_desc>
                <detailed_desc> 
                 Field  5 : TQ String. The item does not exist in the app map so will be 
                 treated as literal text.  Note we allow semi-colon delimited coordinates 
                 to support the case when commas are used as field delimiters and cannot be 
                 used to delimit the X and Y coordinates.
                </detailed_desc>
             </description>
          </example>
       </examples></keyword>
  
  <keyword name="CTRLALTLEFTDRAG" 
             displayText="CtrlAltLeftDrag" 
             deprecated="NO" 
             expectFailSupport="NO" 
             expectWarnSupport="NO">
             
         <description>
                <short_desc> 
                  CTRL ALT left mouse drag is performed on the object based on the stored coordinates.
                </short_desc>
                <detailed_desc> 
                  <p>
                  The coordinate lookup is done with the component name(Field #3) of the record AND 
                  Field #5.</p>
                  <p>
                  Typical Data Table records:</p>
                  <p>
                  (1) t MainWindow GenericItem CtrlAltLeftDrag DragName</p>
                  <p>
                  #1 above will contain a GenericItem entry in the MainWindow section with 
                  normal recognition information for it .  GenericItem will also have it's
                  own section in the Application Map in which there will be an entry like:</p>
                  <p>
                  DragName="15,30,60,90"    OR
                  DragName="Coords=15,30,60,90"</p>
                  <p>
                  This will tell RFT to locate the GenericItem Window object and CTRL ALT left mouse drag
                  from coordinates 15,30 to 60,90.</p>
  	        </detailed_desc>
             </description>
             
         <engines>
             <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20090630" >
  	       <libraryInfo name="CFComponent" 
                              doc="org/safs/rational/CFComponent.html" 
                              sourcecode="org.safs.rational.CFComponent.java" 
                              class="GENERIC" />
             </engine>
           <engine name="Test Complete" 
				   since="20130305" 
				   tool="TestComplete" 
				   vendor="Automated QA">
			   <libraryInfo class="GENERIC" 
					name="GenericObjectFunctions" 
					sourcecode="GenericObjectFunctions.SVB">
			   </libraryInfo>
           </engine>
	       <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20150115">
	        <libraryInfo name="CFComponent" 
			  doc="org/safs/selenium/webdriver/CFComponent.html" 
			  sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
			  class="GENERIC" />
            </engine>
         </engines>
  
         <parameters>
          <parameter name="APPMAPSUBKEY" displayText="AppMapSubkey" optional="NO">
             <description>
                <short_desc> 
                  Name of the AppMap subkey to lookup or literal text to use for the CTRL ALT left mouse drag.
                </short_desc>
                <detailed_desc>
                  <p>Name of the AppMap subkey to lookup and use for the CTRL ALT left mouse drag.
                  We expect the AppMap or literal text to contain the item in the format "x1,y1,x2,y2":</p>
                  <p><pre>
                  [GenericItem]
                  DragName="3,10,12,20"     OR
                  DragName="Coords=3,10,12,20"
                  </pre></p>
                  <p>
                  Both Fields #3 and #5 are used to locate the item in the App Map.
                  This routine does not specify an App Map so only the current Map
                  is used and it is expected to be valid.
                  </p>
                </detailed_desc>
             </description>
          </parameter>
       </parameters><examples>
  
          <example>
             <usage>T, WINDOW, WINDOW, CTRLALTLEFTDRAG, AnObject</usage>
             <description>
                <short_desc> 
                 A CTRL ALT left mouse drag will be performed based on coordinates indicated by the AnObject reference in
                 the Application Map.
                </short_desc>
                <detailed_desc> 
                 Field  5 : TQ String. A reference identified in the Application Map identifying coordinates
                 on which to drag.
                 This example shows AnObject which will be found in the Application Map as a referenced item
                 in the WINDOW section.    
                </detailed_desc>
             </description>
          </example>
          <example>
             <usage>T, WINDOW, AnObject, CTRLALTLEFTDRAG, ASubObject</usage>
             <description>
                <short_desc> 
                 A CTRL ALT left mouse drag will be performed based on coordinates indicated by the ASubObject reference
                 in the Application Map.
                </short_desc>
                <detailed_desc> 
                 Field  5 : TQ String. A reference identified in the Application Map identifying coordinates
                 on which to drag.
                 This example shows AnObject as a viable object in the WINDOW but that it also has its own
                 section in the Application Map which contains one or more named references like
                 ASubObject which are used for test.   
                </detailed_desc>
             </description>
          </example>
  
          <example>
             <usage>T, WINDOW, AnObject, CTRLALTLEFTDRAG, "Coords=10;20;200;300"</usage>
             <description>
                <short_desc> 
                 A CTRL ALT left mouse drag will be performed from point 10,20 to 200,300 relative to AnObject.
                </short_desc>
                <detailed_desc> 
                 Field  5 : TQ String. The item does not exist in the app map so will be 
                 treated as literal text.  Note we allow semi-colon delimited coordinates 
                 to support the case when commas are used as field delimiters and cannot be 
                 used to delimit the X and Y coordinates.
                </detailed_desc>
             </description>
          </example>
       </examples></keyword>
</keywords>
</keyword_library>




  

