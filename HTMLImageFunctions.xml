<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE keyword_library SYSTEM "keyword_library.dtd">
<keyword_library>
    
    <libraryType type="COMPONENT" />
    
    <libraryInfo name="HTMLImageFunctions" 
                 doc="HTMLImageFunctions.htm" 
                 sourcecode="HTMLImageFunctions.sbl" 
                 chainTo="HTMLFunctions"
                 class="HTMLIMAGE">

        <description>
           <short_desc> 
              Actions for working with HTMLImage objects
           </short_desc>
        </description>

    </libraryInfo>
    <runtime platform="Windows" engine="Robot" version="2002" />
    <keywords>

    <keyword name="CLICK" 
             displayText="Click" 
             deprecated="YES" 
             deprecatedFor="ClickArea" 
             expectFailSupport="NO" 
             expectWarnSupport="NO">
             
         <description>
              <short_desc> 
                 Command deprecated in favor of ClickArea.
              </short_desc>
              <detailed_desc> 
                Attempts to perform a standard Click on an HTMLImage on a webpage. This 
                functionality is already provided by GenericObject CLICK.
                <p>
                We can optionally click on a particular area of a client-side or 
                server-side image rather than a generic click (Coords=1,1).  This part 
                of the functionality should be implemented in ClickArea instead.</p>
                <p>
                The image area lookup is done with the component name AND an additional
                app map reference provided in Field #5.</p>
                <p>
                Typical Data Table records:</p>
                <p>
                (1) t BrowserWin AnImage Click<br/>
                (2) t BrowserWin AnImage Click AMappedRegion</p>
                <p>
                #1 above should merely click in the top-left corner of the image.</p>
                <p>
                #2 above will contain a AnImage entry in the MainWindow section with 
                normal recognition information for it.  AnImage will also have it's
                own section in the Application Map in which there will be entries
                defining specific indexed or named regions for the image.</p>
                <p>
                Examples:</p>
                <pre>
                [BrowserWin]
                BrowserWin=WindowTag=WEBBrowser
                AnImage=Type=HTMLFrame;HTMLID=top;Type=HTMLImage;Index=1
                ...
                [AnImage]
                AMappdedRegion=Coords=10,10
                ANamedRegion=AreaName=TechSupport
                AnIndexedRegion=AreaIndex=2
                AnotherRegion=AreaID=Contact
                </pre>
              </detailed_desc>
           </description>
           
       <engines>
           <engine name="WinRunner" 
	   			       since="20020823" 
	   			       tool="WinRunner" 
	   			       vendor="Mercury Interactive">
	   		       <libraryInfo class="HTMLIMAGE" 
	   					name="HTMLImageFunctions" 
	   					sourcecode="HTMLImageFunctions">
	   		       </libraryInfo>
           </engine>
       </engines>

       <parameters>
        <parameter name="APPMAPSUBKEY" displayText="AppMapSubkey" optional="YES">
           <description>
              <short_desc> 
                Name of the AppMap subkey to lookup and use for the click.
              </short_desc>
              <detailed_desc>
                <p>(OPTIONAL) Name of the AppMap subkey to lookup and use for the click.
                The AppMap can contain the item in any of the following formats:</p>
                <pre>
                [AnImage]
                AMappdedRegion=Coords=10,10
                ANamedRegion=AreaName=TechSupport
                AnIndexedRegion=AreaIndex=2
                AnotherRegion=AreaID=Contact
                </pre><p>
                Any valid content used with the HTMLImage Click command can be part 
                of this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
              </detailed_desc>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WebBrowser, SiteMapImage, CLICK, Center</usage>
           <description>
              <short_desc> 
                A single-click is performed on the SiteMapImage based on the reference Center in the Application Map
              </short_desc>
              <detailed_desc> 
                <p>Field  5 : TQ String.  A reference identified in the Application Map identifying 
                where to click.</p>
                <pre>
                [AnImage]
                Center=Coords=10,10
                ANamedRegion=AreaName=TechSupport
                AnIndexedRegion=AreaIndex=2
                AnotherRegion=AreaID=Contact
                </pre>
              </detailed_desc>
           </description>
        </example>
     </examples></keyword>
         
    <keyword name="CLICKAREA" 
             displayText="ClickArea" 
             deprecated="NO" 
             expectFailSupport="NO" 
             expectWarnSupport="NO">
             
         <description>
              <short_desc> 
                 Attempts to perform a Click on a mapped region of an Image (on a webpage).
              </short_desc>
              <detailed_desc> 
                RobotJ: The initial implementation actually does this in reverse.  It 
                expects that the specified object resolves to the HTML.AREA object defined 
                in the HTML.MAP instead of simply specifying the Image and then an area.  
                The RobotJ implementation then attempts to locate the Doc and Image that 
                use the defined area and click on it.<br/>
                No Field #5 parameter is used or needed in this implementation.
                <p>
                Future implementations should also\instead support the HTML.IMAGE object 
                as the target and the area to click as a Field #5 parameter.
                The parameter would optionally define an App Map reference or could be used 
                as a literal value.  App Map references might appear as below:
		</p>
                <pre>
                Examples:

                [BrowserWin]
                AnImage=Type=HTMLFrame;HTMLID=top;Type=HTMLImage;Index=1
                ...                 
                [AnImage]
                ANamedRegion=AreaName=TechSupport
                AnIndexedRegion=AreaIndex=2
                AnotherRegion=AreaID=Contact
                </pre>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20051014" >
	       <libraryInfo name="CFHtmlImage" 
                            doc="org/safs/rational/CFHtmlImage.html" 
                            sourcecode="org.safs.rational.CFHtmlImage.java" 
                            class="HTMLIMAGE" />
           </engine>
       </engines>

       <parameters>
        <parameter name="APPMAPSUBKEY" displayText="AppMapSubkey" optional="YES">
           <description>
              <short_desc> 
                (FUTURE) Name of the AppMap subkey to lookup and use for the image area click.
              </short_desc>
              <detailed_desc>
                (FUTURE) Not used by RobotJ at this time.
                <p>
                The AppMap could contain the item in any of the following formats:
                </p><pre>
                [AnImage]
                AMappdedRegion=Coords=10,10
                ANamedRegion=AreaName=TechSupport
                AnIndexedRegion=AreaIndex=2
                AnotherRegion=AreaID=Contact
                </pre><p>
                Both Fields #3 and #5 would be used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                would be used and it is expected to be valid.</p>
              </detailed_desc>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WebBrowser, ADefinedArea, ClickArea</usage>
           <description>
              <short_desc> 
                A single-click is performed on the the first Image using the defined HTML.AREA.
              </short_desc>
           </description>
        </example>
     </examples></keyword>
     
  <keyword name="COMPARESTOREDPROPERTIES" 
           displayText="CompareStoredProperties" 
           deprecated="YES" 
           deprecatedFor="GenericObjectFunctions.CompareStoredProperties" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                 Performs a HTMLImageVP CompareProperties on an HTMLImage object.
              </short_desc>
              <detailed_desc> 
                <p>Performs a HTMLImageVP CompareProperties on an HTMLImage object.</p>
                <p>
                THE BENCHMARK VP MUST ALREADY EXIST AND BE AN ASSET OF THE CURRENTLY
                RUNNING SCRIPT.</p>
                <p>
                Modified VP parameter information can be added to the standard
                VP=VPName by including the VPName reference in the application map
                in a section defined for the HTMLImage.  If this is done, the value 
                retrieved from the application map will be appended to VP=VPName.
                The required semicolon for this append will be provided by this routine.</p>
                <p>
                Example 1: Perform a standard HTMLImage CompareProperties.  To perform
                a basic CompareProperties the name "StoredVP" will not exist in the app map:</p>
                <p>
                The Step File call:</p>
                <p>
                BrowserWindow AnHTMLImage CompareStoredProperties StoredVP</p>
                <p>
                This will produce a CompareProperties VP with "VP=StoredVP;Wait=2,10".</p>
                <p>
                The StoredVP baseline MUST already exist as an asset of the
                currently running script.</p>
                <p>  
                Example 2: Perform a HTMLImage CompareProperties providing addition 
                parameter information (such as ExpectedResult=FAIL).  To do this the
                HTMLImage object must have its own section in the app map and an item
                with the same name as the StoredVP.  The value of that item will be
                appended to the standard VP argument with a semicolon.</p>
                <p>
                Part of App Map:</p>
                <pre> 
                [BrowserWindow]
                BrowserWindow=WindowTag=WEBBrowser
                AnHTMLImage=&lt;snipped for brevity&gt;;\;Type=HTMLImage;Index=1
                ...
                [AnHTMLImage]
                StoredVP=ExpectedResult=FAIL;Wait=3,30
                </pre><p>
                The Step File call:</p>
                <p>
                BrowserWindow AnHTMLImage CompareStoredProperties StoredVP</p>
                <p> 
                This will produce a CompareProperties VP with all the parameters appended
                like this: "VP=StoredVP;ExpectedResult=FAIL;Wait=3,30".
                NOTE:When stored parameters are found in the app map then the default Wait= 
                parameter used in the standard compare is no longer provided.  If you still 
                need a Wait= parameter, then it must be included in the stored parameters.</p>
                <p>
                The StoredVP baseline MUST already exist as an asset of the
                currently running script.</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine name="WinRunner" 
	   	   			       since="20020823" 
	   	   			       tool="WinRunner" 
	   	   			       vendor="Mercury Interactive">
	   	   		       <libraryInfo class="HTMLIMAGE" 
	   	   					name="HTMLImageFunctions" 
	   	   					sourcecode="HTMLImageFunctions">
	   	   		       </libraryInfo>
           </engine>
       </engines>

       <parameters>
        <parameter name="VPASSET" displayText="VPAsset" optional="NO">
           <description>
              <short_desc> 
                Name of the pre-existing VP asset stored in the currently running script.
              </short_desc>
              <detailed_desc>
                Name of the pre-existing VP asset stored in the currently running script.
                If the name also exists in the app map under the component then the
                additional stored parameters are appended to the VP call.
              </detailed_desc>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WebBrowser, SiteMapImage, COMPARESTOREDPROPERTIES, "AStoredVP"</usage>
           <description>
              <short_desc> 
                This action performs a CompareProperties on the WebImage object against "AStoredVP".
              </short_desc>
              <detailed_desc> 
                Field  5 : TQ String. The name of a stored CompareProperties VP which must
                exist as an asset of the currently running script.
                You can also specify additional VP parameters by including a reference
                in the application map.
                [SiteImageMap]
                AStoredVP=ExpectedResult=FAIL;Wait=3,30
              </detailed_desc>
           </description>
        </example>
     </examples></keyword>
     
  <keyword name="COMPARESTOREDDATA" 
           displayText="CompareStoredData" 
           deprecated="YES" 
           deprecatedFor="GenericObjectFunctions.CompareStoredData" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                Performs a HTMLImageVP CompareData on an HTMLImage object.
              </short_desc>
              <detailed_desc> 
                <p>Performs a HTMLImageVP CompareData on an HTMLImage object.</p>
                <p>
                THE BENCHMARK VP MUST ALREADY EXIST AND BE AN ASSET OF THE CURRENTLY
                RUNNING SCRIPT.</p>
                <p>
                Modified VP parameter information can be added to the standard
                VP=VPName by including the VPName reference in the application map
                in a section defined for the HTMLImage.  If this is done, the value 
                retrieved from the application map will be appended to VP=VPName.
                The required semicolon for this append will be provided by this routine.</p>
                <p>
                Example 1: Perform a standard HTMLImage CompareData.  To perform
                a basic CompareData the name "StoredVP" will not exist in the app map:</p>
                <p>
                The Step File call:</p>
                <p> 
                BrowserWindow AnHTMLImage CompareStoredData StoredVP</p>
                <p> 
                This will produce a CompareData VP with "VP=StoredVP;Wait=2,10".</p>
                <p>
                The StoredVP baseline MUST already exist as an asset of the
                currently running script.</p>
                <p>
                Example 2: Perform a HTMLImage CompareData providing addition 
                parameter information (such as ExpectedResult=FAIL).  To do this the
                HTMLImage object must have its own section in the app map and an item
                with the same name as the StoredVP.  The value of that item will be
                appended to the standard VP argument with a semicolon.</p>
                <p>
                Part of App Map:</p>
                <pre>
                [BrowserWindow]
                BrowserWindow=WindowTag=WEBBrowser
                AnHTMLImage=&lt;snipped for brevity&gt;;\;Type=HTMLImage;Index=1
                ...
                [AnHTMLImage]
                StoredVP=ExpectedResult=FAIL;Wait=3,30
                </pre><p>
                The Step File call:</p>
                <p>
                BrowserWindow AnHTMLImage CompareStoredData StoredVP</p>
                <p>
                This will produce a CompareData VP with all the parameters appended
                like this: "VP=StoredVP;ExpectedResult=FAIL;Wait=3,30".
                NOTE:When stored parameters are found in the app map then the default Wait= 
                parameter used in the standard compare is no longer provided.  If you still 
                need a Wait= parameter, then it must be included in the stored parameters.</p>
                <p>
                The StoredVP baseline MUST already exist as an asset of the
                currently running script.</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine name="WinRunner" 
	   	   			       since="20020823" 
	   	   			       tool="WinRunner" 
	   	   			       vendor="Mercury Interactive">
	   	   		       <libraryInfo class="HTMLIMAGE" 
	   	   					name="HTMLImageFunctions" 
	   	   					sourcecode="HTMLImageFunctions">
	   	   		       </libraryInfo>
           </engine>
       </engines>

       <parameters>
        <parameter name="VPASSET" displayText="VPAsset" optional="NO">
           <description>
              <short_desc> 
                Name of the pre-existing VP asset stored in the currently running script.
              </short_desc>
              <detailed_desc>
                Name of the pre-existing VP asset stored in the currently running script.
                If the name also exists in the app map under the component then the
                additional stored parameters are appended to the VP call.
              </detailed_desc>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WebBrowser, SiteMapImage, COMPARESTOREDDATA, "AStoredVP"</usage>
           <description>
              <short_desc> 
                This action compares stored data on the SiteMapImage object against "AStoredVP".
              </short_desc>
              <detailed_desc> 
                <p>Field  5 : TQ String. The name of a stored CompareData VP which must exist
                as an asset of the currently running script. 
                You can also specify additional VP parameters by including a reference
                in the application map.</p>
                <p>[URLLink]</p>
                <p>AStoredVP=ExpectedResult=FAIL;Wait=3,30</p>
              </detailed_desc>
           </description>
        </example>
     </examples></keyword>
     
  <keyword name="VERIFYHTMLIMAGE" 
           displayText="VerifyHTMLImage" 
           expectFailSupport="NO" 
           expectWarnSupport="YES" 
           deprecated="NO">
           
       <description>
              <short_desc> 
                 Attempts to verify an HTMLImage on a webpage to a benchmark file.
              </short_desc>
              <detailed_desc> 
                <p>Attempts to perform a right click - save image/picture as command 
                on the specified image and then run a binary file compare of the
                file to a benchmark file.</p>
                <p>You can also optionally specify an x,y offset into 
                the image for the right click to occur.</p>
                <p>
             The command may produce a WARNING if a diff tool for which we 
             have no means to verify the results is configured for use.  
             Consequently, if these warnings are expected, the user can use the 
             "TW" test record type to avoid issuing these warnings.</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" 
                   expectFailSupport="NO" 
                   expectWarnSupport="YES" >
	       		<libraryInfo name="HTMLImageFunctions" 
                            doc="HTMLImageFunctions.htm" 
                            sourcecode="HTMLImageFunctions.sbl" 
                            class="HTMLIMAGE" />
           </engine>          
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20080401" 
           		   expectFailSupport="NO" expectWarnSupport="NO" >
	       		<libraryInfo name="CFHtmlImage" 
                            doc="org/safs/rational/CFHtmlImage.html" 
                            sourcecode="org.safs.rational.CFHtmlImage.java" 
                            class="HTMLIMAGE" />
           </engine>
       </engines>

       <parameters>
        <parameter name="BENCHMARKFILE" displayText="BenchmarkFile" optional="NO">
           <description>
              <short_desc> 
                Name of the Benchmark image file.
              </short_desc>
              <detailed_desc>
                <p>(REQUIRED) Name of the file to use for the image save-as command
                and the benchmark file.  This can also be a full or relative path 
                suitable for <a href="FileUtilities.htm#findsqafile">FindSQAFile</a>.  
                If no full path or relative path is given then the benchmark file is 
                expected to be found in the project's Datapool\Bench directory.</p>
                <p>The captured image will be stored in the project's Datapool\Test
                project's Datapool/Test directory.  Any comparison difference will 
                be stored in the project's Datapool\Dif directory.</p>
              </detailed_desc>
           </description>
        </parameter>
        <parameter name="COORDS" displayText="Coords" optional="YES" default="3,3">
           <description>
              <short_desc> 
                The explicit coordinates ("x,y") or an App Map reference to 
                pre-defined coordinates.
              </short_desc>
              <detailed_desc>
                We first check to see if the field contains a reference to an 
                App Map item.  If that cannot be found, we will assume the field 
                contains explicit coordinates.
                <p>We expect the coordinates in the format "x,y":</p>
                <pre>
                [MyImage]
                TopLeft=10,10
                Center=Coords=25,25 
                </pre><p>
                The results from the lookup are appended to the "Coords=" string 
                used by the Click command in Robot (if necessary).</p>
                <p>
                Both Fields #3(component name) and #6(coords reference name) 
                are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
                <p>If this parameter is not provided, we will use default 
                coordinates of 3,3 for the right click.</p>
              </detailed_desc>
           </description>
        </parameter>
     </parameters><examples>
        <example>
           <usage>T, WebBrowser, myImage, VerifHTMLImage, ^bench=myImage.jpg</usage>
           <description>
              <short_desc> 
                 Attempts to verify myImage on the webpage to the benchmark file myImage.jpg.
              </short_desc>
              <detailed_desc> 
                <p>Attempts to perform a right click at the default image coordinates,  
                use the 'save as' menuitem on myImage, and then run a binary file compare of the
                file to a benchmark file myImage.jpg.</p>
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WebBrowser, myImage, VerifHTMLImage, ^bench=myImage.jpg, ^rightclick="Coords=15,15"</usage>
           <description>
              <short_desc> 
                 Attempts to verify myImage on the webpage to the benchmark file myImage.jpg.
              </short_desc>
              <detailed_desc> 
                <p>Attempts to perform a right click at the provided image coordinates, 
                use the 'save as' menuitem on myImage, then run a binary file compare of the
                file to a benchmark file myImage.jpg.</p>
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, WebBrowser, myImage, VerifHTMLImage, ^bench=myImage.jpg, ^rightclick=TopLeft</usage>
           <description>
              <short_desc> 
                 Attempts to verify myImage on the webpage to the benchmark file myImage.jpg.
              </short_desc>
              <detailed_desc> 
                <p>Attempts to perform a right click at the image coordinates found in 
                the provided App Map key "TopLeft" under [MyImage].  It will then  
                use the 'save as' menuitem on myImage, then run a binary file compare of the
                file to a benchmark file myImage.jpg.</p>
              </detailed_desc>
           </description>
        </example>
     </examples></keyword>
     
  <keyword name="SAVEHTMLIMAGE" 
           displayText="SaveHTMLImage" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                 Attempts to Save an HTMLImage on a webpage.
              </short_desc>
              <detailed_desc> 
                <p>Attempts to perform a right click - save image/picture as command 
                on the specified image.</p>
                <p>You can also optionally specify an x,y offset into 
                the image for the right click to occur.</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" >
	       <libraryInfo name="HTMLImageFunctions" 
                            doc="HTMLImageFunctions.htm" 
                            sourcecode="HTMLImageFunctions.sbl" 
                            class="HTMLIMAGE" />
           </engine>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20080401" 
           		   expectFailSupport="NO" expectWarnSupport="NO" >
	       		<libraryInfo name="CFHtmlImage" 
                            doc="org/safs/rational/CFHtmlImage.html" 
                            sourcecode="org.safs.rational.CFHtmlImage.java" 
                            class="HTMLIMAGE" />
           </engine>           
       </engines>

       <parameters>
        <parameter name="FILENAME" displayText="FileName" optional="NO">
           <description>
              <short_desc> 
                Name of the image file.
              </short_desc>
              <detailed_desc>
                <p>(Required) Name of the file to use for the image save-as command.
                  This can be a full or relative path or a simple filename.
                  A relative path will be stored relative to the Project's root 
                  directory.  If a simple filename is provided it will be stored 
                  in the Project's Datapool\Test directory.</p>
              </detailed_desc>
           </description>
        </parameter>
        <parameter name="COORDS" displayText="Coords" optional="YES" default="3,3">
           <description>
              <short_desc> 
                The explicit coordinates ("x,y"), or an App Map reference to 
                pre-defined coordinates.
              </short_desc>
              <detailed_desc>
                We first check to see if the field contains a reference to an 
                App Map item.  If that cannot be found, we will assume the field 
                contains explicit coordinates.
                <p>We expect the coordinates in the format "x,y":</p>
                <pre>
                [MyImage]
                TopRight=50,10
                Center=25,25
                BottomRight=Coords=50,40 
                </pre><p>
                The results from the lookup are appended to the "Coords=" string 
                used by the Click command in Robot (if necessary).</p>
                <p>
                Both Fields #3(component name) and #6(coords reference name) 
                are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
                <p>If this parameter is not provided, we will use default 
                coordinates of 3,3 for the right click.</p>
              </detailed_desc>
           </description>
        </parameter>
     </parameters><examples>
        <example>
           <usage>T, WebBrowser, myImage, SaveHTMLImage, ^filename=myImage.jpg</usage>
           <description>
              <short_desc> 
                 Attempts to Save myImage on the webpage.
              </short_desc>
              <detailed_desc> 
                <p>Attempts to perform a right click at the default image coordinates,  
                use the 'save as' menuitem on myImage.  The image is stored as 
                "myImage.jpg" in the project's Datapool\Test directory.</p>
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T  WebBrowser  myImage  SaveHTMLImage  ^filename=c:\images\myImage.jpg ^xy="25,25"</usage>
           <description>
              <short_desc> 
                 Attempts to Save myImage on the webpage.
              </short_desc>
              <detailed_desc> 
                <p>Attempts to perform a right click at provided image coordinates,  
                use the 'save as' menuitem on myImage.  The image is stored as 
                "myImage.jpg" in the c:\images directory.</p>
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T  WebBrowser  myImage  SaveHTMLImage  ^filename=images\myImage.jpg  ^xy="Coords=25,25"</usage>
           <description>
              <short_desc> 
                 Attempts to Save myImage on the webpage.
              </short_desc>
              <detailed_desc> 
                <p>Attempts to perform a right click at the provided image coordinates,  
                use the 'save as' menuitem on myImage.  The image is stored as 
                "myImage.jpg" in the &lt;project&gt;\images directory.</p>
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T  WebBrowser  myImage  SaveHTMLImage  ^filename=images\myImage.jpg  ^xy="TopRight"</usage>
           <description>
              <short_desc> 
                 Attempts to Save myImage on the webpage.
              </short_desc>
              <detailed_desc> 
                <p>Attempts to perform a right click at "TopRight" coordinates defined in the app map,  
                Uses the 'save as' menuitem on the myImage popup menu.  The image is stored as 
                "myImage.jpg" in the &lt;project&gt;\images directory.</p>
              </detailed_desc>
           </description>
        </example>
     </examples></keyword>
     
</keywords>
</keyword_library>
