<!-- XSLJavaDriverCommandClass.XSL
     
     Most commonly used in conjunction with:
     
         XSLJavaCommandModelPrep.BAT
         XSLJavaCommandModelPrep.XSL
         XSLQuickReference.XML
         
         which invokes:
         
         XSLJavaDriverCommandsClass.XSL
         XSLDriverCommands.XML
         
     This file is intended to process the keyword XML that documents all the 
     Driver Commands libraries defined for SAFS Engines.
     
     http://safsdev.sourceforge.net/sqabasic2000/RRAFSReference.htm
    
     The output of this transformation is Java sourcecode.  The sourcecode when 
     compiled will provide convenient static fields for all known DriverCommand libraries and keywords 
     in a single Class.
     
     Example invocation:
     
     msxsl.exe XSLDriverCommands.xml XSLJavaDriverCommandClass.xsl -o org\safs\model\commands\DriverCommands.java
     
     ********************************************************************** -->
     
<xsl:stylesheet version='1.0'
		xmlns:xsl='http://www.w3.org/1999/XSL/Transform'
		xmlns='http://www.w3.org/TR/REC-html40'>
    
    <xsl:output method="text" encoding="UTF-8" />
    <!-- xsl:include href="XSLJavaCommonFunctions.XSL"/ -->
    <xsl:include href="XSLJavaCommandModel.XSL"/>


<!-- ************************************************************************** 
     match="/"
     
     Output the class header and package information then begin processing each 
     DriverCommand //FILE href to create the static DDDriverXXX fields. 
     
     Example:
     
     /****
      * Copyright ...
      ****
     package org.safs.model.commands;
     
     public class DriverCommands
    
     ********************************************************************** -->

<xsl:template match="/" >

        <xsl:text>&#xA;/******************************************************************************</xsl:text>
        <xsl:text>&#xA; * DriverCommands.java</xsl:text>
        <xsl:text>&#xA; *</xsl:text>
        <xsl:text>&#xA; * Copyright (C) SAS Institute, All rights reserved.</xsl:text>
        <xsl:text>&#xA; * General Public License: https://www.gnu.org/licenses/gpl-3.0.en.html</xsl:text>
        <xsl:text>&#xA; *</xsl:text>
        <xsl:text>&#xA; * This program is free software: you can redistribute it and/or modify</xsl:text>
        <xsl:text>&#xA; * it under the terms of the GNU Lesser General Public License as published by</xsl:text>  
        <xsl:text>&#xA; * the Free Software Foundation, either version 3 of the License, or</xsl:text>
        <xsl:text>&#xA; * (at your option) any later version.</xsl:text> 
        <xsl:text>&#xA; *</xsl:text>
        <xsl:text>&#xA; * This program is distributed in the hope that it will be useful,</xsl:text>  
        <xsl:text>&#xA; * but WITHOUT ANY WARRANTY; without even the implied warranty of</xsl:text>
        <xsl:text>&#xA; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</xsl:text>
        <xsl:text>&#xA; * GNU Lesser General Public License for more details.</xsl:text>
        <xsl:text>&#xA; *</xsl:text>
        <xsl:text>&#xA; * !!! DO NOT EDIT THIS FILE !!!</xsl:text>
        <xsl:text>&#xA; * This file is automatically generated from XML source.  Any changes you make </xsl:text>
        <xsl:text>&#xA; * here will be erased the next time the file is generated.</xsl:text>
        <xsl:text>&#xA; *</xsl:text>
        <xsl:text>&#xA; * The following assets are needed to generate this file:</xsl:text>
        <xsl:text>&#xA; *</xsl:text>
        <xsl:text>&#xA; *   XSLDriverCommands.xml</xsl:text>
        <xsl:text>&#xA; *   keyword_library.dtd</xsl:text>
        <xsl:text>&#xA; *   XSLJavaCommonFunctions.xsl</xsl:text>
        <xsl:text>&#xA; *   XSLJavaDriverCommandsClass.xsl</xsl:text>
        <xsl:text>&#xA; *</xsl:text>
        <xsl:text>&#xA; * Example invocation to generate:</xsl:text>     
        <xsl:text>&#xA; *</xsl:text>
        <xsl:text>&#xA; *   msxsl.exe XSLDriverCommands.xml XSLJavaDriverCommandsClass.xsl -o DriverCommands.java</xsl:text>
        <xsl:text>&#xA; *</xsl:text>
        <xsl:text>&#xA; ******************************************************************************/ </xsl:text>
        <xsl:text>&#xA;package org.safs.model.commands;&#xA;&#xA;</xsl:text>
        <xsl:text>&#xA;import org.safs.model.DriverCommand;&#xA;&#xA;</xsl:text>
        <xsl:text>&#xA;public class DriverCommands {&#xA;</xsl:text>

        <!-- ***************************************************************************************
        Generate a public Constant for each DriverCommand keyword supported.
        This enables the developer to see all Driver Command keywords in a single location.
        ****************************************************************************************** -->
        <xsl:for-each select="//file" >
	    <xsl:variable name="library" select="document(@href)" />
            <xsl:apply-templates select="$library/keyword_library/keywords" mode="StaticFields" />
        </xsl:for-each>    

        <xsl:text>&#xA;&#xA;</xsl:text>
        
        <xsl:text>&#xA;    /*****************</xsl:text>
        <xsl:text>&#xA;    Private Constructor</xsl:text>
        <xsl:text>&#xA;    Static class needing no instantiation.</xsl:text>
        <xsl:text>&#xA;    ****************/</xsl:text>
        <xsl:text>&#xA;    private DriverCommands () {}&#xA;&#xA;</xsl:text>
        
        <!-- ***************************************************************************************
        Generate a public field holding a reference to each type of DriverCommand library supported.
        This enables the developer to see filtered DriverCommands according to the type or library 
        that implements them.
        ****************************************************************************************** -->
        <xsl:for-each select="//file" >
	    <xsl:variable name="library" select="document(@href)" />
            <xsl:apply-templates select="$library/keyword_library/libraryInfo" mode="StaticClass" />
        </xsl:for-each>    

        <!-- ***************************************************************************************
        Generate a public method for every DriverCommand supported.
        This enables the developer to see ALL the DriverCommands in a single (sorted?) list.
        ****************************************************************************************** -->
        <xsl:for-each select="//file" >
	    <xsl:variable name="library" select="document(@href)" />
	    <xsl:apply-templates select="$library/keyword_library/keywords" mode="DriverCommand"/>
        </xsl:for-each>    

        <xsl:text>&#xA;}&#xA;</xsl:text>        
    </xsl:template>       
    
</xsl:stylesheet>
