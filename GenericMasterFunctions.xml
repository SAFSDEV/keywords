<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE keyword_library SYSTEM "keyword_library.dtd">

<keyword_library><libraryType type="COMPONENT" />
    
    <libraryInfo name="GenericMasterFunctions" 
                 doc="GenericMasterFunctions.htm" 
                 sourcecode="GenericMasterFunctions.sbl" 
                 class="ALL">
                 
        <description> <short_desc>
              Generic actions available for ALL types of Windows and Components.
           </short_desc> </description>
           
    </libraryInfo>
    <runtime platform="Windows" engine="Robot" version="2002" />
    <keywords>    
    <keyword name="VERIFYPROPERTY" 
             displayText="VerifyProperty" 
             expectFailSupport="YES" 
             expectWarnSupport="NO" 
             deprecated="NO">
             
         <description> <short_desc>
             Verify the value of a single object property
              </short_desc> </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" 
                   expectFailSupport="YES" >
	       <libraryInfo name="GenericMasterFunctions" 
                            doc="GenericMasterFunctions.htm" 
                            sourcecode="GenericMasterFunctions.sbl" 
                            class="ALL" />
           </engine>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20030827" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine vendor="Apple" tool="IOS" name="Apple XCode Instruments" since="20111118" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/ios/CFComponent.html" 
                            sourcecode="org.safs.ios.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine name="WinRunner"
	   	   		       since="20020827" 
	   	   		       tool="WinRunner" 
	   	   		       vendor="Mercury Interactive">
	   	   	       <libraryInfo class="ALL" 
	   	   				name="GenericMasterFunctions" 
	   	   				sourcecode="GenericMasterFunctions">
	   	   	       </libraryInfo>
           </engine>
	   <engine vendor="OpenQA" tool="Selenium" name="Selenium" since="20070130" >
	    	<libraryInfo name="CFComponent" 
			doc="org/safs/selenium/CFComponent.html" 
			sourcecode="org.safs.selenium.CFComponent.java" 
			class="CFComponent" />
            </engine>
	    <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140514">
	        <libraryInfo name="CFComponent" 
			doc="org/safs/selenium/webdriver/CFComponent.html" 
			sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
			class="CFComponent" />
            </engine>
	   <engine name="Test Complete" 
		   since="20110407" 
		   tool="TestComplete" 
		   vendor="Automated QA">
		   <libraryInfo class="GENERIC" 
			name="GenericMasterFunctions" 
			sourcecode="GenericMasterFunctions.SVB">
		   </libraryInfo>
	   </engine>
       </engines>

       <parameters>
        <parameter name="PROPERTYNAME" displayText="PropertyName" optional="NO">
           <description> <short_desc>
             The case-sensitive name of the object property to verify.
              </short_desc> </description> </parameter>
        <parameter name="EXPECTEDVALUE" displayText="ExpectedValue" optional="NO">
           <description> <short_desc>
             The case-sensitive value we expect to get from the object property.
              </short_desc> </description> </parameter>
        <parameter name="CASEINSENSITIVE" displayText="CaseInsensitive" optional="YES">
           <description> <short_desc>
             Values of "CASE-INSENSITIVE", "CASEINSENSITIVE", and "FALSE" will cause the 
             comparison of the property value and the expected value to ignore case.
              </short_desc> </description> </parameter>
     </parameters><examples>
        <example>
           <usage>T, WindowID, WindowID, VerifyProperty, Visible, True, ^CASESENSITIVE="False"</usage>
           <description> <short_desc>
             Verify the "Visible" property of WindowID has the value "True" but ignore case when 
             making the comparison.
              </short_desc> </description> </example>
        <example>
           <usage>T, WindowID, CheckboxID, VerifyProperty, State, "Unchecked"</usage>
           <description> <short_desc>
             Verify the "State" property of CheckboxID has the case-sensitive value "Unchecked".
              </short_desc> </description> </example>
     </examples></keyword>
     
  <keyword name="VERIFYPROPERTYCONTAINS" 
           displayText="VerifyPropertyContains" 
           expectFailSupport="YES" 
           expectWarnSupport="NO" 
           deprecated="NO">
           
       <description> <short_desc>
             Verify that the value of an object property contains a string
              </short_desc> </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" 
                   expectFailSupport="YES" 
                   expectWarnSupport="NO" >
	       <libraryInfo name="GenericMasterFunctions" 
                            doc="GenericMasterFunctions.htm" 
                            sourcecode="GenericMasterFunctions.sbl" 
                            class="ALL" />
           </engine>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20030827" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine vendor="Apple" tool="IOS" name="Apple XCode Instruments" since="20111118" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/ios/CFComponent.html" 
                            sourcecode="org.safs.ios.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine name="WinRunner" 
	   	   	   		       since="20040624" 
	   	   	   		       tool="WinRunner" 
	   	   	   		       vendor="Mercury Interactive">
	   	   	   	       <libraryInfo class="ALL" 
	   	   	   				name="GenericMasterFunctions" 
	   	   	   				sourcecode="GenericMasterFunctions">
	   	   	   	       </libraryInfo>
           </engine>
	       <engine vendor="OpenQA" tool="Selenium" name="Selenium" since="20070130" >
	    	<libraryInfo name="CFComponent" 
			doc="org/safs/selenium/CFComponent.html" 
			sourcecode="org.safs.selenium.CFComponent.java" 
			class="CFComponent" />
           </engine>
	       <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140804" >
	    	<libraryInfo name="CFComponent" 
			doc="org/safs/selenium/webdriver/CFComponent.html" 
			sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
			class="CFComponent" />
           </engine>
		   <engine name="Test Complete" since="20111011" tool="TestComplete" vendor="Automated QA">
		       <libraryInfo class="GENERIC" 
				            name="GenericMasterFunctions" 
				            sourcecode="GenericMasterFunctions.SVB">
		       </libraryInfo>
	       </engine>            
       </engines>

       <parameters>
        <parameter name="PROPERTYNAME" displayText="PropertyName" optional="NO">
           <description> <short_desc>
             The case-sensitive name of the object property to verify.
              </short_desc> </description> </parameter>
        <parameter name="SEARCHSTRING" displayText="SearchString" optional="NO">
           <description> <short_desc>
             The case-sensitive value we expect the object property to contain.
              </short_desc> </description> </parameter>
        <parameter name="CASEINSENSITIVE" displayText="CaseInsensitive" optional="YES">
           <description> <short_desc>
             Values of "CASE-INSENSITIVE", "CASEINSENSITIVE", and "FALSE" will cause the 
             comparison of the property value and the expected value to ignore case.
              </short_desc> </description> </parameter>
     </parameters><examples>
        <example>
           <usage>T, WindowID, WindowID, VerifyPropertyContains, Value, someSubstring, ^CaseSensitive="False"</usage>
           <description> <short_desc>
             Verify the "Vaule" property of WindowID contains the substring "someSubstring".  
             The comparison will not be case-sensitive.
              </short_desc> </description> </example>
        <example>
           <usage>T, WindowID, CheckboxID, VerifyPropertyContains, State, "Unc"</usage>
           <description> <short_desc>
             Verify the "State" property of CheckboxID contains the case-sensitive substring "Unc".
              </short_desc> </description> </example>
     </examples></keyword>
     
  <keyword name="VERIFYVALUECONTAINS" 
           displayText="VerifyValueContains" 
           expectFailSupport="YES" 
           expectWarnSupport="NO" 
           deprecated="NO">
           
       <description> <short_desc>
             Verify that a string value contains a substring
              </short_desc> </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" 
                   expectFailSupport="YES" 
                   expectWarnSupport="NO" >
	       <libraryInfo name="GenericMasterFunctions" 
                            doc="GenericMasterFunctions.htm" 
                            sourcecode="GenericMasterFunctions.sbl" 
                            class="ALL" />
           </engine>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20030827" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20060314" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
           <engine name="WinRunner" 
	   	   	   	   		       since="20040624" 
	   	   	   	   		       tool="WinRunner" 
	   	   	   	   		       vendor="Mercury Interactive">
	   	   	   	   	       <libraryInfo class="ALL" 
	   	   	   	   				name="GenericMasterFunctions" 
	   	   	   	   				sourcecode="GenericMasterFunctions">
	   	   	   	   	       </libraryInfo>
           </engine>
		   <engine name="Test Complete" since="20111011" tool="TestComplete" vendor="Automated QA">
		       <libraryInfo class="GENERIC" 
				            name="GenericMasterFunctions" 
				            sourcecode="GenericMasterFunctions.SVB">
		       </libraryInfo>
	       </engine>           
       </engines>

       <parameters>
        <parameter name="VALUE" displayText="Value" optional="NO">
           <description> <short_desc>
             The case-sensitive string value to verify.
              </short_desc>
              <detailed_desc>
                  If this string is blank, the only possible match is
                  if the SearchString is also blank.
              </detailed_desc>
           </description> </parameter>
        <parameter name="SEARCHSTRING" displayText="SearchString" optional="NO">
           <description> <short_desc>
             The case-sensitive value we expect the preceeding string to contain.
              </short_desc>
              <detailed_desc>
                  If the SearchString is blank, that will match the searched 
                  Value ONLY if that value is also blank.
                  Note: not true for RobotJ version.  In RobotJ
             version, if SearchString is blank, then it will always
             match.  If you want to see if both strings are blank, use
             the keyword 'VerifyValues' instead.
              </detailed_desc>
           </description> </parameter>
        <parameter name="SUPPRESSVALUE" displayText="SuppressValue" optional="YES">
           <description> <short_desc>
             Set to "SUPPRESSVALUE" to prevent the logging of ugly multi-line values.
              </short_desc> <detailed_desc>
               The case-insensitive value "SUPPRESSVALUE" instructs the implementation to NOT 
               log the Value when logging.  This is generally 
               useful with Values that are exceedingly long, or contain large volumes 
               of text that will break-up the format or readability of the output log.
              </detailed_desc> 
	      <note>
		<engines>
		    <engine vendor="SmartBear" tool="TestComplete" name="TestComplete" since="20140527" />
		    <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20140527" />
                </engines>
		<value>First implemented in May 2014 for TCAFS and might not be supported in all engines yet.</value>
	      </note>
              </description> </parameter>
     </parameters><examples>
        <example>
           <usage>T, anything, anything, VerifyValueContains, someString, someSubstring</usage>
           <description> <short_desc>
             Verify the "someString" string contains the substring "someSubstring".
              </short_desc> </description> </example>
        <example>
           <usage>T, anything, anything, VerifyValueContains, "here i am", "re i"</usage>
           <description> <short_desc>
             Verify the string "here i am" contains the substring "re i".
              </short_desc> </description> </example>
        <example>
           <usage>T, anything, anything, VerifyValueContains, ^myVariable, "substr"</usage>
           <description> <short_desc>
             Verify the variable ^myVariable contains the substring "substr".
              </short_desc> </description> </example>
        <example>
           <usage>T, anything, anything, VerifyValueContains, "someString", ^myVariable</usage>
           <description> <short_desc>
             Verify the string "someString" contains the substring of variable ^myVariable.
              </short_desc> </description> </example>
        <example>
           <usage>T, anything, anything, VerifyValueContains, ^yourVariable, ^myVariable</usage>
           <description> <short_desc>
             Verify the conents of ^yourVariable contains the contents of variable ^myVariable as a substring.
              </short_desc> </description> </example>
        <example>
           <usage>T, anything, anything, VerifyValueContains, ^yourVariable, ^myVariable, "SuppressValue"</usage>
           <description> <short_desc>
             Verify the conents of ^yourVariable contains the contents of variable ^myVariable as a substring.
              </short_desc> 
              <detailed_desc>The SUPPRESSed Value argument will not be output into any logged messages.</detailed_desc>
              </description> </example>
     </examples></keyword>
     
  <keyword name="VERIFYVALUECONTAINSIGNORECASE" 
           displayText="VerifyValueContainsIgnoreCase" 
           expectFailSupport="YES" 
           expectWarnSupport="NO" 
           deprecated="NO">
           
       <description> <short_desc>
             Verify that a string value contains a substring, ignoring case.
              </short_desc> </description>
           
       <engines>
	   <engine name="Test Complete" since="20111011" tool="TestComplete" vendor="SmartBear">
	       <libraryInfo class="GENERIC" 
		            name="GenericMasterFunctions" 
		            sourcecode="GenericMasterFunctions.SVB">
	       </libraryInfo>
           </engine>           
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20140527" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
       </engines>

       <parameters>
        <parameter name="VALUE" displayText="Value" optional="NO">
           <description> <short_desc>
             The case-insensitive string value to verify.
              </short_desc>
              <detailed_desc>
                  If this string is blank, the only possible match is
                  if the SearchString is also blank.
              </detailed_desc>
           </description> </parameter>
        <parameter name="SEARCHSTRING" displayText="SearchString" optional="NO">
           <description> <short_desc>
             The case-insensitive value we expect the preceeding string to contain.
              </short_desc>
              <detailed_desc>
                  If the SearchString is blank, that will match the searched 
                  Value ONLY if that value is also blank.
              </detailed_desc>
           </description> </parameter>
        <parameter name="SUPPRESSVALUE" displayText="SuppressValue" optional="YES">
           <description> <short_desc>
             Set to "SUPPRESSVALUE" to prevent the logging of ugly multi-line values.
              </short_desc> <detailed_desc>
               The case-insensitive value "SUPPRESSVALUE" instructs the implementation to NOT 
               log the Value when logging.  This is generally 
               useful with Values that are exceedingly long, or contain large volumes 
               of text that will break-up the format or readability of the output log.
              </detailed_desc> 
	      <note>
		<engines>
		    <engine vendor="SmartBear" tool="TestComplete" name="TestComplete" since="20140527" />
		    <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20140527" />
		</engines>
		<value>First implemented in May 2014 for TCAFS and might not be supported in all engines yet.</value>
	      </note>
              </description> </parameter>
     </parameters><examples>
        <example>
           <usage>T, anything, anything, VerifyValueContainsIgnoreCase, someString, someSubstring</usage>
           <description> <short_desc>
             Verify the "someString" string contains the substring "someSubstring".
              </short_desc> </description> </example>
        <example>
           <usage>T, anything, anything, VerifyValueContainsIgnoreCase, "here i am", "re i"</usage>
           <description> <short_desc>
             Verify the string "here i am" contains the substring "re i".
              </short_desc> </description> </example>
        <example>
           <usage>T, anything, anything, VerifyValueContainsIgnoreCase, ^myVariable, "substr"</usage>
           <description> <short_desc>
             Verify the variable ^myVariable contains the substring "substr".
              </short_desc> </description> </example>
        <example>
           <usage>T, anything, anything, VerifyValueContainsIgnoreCase, "someString", ^myVariable</usage>
           <description> <short_desc>
             Verify the string "someString" contains the substring of variable ^myVariable.
              </short_desc> </description> </example>
        <example>
           <usage>T, anything, anything, VerifyValueContainsIgnoreCase, ^yourVariable, ^myVariable</usage>
           <description> <short_desc>
             Verify the conents of ^yourVariable contains the contents of variable ^myVariable as a substring.
              </short_desc> </description> </example>
        <example>
           <usage>T, anything, anything, VerifyValueContainsIgnoreCase, ^yourVariable, ^myVariable, "SuppressValue"</usage>
           <description> <short_desc>
             Verify the conents of ^yourVariable contains the contents of variable ^myVariable as a substring.
              </short_desc> 
              <detailed_desc>The SUPPRESSed Value argument will not be output into any logged messages.</detailed_desc>
              </description> </example>
     </examples></keyword>
     
  <keyword name="VERIFYVALUEDOESNOTCONTAIN" 
           displayText="VerifyValueDoesNotContain" 
           expectFailSupport="NO" 
           expectWarnSupport="NO" 
           deprecated="NO">
           
       <description> <short_desc>
             Verify that a string value does NOT contain a substring
              </short_desc> </description>
           
       <engines>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20140107" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
       </engines>

       <parameters>
        <parameter name="VALUE" displayText="Value" optional="NO">
           <description> <short_desc>
             The case-sensitive string value to verify.
              </short_desc>
              <detailed_desc>
                  If this string is blank, the compare value should NOT be blank.
              </detailed_desc>
           </description> </parameter>
        <parameter name="SEARCHSTRING" displayText="SearchString" optional="NO">
           <description> <short_desc>
             The case-sensitive value we do NOT want to find in the provided Value.
              </short_desc>
              <detailed_desc>
                  If the SearchString is blank, success if Value is NOT blank.
              </detailed_desc>
           </description> </parameter>
        <parameter name="SUPPRESSVALUE" displayText="SuppressValue" optional="YES">
           <description> <short_desc>
             Set to "SUPPRESSVALUE" to prevent the logging of ugly multi-line values.
              </short_desc> <detailed_desc>
               The case-insensitive value "SUPPRESSVALUE" instructs the implementation to NOT 
               log the Value when logging.  This is generally 
               useful with Values that are exceedingly long, or contain large volumes 
               of text that will break-up the format or readability of the output log.
              </detailed_desc> 
	      <note>
		<engines>
		    <engine vendor="SmartBear" tool="TestComplete" name="TestComplete" since="20140527" />
		    <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20140527" />
		</engines>
		<value>First implemented in May 2014 for TCAFS and might not be supported in all engines yet.</value>
	      </note>
              </description> </parameter>
     </parameters><examples>
        <example>
           <usage>T, Anything, AtAll, VerifyValueDoesNotContain, "someString", "another"</usage>
           <description> <short_desc>
             Verify the "someString" Value does NOT contain the substring "another".
              </short_desc> </description> </example>
        <example>
           <usage>T, Anything, AtAll, VerifyValueDoesNotContain, ^myVariable, "substr"</usage>
           <description> <short_desc>
             Verify the variable ^myVariable does NOT contain the substring "substr".
              </short_desc> </description> </example>
        <example>
           <usage>T, Anything, AtAll, VerifyValueDoesNotContain, "someString", ^myVariable</usage>
           <description> <short_desc>
             Verify the string "someString" does NOT contain the substring contained in variable ^myVariable.
              </short_desc> </description> </example>
        <example>
           <usage>T, Anything, AtAll, VerifyValueDoesNotContain, "someString", ^myVariable, "SuppressValue"</usage>
           <description> <short_desc>
             Verify the string "someString" does NOT contain the substring contained in variable ^myVariable.
              </short_desc>
              <detailed_desc>The SUPPRESSed Value argument will not be output into any logged messages.</detailed_desc>
              </description> </example>
     </examples></keyword>
     
  <keyword name="VERIFYVALUES" 
           displayText="VerifyValues" 
           expectFailSupport="YES" 
           expectWarnSupport="NO" 
           deprecated="NO">
           
       <description> <short_desc>
             Verify that two string values are identical. Note: RobotJ
             also uses identical keyword 'VerifyValueEquals'
              </short_desc> </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" 
                   expectFailSupport="YES" 
                   expectWarnSupport="NO" >
	       <libraryInfo name="GenericMasterFunctions" 
                            doc="GenericMasterFunctions.htm" 
                            sourcecode="GenericMasterFunctions.sbl" 
                            class="ALL" />
           </engine>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20030827" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20060314" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
           <engine name="WinRunner" 
	   	   	   	   		       since="20040624" 
	   	   	   	   		       tool="WinRunner" 
	   	   	   	   		       vendor="Mercury Interactive">
	   	   	   	   	       <libraryInfo class="ALL" 
	   	   	   	   				name="GenericMasterFunctions" 
	   	   	   	   				sourcecode="GenericMasterFunctions">
	   	   	   	   	       </libraryInfo>
           </engine>
		   <engine name="Test Complete" since="20111011" tool="TestComplete" vendor="Automated QA">
		       <libraryInfo class="GENERIC" 
				            name="GenericMasterFunctions" 
				            sourcecode="GenericMasterFunctions.SVB">
		       </libraryInfo>
	       </engine>           
       </engines>

       <parameters>
        <parameter name="VALUE1" displayText="Value1" optional="NO">
           <description> <short_desc>
              A case-sensitive string value to compare.
              </short_desc>
              <detailed_desc>
                  If this string is blank, the only possible match is
                  if Value2 is also blank.
              </detailed_desc>
           </description> </parameter>
        <parameter name="VALUE2" displayText="Value2" optional="NO">
           <description> <short_desc>
             A case-sensitive value to compare.
              </short_desc>
              <detailed_desc>
                  If this string is blank, the only possible match is
                  if Value1 is also blank.
              </detailed_desc>
           </description> </parameter>
        <parameter name="SUPPRESSVALUE" displayText="SuppressValue" optional="YES">
           <description> <short_desc>
             Set to "SUPPRESSVALUE" to prevent the logging of ugly multi-line values.
              </short_desc> <detailed_desc>
               The case-insensitive value "SUPPRESSVALUE" instructs the implementation to NOT 
               log the Value when logging.  This is generally 
               useful with Values that are exceedingly long, or contain large volumes 
               of text that will break-up the format or readability of the output log.
              </detailed_desc> 
	      <note>
		<engines>
		    <engine vendor="SmartBear" tool="TestComplete" name="TestComplete" since="20140527" />
		    <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20140527" />
		</engines>
		<value>First implemented in May 2014 for TCAFS and might not be supported in all engines yet.</value>
	      </note>
              </description> </parameter>
     </parameters><examples>
        <example>
           <usage>T, anything, anything, VerifyValues, ^myVariable, "astring"</usage>
           <description> <short_desc>
             Verify the variable ^myVariable matches the string "astring".
              </short_desc> </description> </example>
        <example>
           <usage>T, anything, anything, VerifyValues, "astring", ^myVariable</usage>
           <description> <short_desc>
             Verify the variable ^myVariable matches the string "astring".
              </short_desc> </description> </example>
        <example>
           <usage>T, anything, anything, VerifyValues, ^yourVariable, ^myVariable</usage>
           <description> <short_desc>
             Verify the value of ^yourVariable matches the value of variable ^myVariable.
              </short_desc> </description> </example>
        <example>
           <usage>T, anything, anything, VerifyValues, ^yourVariable, ^myVariable, "SuppressValue"</usage>
           <description> <short_desc>
             Verify the value of ^yourVariable matches the value of variable ^myVariable.
              </short_desc> 
              <detailed_desc>The SUPPRESSed Value argument will not be output into any logged messages.</detailed_desc>
              </description> </example>
     </examples></keyword>
     
  <keyword name="VERIFYVALUESNOTEQUAL" 
           displayText="VerifyValuesNotEqual" 
           expectFailSupport="NO" 
           expectWarnSupport="NO" 
           deprecated="NO">
           
       <description> <short_desc>
             Verify that two string values are NOT identical.
              </short_desc> </description>
           
       <engines>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20140107" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
       </engines>

       <parameters>
        <parameter name="VALUE1" displayText="Value1" optional="NO">
           <description> <short_desc>
              A case-sensitive string value to compare.
              </short_desc>
              <detailed_desc>
                  If this string is blank, the only possible success is
                  if Value2 is NOT blank.
              </detailed_desc>
           </description> </parameter>
        <parameter name="VALUE2" displayText="Value2" optional="NO">
           <description> <short_desc>
             A case-sensitive value to compare.
              </short_desc>
              <detailed_desc>
                  If this string is blank, the only possible success is
                  if Value1 is NOT blank.
              </detailed_desc>
           </description> </parameter>
        <parameter name="SUPPRESSVALUE" displayText="SuppressValue" optional="YES">
           <description> <short_desc>
             Set to "SUPPRESSVALUE" to prevent the logging of ugly multi-line values.
              </short_desc> <detailed_desc>
               The case-insensitive value "SUPPRESSVALUE" instructs the implementation to NOT 
               log the Value when logging.  This is generally 
               useful with Values that are exceedingly long, or contain large volumes 
               of text that will break-up the format or readability of the output log.
              </detailed_desc> 
	      <note>
		<engines>
		    <engine vendor="SmartBear" tool="TestComplete" name="TestComplete" since="20140527" />
		    <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20140527" />
		</engines>
		<value>First implemented in May 2014 for TCAFS and might not be supported in all engines yet.</value>
	      </note>
              </description> </parameter>
     </parameters><examples>
        <example>
           <usage>T, Anything, AtAll, VerifyValuesNotEqual, ^myVariable, "astring"</usage>
           <description> <short_desc>
             Verify the variable ^myVariable does NOT match the string "astring".
              </short_desc> </description> </example>
        <example>
           <usage>T, Anything, AtAll, VerifyValuesNotEqual, "astring", ^myVariable</usage>
           <description> <short_desc>
             Verify the variable ^myVariable does NOT match the string "astring".
              </short_desc> </description> </example>
        <example>
           <usage>T, Anything, AtAll, VerifyValuesNotEqual, ^yourVariable, ^myVariable</usage>
           <description> <short_desc>
             Verify the value of ^yourVariable does NOT match the value of variable ^myVariable.
              </short_desc> </description> </example>
        <example>
           <usage>T, Anything, AtAll, VerifyValuesNotEqual, ^yourVariable, ^myVariable, "SUPPRESSVALUE"</usage>
           <description> <short_desc>
             Verify the value of ^yourVariable does NOT match the value of variable ^myVariable.
              </short_desc> 
              <detailed_desc>The SUPPRESSed Value argument will not be output into any logged messages.</detailed_desc>
              </description> </example>
     </examples></keyword>
     
  <keyword name="VERIFYVALUESIGNORECASE" 
           displayText="VerifyValuesIgnoreCase" 
           expectFailSupport="YES" 
           expectWarnSupport="NO" 
           deprecated="NO">
           
       <description> <short_desc>
             Verify that two string values are identical, ignoring case.
              </short_desc> </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" 
                   expectFailSupport="YES" 
                   expectWarnSupport="NO" >
	       <libraryInfo name="GenericMasterFunctions" 
                            doc="GenericMasterFunctions.htm" 
                            sourcecode="GenericMasterFunctions.sbl" 
                            class="ALL" />
           </engine>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20030827" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20060314" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
           <engine name="WinRunner" 
	   	   	   	   		       since="20040624" 
	   	   	   	   		       tool="WinRunner" 
	   	   	   	   		       vendor="Mercury Interactive">
	   	   	   	   	       <libraryInfo class="ALL" 
	   	   	   	   				name="GenericMasterFunctions" 
	   	   	   	   				sourcecode="GenericMasterFunctions">
	   	   	   	   	       </libraryInfo>
           </engine>
		   <engine name="Test Complete" since="20111011" tool="TestComplete" vendor="Automated QA">
		       <libraryInfo class="GENERIC" 
				            name="GenericMasterFunctions" 
				            sourcecode="GenericMasterFunctions.SVB">
		       </libraryInfo>
	       </engine>           
       </engines>

       <parameters>
        <parameter name="VALUE1" displayText="Value1" optional="NO">
           <description> <short_desc>
              A case-insensitive string value to compare.
              </short_desc>
              <detailed_desc>
                  If this string is blank, the only possible match is
                  if Value2 is also blank.
              </detailed_desc>
           </description> </parameter>
        <parameter name="VALUE2" displayText="Value2" optional="NO">
           <description> <short_desc>
             A case-insensitive value to compare.
              </short_desc>
              <detailed_desc>
                  If this string is blank, the only possible match is
                  if Value1 is also blank.
              </detailed_desc>
           </description> </parameter>
        <parameter name="SUPPRESSVALUE" displayText="SuppressValue" optional="YES">
           <description> <short_desc>
             Set to "SUPPRESSVALUE" to prevent the logging of ugly multi-line values.
              </short_desc> <detailed_desc>
               The case-insensitive value "SUPPRESSVALUE" instructs the implementation to NOT 
               log the Value when logging.  This is generally 
               useful with Values that are exceedingly long, or contain large volumes 
               of text that will break-up the format or readability of the output log.
              </detailed_desc> 
	      <note>
		<engines>
		    <engine vendor="SmartBear" tool="TestComplete" name="TestComplete" since="20140527" />
		    <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20140527" />
		</engines>
		<value>First implemented in May 2014 for TCAFS and might not be supported in all engines yet.</value>
	      </note>
              </description> </parameter>
     </parameters><examples>
        <example>
           <usage>T, anything, anything, VerifyValuesIgnoreCase, ^myVariable, "aSTring"</usage>
           <description> <short_desc>
             Verify the variable ^myVariable matches the string "aSTring", ignoring case.
              </short_desc> </description> </example>
        <example>
           <usage>T, anything, anything, VerifyValuesIgnoreCase, "asTRing", ^myVariable</usage>
           <description> <short_desc>
             Verify the variable ^myVariable matches the string "asTRing", ignoring case.
              </short_desc> </description> </example>
        <example>
           <usage>T, anything, anything, VerifyValuesIgnoreCase, ^yourVariable, ^myVariable</usage>
           <description> <short_desc>
             Verify the value of ^yourVariable matches the value of variable ^myVariable, ignoring case.
              </short_desc> </description> </example>
        <example>
           <usage>T, anything, anything, VerifyValuesIgnoreCase, ^yourVariable, ^myVariable, "SuppressValue"</usage>
           <description> <short_desc>
             Verify the value of ^yourVariable matches the value of variable ^myVariable, ignoring case.
              </short_desc> </description> </example>
     </examples></keyword>
     
  <keyword name="ASSIGNPROPERTYVARIABLE" 
           displayText="AssignPropertyVariable" 
           expectFailSupport="NO" 
           expectWarnSupport="NO" 
           deprecated="NO">
           
       <description> <short_desc>
               Assign the string value of an object property to a specific DDVariable
              </short_desc> <detailed_desc>
               Assign the string value of an object property to a specific DDVariable.<br />
               Note, if you supply the name of the variable and include the leading
               caret (^) symbol then the variable must be enclosed in quotes.
               Otherwise, that variable will be used like any other variable and the
               substituted value of that variable will be interpretted as the name
               of the variable you wish to use.
              </detailed_desc> </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" >
	       <libraryInfo name="GenericMasterFunctions" 
                            doc="GenericMasterFunctions.htm" 
                            sourcecode="GenericMasterFunctions.sbl" 
                            class="ALL" />
           </engine>
           <engine vendor="Apple" tool="IOS" name="Apple XCode Instruments" since="20111118" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/ios/CFComponent.html" 
                            sourcecode="org.safs.ios.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20030827" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine name="WinRunner" 
			       since="20020827" 
			       tool="WinRunner" 
			       vendor="Mercury Interactive">
		       <libraryInfo class="ALL" 
					name="GenericMasterFunctions" 
					sourcecode="GenericMasterFunctions">
		       </libraryInfo>
           </engine>
	      <engine vendor="OpenQA" tool="Selenium" name="Selenium" since="20070130" >
	    	<libraryInfo name="CFComponent" 
			doc="org/safs/selenium/CFComponent.html" 
			sourcecode="org.safs.selenium.CFComponent.java" 
			class="CFComponent" />
           </engine>
		    <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140804">
		        <libraryInfo name="CFComponent" 
				doc="org/safs/selenium/webdriver/CFComponent.html" 
				sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
				class="CFComponent"/>
	        </engine>
		   <engine name="Test Complete"
			   since="20110407" 
			   tool="TestComplete" 
			   vendor="Automated QA">
		       <libraryInfo class="GENERIC" 
				name="GenericMasterFunctions" 
				sourcecode="GenericMasterFunctions.SVB">
		       </libraryInfo>
	       </engine>
       </engines>

       <parameters>
        <parameter name="PROPERTYNAME" displayText="PropertyName" optional="NO">
           <description> <short_desc>
             The case-sensitive name of the object property.
              </short_desc> </description> </parameter>
        <parameter name="VARIABLENAME" displayText="VariableName" optional="NO">
           <description> <short_desc>
             The name of the variable to receive the property value.
              </short_desc> <detailed_desc>
               The name of the variable to receive the property value.
               Note, if you supply the name of the variable and include the leading
               caret (^) symbol then the variable must be enclosed in quotes.
               Otherwise, that variable will be used like any other variable and the
               substituted value of that variable will be interpretted as the name
               of the variable you wish to use.
              </detailed_desc> </description> </parameter>
        <parameter name="SUPPRESSVALUE" displayText="SuppressValue" optional="YES">
           <description> <short_desc>
             Set to "SUPPRESSVALUE" to prevent the logging of ugly multi-line property values.
              </short_desc> <detailed_desc>
               The case-insensitive value "SUPPRESSVALUE" instructs the implementation to NOT 
               log the recovered value of the property when logging its success.  This is generally 
               useful when retrieving property values that are exceedingly long, or contain large volumes 
               of text that will break-up the format or readability of the output log.
              </detailed_desc> 
	      <note>
		<engines>
		    <engine vendor="SmartBear" tool="TestComplete" name="TestComplete" since="20140523" />
		</engines>
		<value>First implemented in May 2014 for TCAFS and might not be supported in all engines yet.</value>
	      </note>
              </description> </parameter>
     </parameters><examples>
        <example>
           <usage>T, WindowID, WindowID, AssignPropertyVariable, Visible, AVariableName</usage>
           <description> <short_desc>
             Assign the value of the "Visible" property of WindowID to DDVariable ^AVariableName.
              </short_desc> </description> </example>
        <example>
           <usage>T, WindowID, WindowID, AssignPropertyVariable, Visible, AVariableName, SUPPRESSVALUE</usage>
           <description> <short_desc>
             Assign the value of the "Visible" property of WindowID to DDVariable ^AVariableName.
              </short_desc> <detailed_desc>
              When logging the success (or failure) of the command the actual value of the property 
              should NOT be included in the messages.
              </detailed_desc>
              </description> </example>
        <example>
           <usage>T, WindowID, WindowID, AssignPropertyVariable, Visible, "AVariableName"</usage>
           <description> <short_desc>
             Assign the value of the "Visible" property of WindowID to DDVariable ^AVariableName.
              </short_desc> </description> </example>
        <example>
           <usage>T, WindowID, WindowID, AssignPropertyVariable, Visible, "^AVariableName"</usage>
           <description> <short_desc>
             Assign the value of the "Visible" property of WindowID to DDVariable ^AVariableName.
              </short_desc> </description> </example>
        <example>
           <usage>C, SetVariableValues, ^AVariableName="NextVariableName" <br />
                  T, WindowID, WindowID, AssignPropertyVariable, Visible, ^AVariableName</usage>
           <description> <short_desc>
             Assign the value of the "Visible" property of WindowID to DDVariable ^NextVariableName.
              </short_desc> </description> </example>
     </examples></keyword>
     
  <keyword name="GUIDOESEXIST" 
           displayText="GUIDoesExist" 
           expectFailSupport="YES" 
           expectWarnSupport="NO" 
           deprecated="NO">
           
       <description> <short_desc>
               Routine to verify the visual existence of a particular window and/or component.
              </short_desc> <detailed_desc>
               Routine to verify the visual existence of a particular window and/or component.<br />
               If the window(Field 2) and component(Field 3) are the same then we only
               check for the existence of the window.  However, if the component is
               actually a child of the window then we first check for the window and
               then check for the component.
               <p>
               If a Window or Component is HIDDEN, it will be treated as if it Does NOT Exist.
               The item must be VISIBLE to pass.</p>
              </detailed_desc> </description>
           
       <engines>
            <engine vendor="Google" tool="Android" name="Android" since="20120501" >
				<libraryInfo name="CFViewFunctions" 
					 doc="http://safsdev.sourceforge.net/doc/org/safs/android/CFViewFunctions.html" 
					 sourcecode="org.safs.android.CFViewFunctions.java" 
					 class="GENERIC" />
            	<domains>
            		<domain name="DEV" since="20120501">
	        			<libraryInfo name="ViewProcessor" 
                             doc="http://safsdev.sourceforge.net/doc/org/safs/android/engine/ViewProcessor.html" 
                             sourcecode="org.safs.android.engine.ViewProcessor.java" 
                             class="GENERIC" />
                    </domain>
                </domains>
            </engine>
           <engine vendor="Apple" tool="IOS" name="Apple XCode Instruments" since="20111024" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/ios/CFComponent.html" 
                            sourcecode="org.safs.ios.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" 
                   expectFailSupport="YES" 
                   expectWarnSupport="NO" >
	       <libraryInfo name="GenericMasterFunctions" 
                            doc="GenericMasterFunctions.htm" 
                            sourcecode="GenericMasterFunctions.sbl" 
                            class="ALL" />
           </engine>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20031208" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20080925" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
           <engine name="WinRunner" 
			       since="20020827" 
			       tool="WinRunner" 
			       vendor="Mercury Interactive">
		       <libraryInfo class="ALL" 
					name="GenericMasterFunctions" 
					sourcecode="GenericMasterFunctions">
		       </libraryInfo>
           </engine>
		   <engine vendor="OpenQA" tool="Selenium" name="Selenium" since="20070130" >
				<libraryInfo name="CFComponent" 
				doc="org/safs/selenium/CFComponent.html" 
				sourcecode="org.safs.selenium.CFComponent.java" 
				class="CFComponent" />
				</engine>
		   <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20170812" >
				<libraryInfo name="CFComponent" 
				doc="org/safs/selenium/webdriver/CFComponent.html" 
				sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
				class="CFComponent" />
			</engine>
		   <engine name="Test Complete" 
			   since="20110401" 
			   tool="TestComplete" 
			   vendor="Automated QA">
		       <libraryInfo class="GENERIC" 
				name="GenericMasterFunctions" 
				sourcecode="GenericMasterFunctions.SVB">
		       </libraryInfo>
	       </engine>
       </engines>

       <parameters> </parameters><examples>
        <example>
           <usage>T, AWindow, AWindow, GUIDoesExist</usage>
           <description> <short_desc>
             Test for the Visible existence of AWindow
              </short_desc> </description> </example>
        <example>
           <usage>T, AWindow, AChild, GUIDoesExist</usage>
           <description> <short_desc>
             Test for the Visible existence of AChild in AWindow
              </short_desc> </description> </example>
     </examples></keyword>
     
  <keyword name="GUIDOESNOTEXIST" 
           displayText="GUIDoesNotExist" 
           expectFailSupport="YES" 
           expectWarnSupport="NO" 
           deprecated="NO">
           
       <description> <short_desc>
               Routine to verify the visual non-existence of a particular window and/or component.
              </short_desc> <detailed_desc>
               Routine to verify the visual non-existence of a particular window and/or component.<br />
               If the window(Field 2) and component(Field 3) are the same then we only
               check for the visual non-existence of the window.  However, if the component is
               actually a child of the window then we first check for the visual existence of the
               window and then check for the visual non-existence of the component.
               <p>
               If a Window or Component is HIDDEN, it will be treated as if it Does NOT Exist.
               The item must not exist or be HIDDEN to pass.</p>
              </detailed_desc> </description>
           
       <engines>
            <engine vendor="Google" tool="Android" name="Android" since="20120501" >
				<libraryInfo name="CFViewFunctions" 
					 doc="http://safsdev.sourceforge.net/doc/org/safs/android/CFViewFunctions.html" 
					 sourcecode="org.safs.android.CFViewFunctions.java" 
					 class="GENERIC" />
            	<domains>
            		<domain name="DEV" since="20120501">
	        			<libraryInfo name="ViewProcessor" 
                             doc="http://safsdev.sourceforge.net/doc/org/safs/android/engine/ViewProcessor.html" 
                             sourcecode="org.safs.android.engine.ViewProcessor.java" 
                             class="GENERIC" />
                    </domain>
                </domains>
            </engine>
           <engine vendor="Apple" tool="IOS" name="Apple XCode Instruments" since="20111024" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/ios/CFComponent.html" 
                            sourcecode="org.safs.ios.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" 
                   expectFailSupport="YES" 
                   expectWarnSupport="NO" >
	       <libraryInfo name="GenericMasterFunctions" 
                            doc="GenericMasterFunctions.htm" 
                            sourcecode="GenericMasterFunctions.sbl" 
                            class="ALL" />
           </engine>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20031208" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20080925" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
           <engine name="WinRunner" 
		       since="20020827" 
		       tool="WinRunner" 
		       vendor="Mercury Interactive">
	       <libraryInfo class="ALL" 
				name="GenericMasterFunctions" 
				sourcecode="GenericMasterFunctions">
	       </libraryInfo>
           </engine>
	       <engine vendor="OpenQA" tool="Selenium" name="Selenium" since="20070130" >
	    	  <libraryInfo name="CFComponent" 
			  doc="org/safs/selenium/CFComponent.html" 
			  sourcecode="org.safs.selenium.CFComponent.java" 
			  class="CFComponent" />
           </engine>
		   <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20170812" >
				<libraryInfo name="CFComponent" 
				doc="org/safs/selenium/webdriver/CFComponent.html" 
				sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
				class="CFComponent" />
		    </engine>
	   <engine name="Test Complete" 
		   since="20110407" 
		   tool="TestComplete" 
		   vendor="Automated QA">
		   <libraryInfo class="GENERIC" 
			name="GenericMasterFunctions" 
			sourcecode="GenericMasterFunctions.SVB">
		   </libraryInfo>
	   </engine>
       </engines>

       <parameters> </parameters><examples>
        <example>
           <usage>T, AWindow, AWindow, GUIDoesNotExist</usage>
           <description> <short_desc>
             Test for the visual non-existence of AWindow
              </short_desc> </description> </example>
        <example>
           <usage>T, AWindow, AChild, GUIDoesNotExist</usage>
           <description> <short_desc>
             Test for the visual non-existence of AChild in the visible AWindow
              </short_desc> </description> </example>
     </examples></keyword>
     
  <keyword name="VERIFYARRAYPROPERTYTOFILE" 
           displayText="VerifyArrayPropertyToFile" 
           expectFailSupport="YES" 
           expectWarnSupport="YES" 
           deprecated="NO">
           
       <description> <short_desc>
             Verify the value of an array property with a benchmark file
              </short_desc> <detailed_desc>
             Typically, benchmarks are stored in the Datapool\Bench directory.
             In that event, only the filename.ext is needed.  There is currently
             a limit of 32K allowed for this type of comparison.
             <p>
             The command will produce a TEST WARNING if the user has configured an 
             alternate DIFF tool for which we have no means to compare the diff results.
             If this WARNING is expected, the user should use the "TW" test record type.</p>
             <p>
             Note: for RobotJ,Suggest to use RFT Inspector to confirm which property should be used. There are two examples:
				 <ol>
					 <li>For Java swing List and ComboBox items can be fetchedusing the '.itemText' property (Note the dot)</li>
					 <li>For Html List (type is html.select) items can be fetchedusing the '.text' property (Note the dot)</li>
				 </ol>
			</p>
              </detailed_desc> </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" 
                   expectFailSupport="YES" 
                   expectWarnSupport="YES" >
	       <libraryInfo name="GenericMasterFunctions" 
                            doc="GenericMasterFunctions.htm" 
                            sourcecode="GenericMasterFunctions.sbl" 
                            class="ALL" />
           </engine>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20031209" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine name="WinRunner" 
	   		       since="20040625" 
	   		       tool="WinRunner" 
	   		       vendor="Mercury Interactive">
	   	       <libraryInfo class="ALL" 
	   				name="GenericMasterFunctions" 
	   				sourcecode="GenericMasterFunctions">
	   	       </libraryInfo>
           </engine>
       </engines>

       <parameters>
        <parameter name="PROPERTYNAME" displayText="PropertyName" optional="NO">
           <description> <short_desc>
             The case-sensitive name of the object array property to verify.
              </short_desc> </description> </parameter>
        <parameter name="BENCHMARKFILE" displayText="BenchmarkFile" optional="NO">
           <description> <short_desc>
             The name of the file used as the comparison benchmark.
              </short_desc> <detailed_desc>
             Typically, benchmarks are stored in the Datapool\Bench directory.
             In that event, only the filename.ext is needed.
              </detailed_desc> </description> </parameter>
        <parameter name="FILTERMODE" displayText="FilterMode" optional="YES" default="">
           <description> <short_desc>
             (Future) Specify a file filter to use to process the text before comparison.
              </short_desc> </description> </parameter>
        <parameter name="FILTEROPTIONS" displayText="FilterOptions" optional="YES" default="">
           <description> <short_desc>
             (Future) Specify filter options to use with the file filter.
              </short_desc> </description> </parameter>
     </parameters><examples>
        <example>
           <usage>T, Window, MyListBox, VerifyArrayPropertyToFile, "List", aFilename.ext, "", ""</usage>
           <description> <short_desc>
               Verify the "List" array property of MyListBox with the benchmark file.
              </short_desc> <detailed_desc>
               The benchmark file is located within the Project at Datapool\Bench\aFilename.ext<br />
               Note the unused reserved fields for FileFilter and FilterOptions.
              </detailed_desc> </description> </example>
        <example>
           <usage>T, Window, MyListBox, VerifyArrayPropertyToFile, "List", c:\Dir\aFilename.ext</usage>
           <description> <short_desc>
               Verify the "List" property of MyListBox with the benchmark file.
              </short_desc> <detailed_desc>
               The benchmark file is not located within the Project. It is at c:\Dir\aFilename.ext
              </detailed_desc> </description> </example>
     </examples></keyword>
     
  <keyword name="VERIFYPROPERTYTOFILE" 
           displayText="VerifyPropertyToFile" 
           expectFailSupport="YES" 
           expectWarnSupport="YES" 
           deprecated="NO">
           
       <description> <short_desc>
             Verify the value of a single object property with a benchmark file
              </short_desc> <detailed_desc>
             Verify the value of a single object property with a benchmark file.<br />
             Typically, benchmarks are stored in the Datapool\Bench directory.
             In that event, only the filename.ext is needed.  There is currently
             a limit of 32K allowed for this type of comparison.
             <p>
             The command will produce a TEST WARNING if the user has configured an 
             alternate DIFF tool for which we have no means to compare the diff results.
             If this WARNING is expected, the user should use the "TW" test record type.</p>
              </detailed_desc> </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" 
                   expectFailSupport="YES" 
                   expectWarnSupport="YES" >
	       <libraryInfo name="GenericMasterFunctions" 
                            doc="GenericMasterFunctions.htm" 
                            sourcecode="GenericMasterFunctions.sbl" 
                            class="ALL" />
           </engine>
           <engine vendor="Apple" tool="IOS" name="Apple XCode Instruments" since="20111118" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/ios/CFComponent.html" 
                            sourcecode="org.safs.ios.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20031209" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine name="WinRunner" 
	   		       since="20020827" 
	   		       tool="WinRunner" 
	   		       vendor="Mercury Interactive">
	   	       <libraryInfo class="ALL" 
	   				name="GenericMasterFunctions" 
	   				sourcecode="GenericMasterFunctions">
	   	       </libraryInfo>
           </engine>
           <engine vendor="Automated QA" tool="TestComplete" name="Test Complete" since="20111001" >
		       <libraryInfo name="GenericMasterFunctions"  
				            class="GENERIC"
				            sourcecode="GenericMasterFunctions.SVB" />
           </engine>
		    <engine vendor="OpenQA" tool="Selenium" name="Selenium" since="20140804">
		        <libraryInfo name="CFComponent" 
				doc="org/safs/selenium/CFComponent.html" 
				sourcecode="org.safs.selenium.CFComponent.java" 
				class="CFComponent"/>
	        </engine>
		    <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140804">
		        <libraryInfo name="CFComponent" 
				doc="org/safs/selenium/webdriver/CFComponent.html" 
				sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
				class="CFComponent"/>
	        </engine>
       </engines>

       <parameters>
        <parameter name="PROPERTYNAME" displayText="PropertyName" optional="NO">
           <description> <short_desc>
             The case-sensitive name of the object property to verify.
              </short_desc> </description> </parameter>
        <parameter name="BENCHMARKFILE" displayText="BenchmarkFile" optional="NO">
           <description> <short_desc>
             The name of the file used as the comparison benchmark.
              </short_desc> <detailed_desc>
             The name of the file used as the comparison benchmark.<br />
             Typically, benchmarks are stored in the Datapool\Bench directory.
             In that event, only the filename.ext is needed.
              </detailed_desc> </description> </parameter>
        <parameter name="FILEENCODING" displayText="FileEncoding" optional="YES" default="">
           <description> <short_desc>
             Specify a character encoding to be used when opening a bench file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            </short_desc> </description>
        </parameter>              
        <parameter name="FILTERMODE" displayText="FilterMode" optional="YES" default="">
           <description> <short_desc>
             (Future) Specify a file filter to use to process the text before comparison.
              </short_desc> </description> </parameter>
        <parameter name="FILTEROPTIONS" displayText="FilterOptions" optional="YES" default="">
           <description> <short_desc>
             (Future) Specify filter options to use with the file filter.
              </short_desc> </description> </parameter>
     </parameters><examples>
        <example>
           <usage>T, Browser, HTMLTable, VerifyPropertyToFile, "innerText", aFilename.ext, , "", ""</usage>
           <description> <short_desc>
               Verify the "innerText" property of HTMLTable with the benchmark file.
              </short_desc> <detailed_desc>
               Verify the "innerText" property of HTMLTable with the benchmark file.<br />
               The benchmark file is located within the Project at Datapool\Bench\aFilename.ext<br />
               Note the unused reserved fields for FileFilter and FilterOptions.
              </detailed_desc> </description> </example>
        <example>
           <usage>T, Browser, HTMLTable, VerifyPropertyToFile, "innerText", c:\Dir\aFilename.ext</usage>
           <description> <short_desc>
               Verify the "innerText" property of HTMLTable with the benchmark file.
              </short_desc> <detailed_desc>
               Verify the "innerText" property of HTMLTable with the benchmark file.<br />
               The benchmark file is not located within the Project. It is at c:\Dir\aFilename.ext
              </detailed_desc> </description> </example>
        <example>
           <usage>T, Browser, HTMLTable, VerifyPropertyToFile, "innerText", c:\Dir\aFilename.ext, "UTF-8"</usage>
           <description> <short_desc>
               Verify the "innerText" property of HTMLTable with the benchmark file.
              </short_desc> <detailed_desc>
               Verify the "innerText" property of HTMLTable with the benchmark file.<br />
               The benchmark file is not located within the Project. It is at c:\Dir\aFilename.ext<br/>
               The benchmark file will be opened with "UTF-8" file-encoding.
              </detailed_desc> </description> </example>
     </examples></keyword>
     
  <keyword name="VERIFYCLIPBOARDTOFILE" 
           displayText="VerifyClipboardToFile" 
           expectFailSupport="YES" 
           expectWarnSupport="YES" 
           deprecated="NO">
           
       <description> <short_desc>
             Verify the current contents of the Windows clipboard with a benchmark file.
              </short_desc> <detailed_desc>
             Verify the current contents of the Windows clipboard with a benchmark file.<br />
             Typically, benchmarks are stored in the Datapool\Bench directory.
             In that event, only the filename.ext is needed.  There is currently
             a limit of 32K allowed for this type of comparison.  <br />
             The Window and Component objects are not validated and have no role.
             The Window and Component strings can be any text, but they cannot be blank.
             <p>
             The command will produce a TEST WARNING if the user has configured an 
             alternate DIFF tool for which we have no means to compare the diff results.
             If this WARNING is expected, the user should use the "TW" test record type.</p>
              </detailed_desc> </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" 
                   expectFailSupport="YES" 
                   expectWarnSupport="YES" >
	       <libraryInfo name="GenericMasterFunctions" 
                            doc="GenericMasterFunctions.htm" 
                            sourcecode="GenericMasterFunctions.sbl" 
                            class="ALL" />
           </engine>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20031211" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine name="WinRunner" 
	   		       since="20020827" 
	   		       tool="WinRunner" 
	   		       vendor="Mercury Interactive">
	   	       <libraryInfo class="ALL" 
	   				name="GenericMasterFunctions" 
	   				sourcecode="GenericMasterFunctions">
	   	       </libraryInfo>
           </engine>
		   <engine name="Test Complete" since="20111011" tool="TestComplete" vendor="Automated QA">
		       <libraryInfo class="GENERIC" 
				            name="GenericMasterFunctions" 
				            sourcecode="GenericMasterFunctions.SVB">
		       </libraryInfo>
	       </engine>            
       </engines>

       <parameters>
        <parameter name="BENCHMARKFILE" displayText="BenchmarkFile" optional="NO">
           <description> <short_desc>
             The name of the file used as the comparison benchmark.
              </short_desc> <detailed_desc>
             The name of the file used as the comparison benchmark.<br />
             Typically, benchmarks are stored in the Datapool\Bench directory.
             In that event, only the filename.ext is needed.
              </detailed_desc> </description> </parameter>
        <parameter name="FILTERMODE" displayText="FilterMode" optional="YES" default="">
           <description> <short_desc>
             (Future) Specify a file filter to use to process the text before comparison.
              </short_desc> </description> </parameter>
        <parameter name="FILTEROPTIONS" displayText="FilterOptions" optional="YES" default="">
           <description> <short_desc>
             (Future) Specify filter options to use with the file filter.
              </short_desc> </description> </parameter>
     </parameters><examples>
        <example>
           <usage>T, Browser, HTMLTable, VerifyClipboardToFile, aFilename.ext, "", ""</usage>
           <description> <short_desc>
               Verify the current clipboard contents with the benchmark file.
              </short_desc> <detailed_desc>
               Verify the current clipboard with the benchmark file.<br />
               The benchmark file is located within the Project at Datapool\Bench\aFilename.ext<br />
               Note the unused reserved fields for FileFilter and FilterOptions.
              </detailed_desc> </description> </example>
        <example>
           <usage>T, Anything, AtAll, VerifyClipboardToFile, c:\Dir\aFilename.ext</usage>
           <description> <short_desc>
               Verify the current clipboard contents with the benchmark file.
              </short_desc> <detailed_desc>
               Verify the current clipboard with the benchmark file.<br />
               The benchmark file is not located within the Project. It is at c:\Dir\aFilename.ext
              </detailed_desc> </description> </example>
     </examples></keyword>
     
  <keyword name="VERIFYCLIPBOARDVP" 
           displayText="VerifyClipboardVP" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description> <short_desc>
               Verify the current contents of the Windows clipboard using a Robot ClipboardVP.
              </short_desc> <detailed_desc>
               Verify the current contents of the Windows clipboard using a Robot ClipboardVP.<br />
               The benchmark VP must already exist as an asset of the currently running script.
               <p>
               If the provided VP is NOT a reference in the AppMap then a standard VP compare
               will occur with the typical VP parameter value like "VP=StoredVP".<br />
               However, if you wish to modify the ClipboardVP parameter values, such as
               specifying that the expected result = FAIL, then you must make an entry
               in the AppMap under the Component name to provide these modified parameters.</p>
               <p>
               The Window and Component objects are not validated and normally have no role.
               The Window and Component strings can normally be any text, but they cannot be blank.<br />
               However, the Component must be a valid section in the AppMap if we wish to store
               modified VP parameter settings.</p>
              </detailed_desc> </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" >
	       <libraryInfo name="GenericMasterFunctions" 
                            doc="GenericMasterFunctions.htm" 
                            sourcecode="GenericMasterFunctions.sbl" 
                            class="ALL" />
           </engine>
           <engine name="WinRunner" 
	   		       since="20020827" 
	   		       tool="WinRunner" 
	   		       vendor="Mercury Interactive">
	   	       <libraryInfo class="ALL" 
	   				name="GenericMasterFunctions" 
	   				sourcecode="GenericMasterFunctions">
	   	       </libraryInfo>
           </engine>
       </engines>

       <parameters>
        <parameter name="VPNAME" displayText="VPName" optional="NO">
           <description> <short_desc>
             The name of the ClipboardVP from the currently running script.
              </short_desc> </description> </parameter>
     </parameters><examples>
        <example>
           <usage>T, Nonsense, NonsenseToo, VerifyClipboardVP, ClipboardContentsVP</usage>
           <description> <short_desc>
               Verify the current contents of the Windows clipboard using the stored Robot ClipboardVP "ClipboardContentsVP".
              </short_desc> <detailed_desc>
               Verify the current contents of the Windows clipboard using the stored Robot ClipboardVP "ClipboardContentsVP".<br />
               No AppMap references for the ClipboardContentsVP performs a normal comparison.
              </detailed_desc> </description> </example>
        <example>
           <usage>T, Browser, Browser, VerifyClipboardVP, BrowserContentsVP</usage>
           <description> <short_desc>
               Verify the current contents of the Windows clipboard using the stored Robot ClipboardVP "BrowserContentsVP".
              </short_desc> <detailed_desc>
               Verify the current contents of the Windows clipboard using the stored Robot ClipboardVP "BrowserContentsVP".<br />
               If "BrowserContentsVP" is NOT in the AppMap then a VP compare will occur
               with the typical VP parameter value like VP=BrowserContentsVP.
               <p>
               However, if you wish to modify the ClipboardVP parameter values, such as
               specifying that the expected result = FAIL, then you must make an entry
               in the AppMap under the Component name to add these modified parameters.
               </p>
               <code>
               AppMap Example for Example #1:

               [Browser]
               Browser=Type=Window....
               ...
               BrowserContentsVP=ExpectedResult=FAIL;Wait=1,5
               </code>
              </detailed_desc> </description> </example>
        <example>
           <usage>T, Browser, HTMLTable, VerifyClipboardVP, TableContentsVP</usage>
           <description> <short_desc>
               Verify the current contents of the Windows clipboard using the stored Robot ClipboardVP "TableContentsVP".
              </short_desc> <detailed_desc>
               Verify the current contents of the Windows clipboard using the stored Robot ClipboardVP "TableContentsVP".<br />
               If "TableContentsVP" is NOT in the AppMap then a VP compare will occur
               with the typical VP parameter value like VP=TableContentsVP.
               <p>
               However, if you wish to modify the ClipboardVP parameter values, such as
               specifying that the expected result = FAIL, then you must make an entry
               in the AppMap under the Component name to add these modified parameters.
               </p><code>
               AppMap Example for Example #2:

               [Browser]
               Browser=Type=Window....
               HTMLTable=Type=HTMLTable....

               [HTMLTable]
               TableContentsVP=ExpectedResult=FAIL;Wait=1,5
               </code>
              </detailed_desc> </description> </example>
     </examples></keyword>
     
  <keyword name="INPUTKEYS" 
           displayText="InputKeys" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc>
                Sends keystrokes to the specified component.
              </short_desc>
              <detailed_desc>
                Sends keystrokes to the specified component.
                <p>
                Some engines cannot set keyboard focus to the component.  
                These engines will require the component already have keyboard focus before 
                calling this command.
                </p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" >
	       <libraryInfo name="GenericMasterFunctions" 
                            doc="GenericMasterFunctions.htm" 
                            sourcecode="GenericMasterFunctions.sbl" 
                            class="ALL" />
           </engine>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20030827" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20080918" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
           <engine name="WinRunner" 
	   		       since="20020827" 
	   		       tool="WinRunner" 
	   		       vendor="Mercury Interactive">
	   	       <libraryInfo class="ALL" 
	   				name="GenericMasterFunctions" 
	   				sourcecode="GenericMasterFunctions">
	   	       </libraryInfo>
           </engine>
           <engine vendor="Abbot" tool="Abbot" name="Abbot" since="20050923" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/abbot/CFComponent.html" 
                            sourcecode="org.safs.abbot.CFComponent.java,org.safs.abbot.jvmagent.agents.ComponentAgent.java" 
                            class="ALL" />
           </engine>
		   <engine vendor="OpenQA" tool="Selenium" name="Selenium" since="20070228" >
		    	<libraryInfo name="CFComponent" 
				doc="org/safs/selenium/CFComponent.html"
				sourcecode="org.safs.selenium.CFComponent.java" 
				class="CFComponent" />
	        </engine>
		    <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140527">
		        <libraryInfo name="CFComponent" 
				doc="org/safs/selenium/webdriver/CFComponent.html" 
				sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
				class="CFComponent" />
	        </engine>
		   <engine name="Test Complete" 
			   since="20110407" 
			   tool="TestComplete" 
			   vendor="Automated QA">
		       <libraryInfo class="GENERIC" 
				name="GenericMasterFunctions" 
				sourcecode="GenericMasterFunctions.SVB">
		       </libraryInfo>
	       </engine>
            <engine vendor="Google" tool="Android" name="Android" since="20121030" >
				<libraryInfo name="CFViewFunctions" 
					 doc="http://safsdev.sourceforge.net/doc/org/safs/android/CFViewFunctions.html" 
					 sourcecode="org.safs.android.CFViewFunctions.java" 
					 class="CFComponent" />
            	<domains>
            		<domain name="DEV" since="20121030">
	        			<libraryInfo name="ViewProcessor" 
                             doc="http://safsdev.sourceforge.net/doc/org/safs/android/engine/ViewProcessor.html" 
                             sourcecode="org.safs.android.engine.ViewProcessor.java" 
                             class="CFComponent" />
                    </domain>
                </domains>
            </engine>	       
       </engines>

       <parameters>
        <parameter name="TEXTVALUE" displayText="TextValue" optional="NO">
           <description>
              <short_desc>
                String of keystrokes to send.
              </short_desc>
              <detailed_desc>
                String of keystrokes to send.
                For RRAFS (RC): consult the documentation on the SQA InputKeys command for
                syntax information for special characters and keys.  This
                routine sends the provided string unmodified to the InputKeys
                command.
		<p>
		Note: the TID supports this command using 
		<a href="http://safsdev.sourceforge.net/doc/org/safs/tools/input/CreateUnicodeMap.html" 
		target="reference" alt="SAFS InputKeys Support Doc">InputKeys Support</a>.
		</p>
              </detailed_desc>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WINDOW, COMPONENT, INPUTKEYS, "Some Text to Input"</usage>
           <description>
              <short_desc>
               This action sends "Some Text to Input" as keystrokes to the COMPONENT object.
              </short_desc>
              <detailed_desc>
                <p>Field  5 : TQ String. case-sensitive text to send to the specified component.</p>
                <p><pre>Some Special Characters:
                {Enter}= ENTER key
                {Tab} = TAB key
                ^ = CONTROL Key with another key ( "^S" = CONTROL + s)
                %= ALT  Key with another key ("%F" = ALT + F)
                + = SHIFT key with another key ("+{Enter}" = SHIFT + ENTER)
                </pre></p>
                <p>Currently, we pass-thru to the underlying implementation (Rational SQABasic).
                Any future implementations will also use the same syntax.
                Note: Only valid for components that accept windows keyboard input</p>
                <p><b>Important Abbot note.</b> Presently, no special character handling is in place.
                If using the Abbot engine the keys will be sent litterally without interpretation.
                For example, {TAB} would be sent as those exact characters NOT the <i>tab</i> key.</p>
              </detailed_desc>
           </description>
        </example>

     </examples></keyword>
     
  <keyword name="INPUTCHARACTERS" 
           displayText="InputCharacters" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc>
                Sends literal text to the specified component.
              </short_desc>
              <detailed_desc>
                Sends literal text to the specified component.
                The InputChars command does not convert or interpret any special
                characters like InputKeys (InputKeystrokes) does.
                <p>
                Some engines cannot set keyboard focus to the component.  
                These engines will require the component already have keyboard focus before 
                calling this command.
                </p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" >
	       <libraryInfo name="GenericMasterFunctions" 
                            doc="GenericMasterFunctions.htm" 
                            sourcecode="GenericMasterFunctions.sbl" 
                            class="ALL" />
           </engine>
            <engine vendor="Google" tool="Android" name="Android" since="20120821" >
				<libraryInfo name="CFViewFunctions" 
					 doc="http://safsdev.sourceforge.net/doc/org/safs/android/CFViewFunctions.html" 
					 sourcecode="org.safs.android.CFViewFunctions.java" 
					 class="GENERIC" />
            	<domains>
            		<domain name="DEV" since="20120821">
	        			<libraryInfo name="ViewProcessor" 
                             doc="http://safsdev.sourceforge.net/doc/org/safs/android/engine/ViewProcessor.html" 
                             sourcecode="org.safs.android.engine.ViewProcessor.java" 
                             class="GENERIC" />
                    </domain>
                </domains>
            </engine>
           <engine vendor="Apple" tool="IOS" name="Apple XCode Instruments" since="20111026" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/ios/CFComponent.html" 
                            sourcecode="org.safs.ios.CFComponent.java" 
                            class="ALL" />
           </engine>
            <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20031208" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20080918" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
           <engine name="WinRunner" 
	   		       since="20020827" 
	   		       tool="WinRunner" 
	   		       vendor="Mercury Interactive">
	   	       <libraryInfo class="ALL" 
	   				name="GenericMasterFunctions" 
	   				sourcecode="GenericMasterFunctions">
	   	       </libraryInfo>
           </engine>
           <engine vendor="Abbot" tool="Abbot" name="Abbot" since="20050923" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/abbot/CFComponent.html" 
                            sourcecode="org.safs.abbot.CFComponent.java,org.safs.abbot.jvmagent.agents.ComponentAgent.java" 
                            class="ALL" />
           </engine>
	   <engine vendor="OpenQA" tool="Selenium" name="Selenium" since="20070130" >
	    	<libraryInfo name="CFComponent" 
			doc="org/safs/selenium/CFComponent.html" 
			sourcecode="org.safs.selenium.CFComponent.java" 
			class="CFComponent" />
            </engine>
	    <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140527">
	        <libraryInfo name="CFComponent" 
			doc="org/safs/selenium/webdriver/CFComponent.html" 
			sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
			class="CFComponent" />
            </engine>
       </engines>

       <parameters>
        <parameter name="TEXTVALUE" displayText="TextValue" optional="NO">
           <description>
              <short_desc>
                String of keystrokes to send.
              </short_desc>
              <detailed_desc>
                String of keystrokes to send.
                For RRAFS(RC): consult the documentation on the SQA InputChars command  This
                routine sends the provided string unmodified to the InputChars
                command.
              </detailed_desc>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WINDOW, WINDOW, INPUTCHARACTERS, "Some Text to Input"</usage>
           <description>
              <short_desc>
               This action sends "Some Text to Input" as keystrokes to the COMPONENT object.
              </short_desc>
              <detailed_desc>
                Field  5 : TQ String. Case-sensitive text to send to the specified component.
                The text will be sent as literal text, unmodified by the command
                Note: Only valid for components that accept windows keyboard input
              </detailed_desc>
           </description>
        </example>

     </examples></keyword>
     
  <keyword name="TYPEKEYS" 
           displayText="TypeKeys" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc>
                Sends keystrokes to whatever has keyboard focus.
              </short_desc>
              <detailed_desc>
                Sends keystrokes to whatever has keyboard focus.
                <p>
                No attempt is made to locate any specific window or component.  
                Keystrokes are simply sent to the system.
                </p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20100324" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
            <engine vendor="Google" tool="Android" name="Android" since="20130205" >
				<libraryInfo name="CFViewFunctions" 
					 doc="http://safsdev.sourceforge.net/doc/org/safs/android/CFViewFunctions.html" 
					 sourcecode="org.safs.android.CFViewFunctions.java" 
					 class="GENERIC" />
            	<domains>
            		<domain name="DEV" since="20130205">
	        			<libraryInfo name="ViewProcessor" 
                             doc="http://safsdev.sourceforge.net/doc/org/safs/android/engine/ViewProcessor.html" 
                             sourcecode="org.safs.android.engine.ViewProcessor.java" 
                             class="GENERIC" />
                    </domain>
                </domains>
            </engine>           
       </engines>

       <parameters>
        <parameter name="TEXTVALUE" displayText="TextValue" optional="NO">
           <description>
              <short_desc>
                String of keystrokes to send.
              </short_desc>
              <detailed_desc>
                String of keystrokes to send.
		Note: the TID supports this command using 
		<a href="http://safsdev.sourceforge.net/doc/org/safs/tools/input/CreateUnicodeMap.html" 
		target="reference" alt="SAFS InputKeys Support Doc">InputKeys Support</a>.
              </detailed_desc>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, Anything, At All, TYPEKEYS, "%F{ENTER}"</usage>
           <description>
              <short_desc>
               This action sends "ALT + F" then the ENTER key to the system.
              </short_desc>
              <detailed_desc>
                <p>Field  5 : TQ String. case-sensitive text to send.</p>
                <p><pre>Some Special Characters:
                {Enter}= ENTER key
                {Tab} = TAB key
                ^ = CONTROL Key with another key ( "^S" = CONTROL + s)
                %= ALT  Key with another key ("%F" = ALT + F)
                + = SHIFT key with another key ("+{Enter}" = SHIFT + ENTER)
                </pre></p>
              </detailed_desc>
           </description>
        </example>

     </examples></keyword>
     
  <keyword name="TYPECHARS" 
           displayText="TypeChars" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc>
                Sends literal text keystrokes to whatever has keyboard focus.
              </short_desc>
              <detailed_desc>
                Sends literal text keystrokes to whatever has keyboard focus.
                The TypeChars command does not convert or interpret any special
                characters like InputKeys or TypeKeys do.
                <p>
                No attempt is made to locate any specific window or component.  
                Keystrokes are simply sent to the system.
                </p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20100324" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
            <engine vendor="Google" tool="Android" name="Android" since="20130205" >
				<libraryInfo name="CFViewFunctions" 
					 doc="http://safsdev.sourceforge.net/doc/org/safs/android/CFViewFunctions.html" 
					 sourcecode="org.safs.android.CFViewFunctions.java" 
					 class="GENERIC" />
            	<domains>
            		<domain name="DEV" since="20130205">
	        			<libraryInfo name="ViewProcessor" 
                             doc="http://safsdev.sourceforge.net/doc/org/safs/android/engine/ViewProcessor.html" 
                             sourcecode="org.safs.android.engine.ViewProcessor.java" 
                             class="GENERIC" />
                    </domain>
                </domains>
            </engine>           
       </engines>

       <parameters>
        <parameter name="TEXTVALUE" displayText="TextValue" optional="NO">
           <description>
              <short_desc>
                String of keystrokes to send.
              </short_desc>
           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, Anything, At All, TYPECHARS, "Some Text to Input"</usage>
           <description>
              <short_desc>
               This action sends "Some Text to Input" as unmodified keystrokes to the system.
              </short_desc>
              <detailed_desc>
                Field  5 : TQ String. Case-sensitive text to send.
                The text will be sent as literal text, unmodified by the command.
              </detailed_desc>
           </description>
        </example>

     </examples></keyword>
     
  <keyword name="TYPEENCRYPTION" 
           displayText="TypeEncryption" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc>
                Sends secret-text (such as password) to whatever has keyboard focus.
              </short_desc>
              <detailed_desc>
                User needs to provide the path to the "encrypted text" and the path
                to the "private key".
              </detailed_desc>
              <note>
        		<value>
        			This keyword is only for secure machine in which the user/users responsible 
					for the safety and security of the private key are the only ones with 
					access to the machine.  The private key should NEVER be stored in 
					a more public location where unauthorized users may gain access to it.<br/>
        		</value>
    		  </note>
              <note>
        		<value>
        			To generate public key and private key, use following command:<br/>
        			java org.safs.RSA -gen -out outputfile<br/>
        			the outputfile will contain both keys, user should store them separatly in 2
        			files, keep the private key secret!!!<br/>
        		</value>
    		  </note>
              <note>
        		<value>
        			To encrypt the plain-text, use following command:<br/>
        			java org.safs.RSA -encrypt -data data/file -key publickey/file -out outputfile<br/>
        			the outputfile will contain the encrypted text.<br/>
        		</value>
    		  </note>
       </description>
           
       <engines>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20140403" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>          
       </engines>

       <parameters>
        <parameter name="ENCRYPTEDDATAFILE" displayText="EncryptedDataFile" optional="NO">
           <description>
              <short_desc>
                The full path of the file where the "encrypted data" is stored.
              </short_desc>
           </description>
        </parameter>
        <parameter name="PRIVATEKEYFILE" displayText="PrivateKeyFile" optional="NO">
           <description>
              <short_desc>
                The full path of the file where the "private key" is stored.
              </short_desc>
              <detailed_desc>
                <p>
                This file should be kept VERY SECRECT, only the authorized users can access it.
                </p>
              </detailed_desc>              
           </description>
        </parameter>        
     </parameters>
     
     <examples>
        <example>
           <usage>T, Anything, At All, TypeEncryption, "C:\safs\passwords\application.pass", "D:\secretPath\private.key" </usage>
           <description>
              <short_desc>
               Decrypt the data stored in file "C:\safs\passwords\application.pass" and 
               input the decrypted-data as unmodified keystrokes to the system.
              </short_desc>
              <detailed_desc>
                The text will be sent as literal text, unmodified by the command.
              </detailed_desc>
           </description>
        </example>
     </examples>
  </keyword>
          
  <keyword name="VERIFYPROPERTIESTOFILE" 
           displayText="VerifyPropertiesToFile" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description> <short_desc>
             Compare/Verify ALL of the value properties of a test object with a benchmark file.
              </short_desc> <detailed_desc>
             Compare/Verify all of the value properties of a test object with a benchmark file.
             The benchmark file is expected to be stored in the active "Bench" directory.  
             If you specify a relative path, the path will be relative to the project
             directory.  The directory for a full or relative path must already exist.
              </detailed_desc> </description>
           
       <engines>
           <engine vendor="Apple" tool="IOS" name="Apple XCode Instruments" since="20111118" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/ios/CFComponent.html" 
                            sourcecode="org.safs.ios.CFComponent.java" 
                            class="ALL" />
           </engine>
            <engine vendor="Google" tool="Android" name="Android" since="20120814" >
				<libraryInfo name="CFViewFunctions" 
					 doc="http://safsdev.sourceforge.net/doc/org/safs/android/CFViewFunctions.html" 
					 sourcecode="org.safs.android.CFViewFunctions.java" 
					 class="GENERIC" />
            	<domains>
            		<domain name="DEV" since="20120814">
	        			<libraryInfo name="ViewProcessor" 
                             doc="http://safsdev.sourceforge.net/doc/org/safs/android/engine/ViewProcessor.html" 
                             sourcecode="org.safs.android.engine.ViewProcessor.java" 
                             class="GENERIC" />
                    </domain>
                </domains>
            </engine>
		    <engine vendor="OpenQA" tool="Selenium" name="Selenium" since="20140804">
		        <libraryInfo name="CFComponent" 
				doc="org/safs/selenium/CFComponent.html" 
				sourcecode="org.safs.selenium.CFComponent.java" 
				class="CFComponent"/>
	        </engine>
		    <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140804">
		        <libraryInfo name="CFComponent" 
				doc="org/safs/selenium/webdriver/CFComponent.html" 
				sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
				class="CFComponent"/>
	        </engine>
       </engines>

       <parameters>
        <parameter name="BENCHFILE" displayText="BenchFile" optional="NO">
           <description> <short_desc>
             The name of the file used to store the benchmark property data.
              </short_desc> <detailed_desc>
             The name of the file used to store the benchmark property data.
             By default, the files are expected in the active "Bench" directory.  
             If you specify a relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
              </detailed_desc> </description> </parameter>
        <parameter name="FILEENCODING" displayText="FileEncoding" optional="YES" default="">
           <description> <short_desc>
             Specify a character encoding to be used when loading data from the file.
             </short_desc>
             <detailed_desc>
             Specify a character encoding to be used when loading data from the file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            </detailed_desc> </description>
        </parameter>              
     </parameters><examples>
        <example>
           <usage>T, Window, Comp, VerifyPropertiesToFile, aFilename.ext</usage>
           <description> <short_desc>
               Verify the Comp properties against the benchmark file.
              </short_desc> <detailed_desc>
               Verify the Comp properties against the benchmark file.
              </detailed_desc> </description> </example>
        <example>
           <usage>T, Window, Comp, VerifyPropertiesToFile, aFilename.properties, "UTF-8"</usage>
           <description> <short_desc>
               Verify the Comp properties against the benchmark file read in as UTF-8 encoded.
              </short_desc> <detailed_desc>
               Verify the Comp properties against the benchmark file read as UTF-8 encoded.
              </detailed_desc> </description> </example>
     </examples></keyword>
     
  <keyword name="VERIFYPROPERTIESSUBSETTOFILE" 
           displayText="VerifyPropertiesSubsetToFile" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description> <short_desc>
             Compare/Verify the subset of properties of a test object with the values stored in a benchmark file.
              </short_desc> <detailed_desc>
             Compare/Verify the subset of properties of a test object with the values stored in a benchmark file.
             <p>Only the properties stored in the benchmark are compared against the properties of the test object.</p>
             The benchmark file is expected to be stored in the active "Bench" directory.  
             If you specify a relative path, the path will be relative to the project
             directory.  The directory for a full or relative path must already exist.
              </detailed_desc> </description>
           
       <engines>
	    <engine vendor="OpenQA" tool="Selenium" name="Selenium" since="20141024">
		        <libraryInfo name="CFComponent" 
				doc="org/safs/selenium/CFComponent.html" 
				sourcecode="org.safs.selenium.CFComponent.java" 
				class="CFComponent"/>
            </engine>
	    <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20141024">
		        <libraryInfo name="CFComponent" 
				doc="org/safs/selenium/webdriver/CFComponent.html" 
				sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
				class="CFComponent"/>
	    </engine>
       </engines>

       <parameters>
        <parameter name="BENCHFILE" displayText="BenchFile" optional="NO">
           <description> <short_desc>
             The name of the file used to store the benchmark property data.
              </short_desc> <detailed_desc>
             The name of the file used to store the benchmark property data.
             By default, the files are expected in the active "Bench" directory.  
             If you specify a relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
              </detailed_desc> </description> </parameter>
        <parameter name="FILEENCODING" displayText="FileEncoding" optional="YES" default="">
           <description> <short_desc>
             Specify a character encoding to be used when loading data from the file.
             </short_desc>
             <detailed_desc>
             Specify a character encoding to be used when loading data from the file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            </detailed_desc> </description>
        </parameter>              
     </parameters><examples>
        <example>
           <usage>T, Window, Comp, VerifyPropertiesSubsetToFile, aFilename.ext</usage>
           <description> <short_desc>
               Verify the Comp properties against the subset of properties in the benchmark file.
              </short_desc> <detailed_desc>
               Verify the Comp properties against the subset of properties in the benchmark file.
              </detailed_desc> </description> </example>
        <example>
           <usage>T, Window, Comp, VerifyPropertiesSubsetToFile, aFilename.properties, "UTF-8"</usage>
           <description> <short_desc>
               Verify the Comp properties against the benchmark file read in as UTF-8 encoded.
              </short_desc> <detailed_desc>
               Verify the Comp properties against the benchmark file read as UTF-8 encoded.
              </detailed_desc> </description> </example>
     </examples></keyword>
     
  <keyword name="SHOWONPAGE" 
           displayText="ShowOnPage" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description> <short_desc>
             Make the component visible on the page.
              </short_desc> <detailed_desc>
             Make the component visible on the page.
              </detailed_desc> </description>
           
       <engines>
	    <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20150511">
		        <libraryInfo name="CFComponent" 
				doc="org/safs/selenium/webdriver/CFComponent.html" 
				sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
				class="CFComponent"/>
	    </engine>
       </engines>

       <parameters>
           <parameter name="VERIFY" displayText="verify" optional="YES" default="False">
           <description>
             <short_desc>"True" to verify that the component is shown on page.</short_desc>
             <detailed_desc>
               This parameter is boolean, default value is false. 
               Verify that the component is shown on page if this parameter is true.
             </detailed_desc> </description> </parameter>             
       </parameters>
     <examples>
        <example>
           <usage>T, Window, Comp</usage>
           <description> <short_desc>
               Show the component Comp on the page, make it visible.
              </short_desc>
           </description> </example>
        <example>
           <usage>T, Window, Comp, True</usage>
           <description> <short_desc>
               Show the component Comp on the page, make it visible. And verify that this
               component is shown.
              </short_desc>
           </description> </example>
     </examples></keyword>

  <keyword name="VERIFYTABORDER" 
           displayText="VerifyTabOrder" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc>
                 Attempts to verify the tab order of the specified object--usually a Window.
              </short_desc>
              <detailed_desc> <p>
  Attempts to verify the tab order of the current object--usually a Window.
  A file is used to store the correct tab order of the interface. </p><p>

  The file is simply a list of component names in the order we expect to find
  them as we tab through the interface.  Each line in the file will contain a
  single component name.  That can be either the real valid Name given to the
  component by development, or the name for the component from the AppMap.  The
  AppMap name is highly recommended to reduce maintenance of the tab order file.
  Blank lines or commented lines are ignored.  Comment lines begin with
  apostrophe(') or semi-colon(;) characters.</p><p>

  Example file:
  <ul>
          <li>;Tab Order Benchmark File</li>
          <li>;For ClassicC Login Window</li>
          <li>(blank)</li>
          <li>UserIDComboBox</li>
          <li>PasswordEditBox</li>
          <li>RememberCheckBox</li>
          <li>(blank)</li>
          <li>OKButton</li>
          <li>CancelButton</li>
  </ul>
  This file would normally be placed in the Datapool\Bench directory.</p><p>

  The function will verify that the object order in the interface is the same
  object order that is in the file. This is done by checking the FOCUS
  Property of the current object and using the TAB key for navigation.
  Thus, navigation by the TAB key must be supported by the application.</p><p>

  The routine will only check the tab order for the number of items found
  in the tab order benchmark file.  Thus, the user can perform partial tests
  on different portions of the interface at different times.  Just make sure
  that the item that currently has the focus is the first item in the tab order
  benchmark file when invoking this command.</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" >
	       <libraryInfo name="GenericMasterFunctions" 
                            doc="GenericMasterFunctions.htm" 
                            sourcecode="GenericMasterFunctions.sbl" 
                            class="ALL" />
           </engine>
           <engine name="WinRunner" 
	   		       since="20020827" 
	   		       tool="WinRunner" 
	   		       vendor="Mercury Interactive">
	   	       <libraryInfo class="ALL" 
	   				name="GenericMasterFunctions" 
	   				sourcecode="GenericMasterFunctions">
	   	       </libraryInfo>
           </engine>
       </engines>

       <parameters>
        <parameter name="FILENAME" displayText="FileName" optional="NO">
           <description>
              <short_desc>
                Filename of TabOrder benchmark file.
              </short_desc>
              <detailed_desc>
                Filename of TabOrder benchmark file.<p>
                The file is simply a list of component names in the order we expect to find
                them as we tab through the interface.  Each line in the file will contain a
                single component name.</p><p>
                This file would normally be placed in the Datapool\Bench directory.</p>
              </detailed_desc>
           </description>
        </parameter>
     </parameters><examples>
        <example>
           <usage>T, Window, Window, VerifyTabOrder, FileName</usage>
           <description>
              <short_desc>
                 Used to verify the taborder of the specified Window.
              </short_desc>
              <detailed_desc>
                 Used to verify the taborder of the specified Window.
                 The FileName can include the full path to the file.
              </detailed_desc>
           </description>
        </example>
        <example>
           <usage>T, Window, Component, VerifyTabOrder, FileName</usage>
           <description>
              <short_desc>
                 Used to verify the taborder of the specified component.
              </short_desc>
              <detailed_desc>
                 Used to verify the taborder of the specified component.
                 This is for other components that may have embedded child objects of
                 their own that allow us to test the tab order.  This is likely rare.
                 The FileName can include the full path in which case that will be used.
              </detailed_desc>
           </description>
        </example>

     </examples></keyword>
     
  <keyword name="VERIFYFILETOFILE" 
           displayText="VerifyFileToFile" 
           expectFailSupport="YES" 
           expectWarnSupport="YES" 
           deprecated="NO">
           
       <description> <short_desc> 
             Verify the current contents of a text file with a benchmark file (same as VerifyTextFileToFile).
              </short_desc> <detailed_desc>
             Verify the current contents of a text file with a benchmark file (same as VerifyTextFileToFile).<br />
             Typically, benchmarks are stored in the Datapool\Bench directory.  
             Typically, files to test are stored in the Datapool\Test directory.  
             In that event, the filename.ext is needed for both files.<br />
             The Window and Component objects are not validated and have no role.
             The Window and Component strings can be any text, but they cannot be blank.
             <p>
             The command may produce a WARNING if a diff tool for which we 
             have no means to verify the results is configured for use.  
             Consequently, if these warnings are expected, the user can use the 
             "TW" test record type to avoid issuing these warnings.</p>
              </detailed_desc> </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" 
                   expectFailSupport="YES" 
                   expectWarnSupport="YES" >
	       <libraryInfo name="GenericMasterFunctions" 
                            doc="GenericMasterFunctions.htm" 
                            sourcecode="GenericMasterFunctions.sbl" 
                            class="ALL" />
           </engine>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20031211" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20060314" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
		   <engine name="Test Complete" since="20110930" tool="TestComplete" vendor="Automated QA">
		       <libraryInfo class="GENERIC" 
				            name="GenericMasterFunctions" 
				            sourcecode="GenericMasterFunctions.SVB">
		       </libraryInfo>
	       </engine>            
       </engines>

       <parameters>
        <parameter name="BENCHMARKFILE" displayText="BenchmarkFile" optional="NO">
           <description> <short_desc> 
             File used as the comparison benchmark.
              </short_desc> <detailed_desc>
             File used as the comparison benchmark.<br />
             This can be a full path, a relative path, or a file name. If
             it is a filename, it is expected to be in the project's 
             Datapool\Bench directory. If it is a relative path, 
             FindSQAFile is used to located the file.
              </detailed_desc> </description> </parameter>
        <parameter name="ACTUALFILE" displayText="ActualFile" optional="NO">
           <description> <short_desc> 
             File used as the comparison file under test.
              </short_desc> <detailed_desc>
             File used as the comparison file under test.<br />
             This can be a full path, a relative path, or a file name. If
             it is a relative path or a file name, the command will try to
             find the file in the project's Datapool\Test directory.
              </detailed_desc> </description> </parameter>
        <parameter name="FILTERMODE" displayText="FilterMode" optional="YES" default="">
           <description> <short_desc> 
             (Future) Specify a file filter to use to process the text before comparison.
              </short_desc> </description> </parameter>
        <parameter name="FILTEROPTIONS" displayText="FilterOptions" optional="YES" default="">
           <description> <short_desc> 
             (Future) Specify filter options to use with the file filter.
              </short_desc> </description> </parameter>
     </parameters><examples>
        <example>
           <usage>T, Browser, HTMLTable, VerifyFileToFile, bFilename.ext, aFilename.ext, "", ""</usage>
           <description> <short_desc> 
               Verify a test text file with the benchmark file (same as VerifyTextFileToFile).
              </short_desc> <detailed_desc> 
               Verify the test text file with the benchmark file (same as VerifyTextFileToFile).
               The benchmark file is located within the Project at Datapool\Bench\bFilename.ext<br />
               The test file is located within the Project at Datapool\Test\aFilename.ext<br />
               Note the unused reserved fields for FileFilter and FilterOptions.
              </detailed_desc> </description> </example>
        <example>
           <usage>T, Anything, AtAll, VerifyFileToFile, c:\Dir\bFilename.ext, c:\Dir\aFilename.ext</usage>
           <description> <short_desc> 
               Verify a test text file with the benchmark file (same as VerifyTextFileToFile).
              </short_desc> <detailed_desc> 
               Verify the test text file with the benchmark file (same as VerifyTextFileToFile).<br />
               The benchmark file is not located within the Project. It is at c:\Dir\bFilename.ext
               The test file is not located within the Project. It is at c:\Dir\aFilename.ext
              </detailed_desc> </description> </example>
     </examples></keyword>
     
  <keyword name="VERIFYTEXTFILETOFILE" 
           displayText="VerifyTextFileToFile" 
           expectFailSupport="YES" 
           expectWarnSupport="YES" 
           deprecated="NO">
           
       <description> <short_desc> 
             Verify the current contents of a text file with a benchmark file (same as VerifyFileToFile).
              </short_desc> <detailed_desc>
             Verify the current contents of a text file with a benchmark file (same as VerifyFileToFile).<br />
             Typically, benchmarks are stored in the Datapool\Bench directory.  
             Typically, files to test are stored in the Datapool\Test directory.  
             In that event, the filename.ext is needed for both files.<br />
             The Window and Component objects are not validated and have no role.
             The Window and Component strings can be any text, but they cannot be blank.
             <p>
             The command may produce a WARNING if a diff tool for which we 
             have no means to verify the results is configured for use.  
             Consequently, if these warnings are expected, the user can use the 
             "TW" test record type to avoid issuing these warnings.</p>
              </detailed_desc> </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" 
                   expectFailSupport="YES" 
                   expectWarnSupport="YES" >
	       <libraryInfo name="GenericMasterFunctions" 
                            doc="GenericMasterFunctions.htm" 
                            sourcecode="GenericMasterFunctions.sbl" 
                            class="ALL" />
           </engine>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20030827" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20060314" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
		   <engine name="Test Complete" since="20110930" tool="TestComplete" vendor="Automated QA">
		       <libraryInfo class="GENERIC" 
				            name="GenericMasterFunctions" 
				            sourcecode="GenericMasterFunctions.SVB">
		       </libraryInfo>
	       </engine>            
       </engines>

       <parameters>
        <parameter name="BENCHMARKFILE" displayText="BenchmarkFile" optional="NO">
           <description> <short_desc> 
             File used as the comparison benchmark.
              </short_desc> <detailed_desc>
             File used as the comparison benchmark.<br />
             This can be a full path, a relative path, or a file name. If
             it is a filename, it is expected to be in the project's 
             Datapool\Bench directory. If it is a relative path, 
             FindSQAFile is used to located the file.
              </detailed_desc> </description> </parameter>
        <parameter name="ACTUALFILE" displayText="ActualFile" optional="NO">
           <description> <short_desc> 
             File used as the comparison file under test.
              </short_desc> <detailed_desc>
             File used as the comparison file under test.<br />
             This can be a full path, a relative path, or a file name. If
             it is a relative path or a file name, the command will try to
             find the file in the project's Datapool\Test directory.
              </detailed_desc> </description> </parameter>
        <parameter name="FILTERMODE" displayText="FilterMode" optional="YES" default="">
           <description> <short_desc> 
             (Future) Specify a file filter to use to process the text before comparison.
              </short_desc> </description> </parameter>
        <parameter name="FILTEROPTIONS" displayText="FilterOptions" optional="YES" default="">
           <description> <short_desc> 
             (Future) Specify filter options to use with the file filter.
              </short_desc> </description> </parameter>
     </parameters><examples>
        <example>
           <usage>T, Browser, HTMLTable, VerifyTextFileToFile, bFilename.ext, aFilename.ext, "", ""</usage>
           <description> <short_desc> 
               Verify a test text file with the benchmark file (same as VerifyFileToFile).
              </short_desc> <detailed_desc> 
               Verify the test text file with the benchmark file (same as VerifyFileToFile).
               The benchmark file is located within the Project at Datapool\Bench\bFilename.ext<br />
               The test file is located within the Project at Datapool\Test\aFilename.ext<br />
               Note the unused reserved fields for FileFilter and FilterOptions.
              </detailed_desc> </description> </example>
        <example>
           <usage>T, Anything, AtAll, VerifyTextFileToFile, c:\Dir\bFilename.ext, c:\Dir\aFilename.ext</usage>
           <description> <short_desc> 
               Verify a test text file with the benchmark file (same as VerifyFileToFile).
              </short_desc> <detailed_desc> 
               Verify the test text file with the benchmark file (same as VerifyFileToFile).<br />
               The benchmark file is not located within the Project. It is at c:\Dir\bFilename.ext
               The test file is not located within the Project. It is at c:\Dir\aFilename.ext
              </detailed_desc> </description> </example>
     </examples></keyword>
     
  <keyword name="VERIFYBINARYFILETOFILE" 
           displayText="VerifyBinaryFileToFile" 
           expectFailSupport="YES" 
           expectWarnSupport="YES" 
           deprecated="NO">
           
       <description> <short_desc> 
             Verify the current contents of a binary file with a benchmark file.
              </short_desc> <detailed_desc>
             Verify the current contents of a binary file with a benchmark file.<br />
             Typically, benchmarks are stored in the Datapool\Bench directory.  
             Typically, files to test are stored in the Datapool\Test directory.  
             In that event, the filename.ext is needed for both files.<br />
             The Window and Component objects are not validated and have no role.
             The Window and Component strings can be any text, but they cannot be blank.
             <p>
             The command may produce a WARNING if a diff tool for which we 
             have no means to verify the results is configured for use.  
             Consequently, if these warnings are expected, the user can use the 
             "TW" test record type to avoid issuing these warnings.</p>
              </detailed_desc> </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" 
                   expectFailSupport="YES" 
                   expectWarnSupport="YES" >
	       <libraryInfo name="GenericMasterFunctions" 
                            doc="GenericMasterFunctions.htm" 
                            sourcecode="GenericMasterFunctions.sbl" 
                            class="ALL" />
           </engine>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20031209" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20060314" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
		   <engine name="Test Complete" since="20110930" tool="TestComplete" vendor="Automated QA">
		       <libraryInfo class="GENERIC" 
				            name="GenericMasterFunctions" 
				            sourcecode="GenericMasterFunctions.SVB">
		       </libraryInfo>
	       </engine>            
       </engines>

       <parameters>
        <parameter name="BENCHMARKFILE" displayText="BenchmarkFile" optional="NO">
           <description> <short_desc> 
             File used as the comparison benchmark.
              </short_desc> <detailed_desc>
             File used as the comparison benchmark.<br />
             This can be a full path, a relative path, or a file name. If
             it is a filename, it is expected to be in the project's 
             Datapool\Bench directory. If it is a relative path, 
             FindSQAFile is used to located the file.
              </detailed_desc> </description> </parameter>
        <parameter name="ACTUALFILE" displayText="ActualFile" optional="NO">
           <description> <short_desc> 
             File used as the comparison file under test.
              </short_desc> <detailed_desc>
             File used as the comparison file under test.<br />
             This can be a full path, a relative path, or a file name. If
             it is a relative path or a file name, the command will try to
             find the file in the project's Datapool\Test directory.
              </detailed_desc> </description> </parameter>
        <parameter name="FILTERMODE" displayText="FilterMode" optional="YES" default="">
           <description> <short_desc> 
                Specify a filter to use to process the file content before comparison.
              </short_desc><detailed_desc>
                Specify a filter to use to process the file content before comparison.<br/>
                "TOLERANCE", valid if the 2 binary files are images, this represents BitTolerance.<br/>
              </detailed_desc>
           </description> </parameter>
        <parameter name="FILTEROPTIONS" displayText="FilterOptions" optional="YES" default="">
           <description> <short_desc> 
                Specify filter options to use with the filter.
              </short_desc><detailed_desc>
                Specify filter options to use with the filter.<br/>
                If the filter is "TOLERANCE", this value should be an integer between 0 and 100.
                100 means only 100% match, 2 images will be considered matched;
                0 means even no bits match, 2 images will be considered matched.<br/> 
              </detailed_desc>
              </description> </parameter>
     </parameters><examples>
        <example>
           <usage>T, Browser, HTMLTable, VerifyBinaryFileToFile, bFilename.ext, aFilename.ext, "", ""</usage>
           <description> <short_desc> 
               Verify a test binary file with the benchmark file.
              </short_desc> <detailed_desc> 
               Verify the test binary file with the benchmark file.
               The benchmark file is located within the Project at Datapool\Bench\bFilename.ext<br />
               The test file is located within the Project at Datapool\Test\aFilename.ext<br />
               Note the unused reserved fields for FileFilter and FilterOptions.
              </detailed_desc> </description> </example>
        <example>
           <usage>T, Anything, AtAll, VerifyBinaryFileToFile, c:\Dir\bFilename.ext, c:\Dir\aFilename.ext</usage>
           <description> <short_desc> 
               Verify a test text file with the benchmark file.
              </short_desc> <detailed_desc> 
               Verify the test text file with the benchmark file.<br />
               The benchmark file is not located within the Project. It is at c:\Dir\bFilename.ext
               The test file is not located within the Project. It is at c:\Dir\aFilename.ext
              </detailed_desc> </description> </example>
        <example>
           <usage>T, Anything, AtAll, VerifyBinaryFileToFile, c:\Dir\bFilename.png, c:\Dir\aFilename.png, "Tolerance", "90"</usage>
           <description> <short_desc> 
               Verify a test image file with the benchmark image file, with bit-tolerance as 90%.
              </short_desc> <detailed_desc> 
               Verify a test image file with the benchmark image file, with bit-tolerance as 90%.
               If the 2 image files have 90% bits matched, then the verification will succeed.
              </detailed_desc> </description> </example>
     </examples></keyword>
     
  <keyword name="GETGUIIMAGE" 
           displayText="GetGUIImage" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description> <short_desc>
               Capture the screen shot of a GUI component and save it to a file
              </short_desc> <detailed_desc>
               Capture the screen shot of a GUI component and save it to a file.
               The available formats for the output file are BITMAP (*.bmp) and JPEG
               (*.jpg). 
               For RJ and IBT engine, other formats like TIFF (*.tif), GIF (*.gif), 
               PNG (*.png) and PNM (*.pnm) are also supported.
               Optionally the user can specify part of the component to capture.
               <p>
               The specified GUI component/part must be in the viewing range of its 
               containing window. If portion of the component is displayed in the 
               window, only that portion will be captured; if the component falls
               completely out of the viewing range of the window, the command will 
               fail. The command makes no attempt to bring the component into view.
               </p>
               <p>
               <B>Robot Classic (RC) Specific Notes:</B><br />  
               		1) This command may fail to execute if the user has turned off logging 
              	 	to TestManager via the Robot tools setting.  You may have to enable 
               		TestManager logging for the command to successfully execute.<br />
               		2) This command requires that the TestManager Image Comparator tool is
               		installed on the test machine. Machines having only the Robot Test Agent
               		installed will not be able to use this command.<br />
               		3) Due to a bug in Robot Classic, images captured using the Robot Classic
			engine may differ in image size and/or file size from those captured using 
			other supported engines.  Depending on the comparator used, rebenching
               		your images may be necessary when migrating to another engine.
               </p>
               <p>
               <B>RobotJ (RJ) and IBT Specific Notes:</B><br />
               		1)It requires that Java Advanced Imaging (JAI) be installed
               		on the test machine<BR/>
               		2)It supports to save image in format TIFF (*.tif), GIF (*.gif), PNG (*.png)
               		and PNM (*.pnm) 
               </p>
               <p>
               <B>Apple IOS specific Notes:</B><br />
               UIAutomation captures all screenshots as PNG images, but SAFS copies and stores them 
               into the image format desired (JPG, BMP, etc.). However, the rootname of the desired 
               output image name must be unique to avoid UIAutomation generating indexed image names 
               we will not be looking for.<br/>
               For example, specifying MyImage.JPG and later MyImage.BMP will cause UIAutomation to capture 
               MyImage.PNG and MyImage1.PNG. When attempting to find MyImage.PNG captured for MyImage.BMP 
               we will retrieve MyImage.PNG which is NOT the correct image capture for MyImage.BMP.
               </p>
       </detailed_desc> </description>
           
       <engines>
            <engine vendor="Google" tool="Android" name="Android" since="20120501" >
				<libraryInfo name="CFViewFunctions" 
					 doc="http://safsdev.sourceforge.net/doc/org/safs/android/CFViewFunctions.html" 
					 sourcecode="org.safs.android.CFViewFunctions.java" 
					 class="GENERIC" />
            	<domains>
            		<domain name="DEV" since="20120501">
	        			<libraryInfo name="ViewProcessor" 
                             doc="http://safsdev.sourceforge.net/doc/org/safs/android/engine/ViewProcessor.html" 
                             sourcecode="org.safs.android.engine.ViewProcessor.java" 
                             class="GENERIC" />
                    </domain>
                </domains>
            </engine>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" >
	       <libraryInfo name="GenericMasterFunctions" 
                            doc="GenericMasterFunctions.htm" 
                            sourcecode="GenericMasterFunctions.sbl" 
                            class="ALL" />
           </engine>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20051021" >
	   	<libraryInfo name="CFComponent" 
	                     doc="org/safs/rational/CFComponent.html" 
	                     sourcecode="org.safs.rational.CFComponent.java" 
	                     class="ALL" />
           </engine>
           <engine vendor="Apple" tool="IOS" name="Apple XCode Instruments" since="20111115" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/ios/CFComponent.html" 
                            sourcecode="org.safs.ios.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20080926" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
	  	   <engine vendor="OpenQA" tool="Selenium" name="Selenium" since="20070130" >
	    	<libraryInfo name="CFComponent" 
			doc="org/safs/selenium/CFComponent.html" 
			sourcecode="org.safs.selenium.CFComponent.java" 
			class="ALL" />
            </engine>
	      <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140124">
	        <libraryInfo name="CFComponent" 
			doc="org/safs/selenium/webdriver/CFComponent.html" 
			sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
			class="CFComponent" />
            </engine>
		   <engine name="Test Complete" 
			   since="20110407" 
			   tool="TestComplete" 
			   vendor="Automated QA">
		       <libraryInfo class="GENERIC" 
				name="GenericMasterFunctions" 
				sourcecode="GenericMasterFunctions.SVB">
		       </libraryInfo>
	       </engine>
       </engines>

       <parameters>
        <parameter name="OUTPUTFILE" displayText="OutputFile" optional="NO">
           <description> <short_desc>
             Path (with filename) to the output image file.
              </short_desc> <detailed_desc>
              Path/file name of the output image file.
              This can be a full path, a relative path or just a file name. If
              relative, it is appended to the Datapool directory; if only a
              file name without path, the file will be saved in Datapool\Test
              directory. The extension of the file must be either .bmp or
              .jpg. If not, .bmp is appended to this parameter to force a
              BITMAP export.
              </detailed_desc> </description> </parameter>
        <parameter name="SUBAREA" displayText="SubArea" optional="YES">
           <description> <short_desc>
             Optional app map subkey indicating partial image of the component to capture.
              </short_desc> <detailed_desc>
              Optional app map subkey indicating partial image of the component to capture.
              Value of this app map reference must be in the format of a
              top-left and bottom-right pair, and can be either absolute
              coordinates or percentages ("x1,y1,x2,y2" or "x1%,y1%,x2%,y2%").
              Coordinates are relative to the component, i.e. (0,0) and
              (0%,0%) are the minimum, and (COMPONENT_WIDTH, COMPONENT_HEIGHT)
              and (100%,100%) are the maximum. Values exceeding the minimun/
              maximum are forced to the nearest limiting value. Absolute and
              percent values can be mixed, so "0,0,50%,50%" is valid. If this
              parameter is omitted, full image of the component is captured
              (equivalent to "0,0,100%,100%").
              </detailed_desc> </description> </parameter>
        <parameter name="FILTEREDAREAS" displayText="FilteredAreas" optional="YES">
           <description> <short_desc>
              "<b>Filter=</b>one or multiple areas" to filter the GUI image (or sub image of GUI if the parameter "SubArea" is present)
             </short_desc> <detailed_desc>
              "<b>Filter=</b>one or multiple areas" to filter the GUI image (or sub image of GUI if the parameter "SubArea" is present)<br/>
              The area is in the same format described for the parameter "SubArea".<br/>
              Multiple areas are separated by a space character, such as "subarea1 subarea2 subarea3"<br/>
              The filtered-image will be covered by black color at filtered areas.<br/>
              Do NOT forget the prefix "Filter=", without it this parameter will be ignored.
             </detailed_desc> </description> </parameter>
     </parameters><examples>
        <example>
           <usage>T, WINDOW, COMPONENT, GetGUIImage, "C:\comp.bmp"</usage>
           <description> <short_desc>
             Save the full component image to BITMAP file "C:\comp.bmp".
              </short_desc> </description> </example>
        <example>
           <usage>T, WINDOW, COMPONENT, GetGUIImage, "Datapool\comp.jpg"</usage>
           <description> <short_desc>
             Save the full component image to JPEG file "&lt;project&gt;\Datapool\comp.jpg".
              </short_desc> </description> </example>
        <example>
           <usage>T, WINDOW, COMPONENT, GetGUIImage, "Datapool\Logs\comp.bmp", SUBAREA</usage>
           <description> <short_desc>
             Save specified part of the component image.
              </short_desc> <detailed_desc>
              Save specified part of the component image.
              Depending on the definition of SUBAREA in the app map, the command captures:<br/>

              UNDER [COMPONENT] IN APP MAP    PART OF COMPONENT<br/>
              ----------------------------    ---------------------<br/>
              SUBAREA="0,0,10,10"             top-left 10x10 square<br/>
              SUBAREA="0,80%,100%,100%"       bottom fifth<br/>
              </detailed_desc> </description> </example>
        <example>
           <usage>T, WINDOW, COMPONENT, GetGUIImage, "Datapool\comp.jpg", "", "Filter=0;0;10;10"</usage>
           <description> <short_desc>
             Get the component image and filter some parts and save it.
              </short_desc> <detailed_desc>
             Get the full component image and draw a "10*10 black quare" at the top-left, 
             then save it to JPEG file "&lt;project&gt;\Datapool\comp.jpg".
              </detailed_desc> </description> </example>
        <example>
           <usage>T, WINDOW, COMPONENT, GetGUIImage, "comp.jpg", "", "FilterMapKey"</usage>
           <description> <short_desc>
             Get the component image and filter some parts and save it.
              </short_desc> <detailed_desc>
             Get the full component image, and draw "10x10 black square" at "top-left" and "10x15 black rectangle" at "60,60"
             to make a filtered image, and save the filtered image.<br/>
              ----------------------------        Map           ---------------------<br/>
              [COMPONENT]<br/>
              FilterMapKey="Filter=0,0,10,10 60,60,10,15"<br/>
              </detailed_desc> </description> </example>
     </examples></keyword>
     
  <keyword name="VERIFYGUIIMAGETOFILE" 
           displayText="VerifyGUIImageToFile" 
           expectFailSupport="YES" 
           expectWarnSupport="YES" 
           deprecated="NO">
           
       <description> <short_desc>
               Verify the screen shot of a GUI component with a benchmark image file
              </short_desc> <detailed_desc>
               Verify the screen shot of a GUI component with a benchmark image file.<br />
               The benchmark file must reside in the &lt;project&gt;\Datapool\Bench folder.
               Only BMP and JPG files can be used as the benchmark. If the extension
               of the bench file is not BMP or JPG, it is considered a BMP file.  
               For RJ and IBT engine, other formats like TIFF (*.tif), GIF (*.gif), 
               PNG (*.png) and PNM (*.pnm) are also supported.
               Optionally the user can specify part of the component to verify.<br />
               The specified GUI component/part must be in the viewing range of its 
               containing window. If portion of the component is displayed in the 
               window, only that portion will be captured; if the component falls 
               completely out of the viewing range of the window, the command will 
               fail. The command makes no attemp to bring the component into view.
             <p>
             NOTE: the command may fail to execute if the user has turned off logging 
             to TestManager via the Robot tools setting.  You may have to enable TestManager
             logging for the command to successfully execute.</p>
             <p>
             The command may produce a WARNING if a diff tool for which we 
             have no means to verify the results is configured for use.  
             Consequently, if these warnings are expected, the user can use the 
             "TW" test record type to avoid issuing these warnings.</p>
             <p>
	    This command requires that TestManager Image Comparator tool is
	    installed on the machine. Machines having only the Robot Test Agent
	    installed will not be able to usee this command.
             </p>
               <p>
               <B>RobotJ (RJ) and IBT Specific Notes:</B><br />
               		1)It requires that Java Advanced Imaging (JAI) be installed
               		on the test machine<BR/>
               		2)It supports to save image in format TIFF (*.tif), GIF (*.gif), PNG (*.png)
               		and PNM (*.pnm) 
               </p>
               <p>
               <B>Apple IOS specific Notes:</B><br />
               UIAutomation captures all screenshots as PNG images, but SAFS copies and stores them 
               into the image format desired (JPG, BMP, etc.). However, the rootname of the desired 
               output image name must be unique to avoid UIAutomation generating indexed image names 
               we will not be looking for.<br/>
               For example, specifying MyImage.JPG and later MyImage.BMP will cause UIAutomation to capture 
               MyImage.PNG and MyImage1.PNG. When attempting to find MyImage.PNG captured for MyImage.BMP 
               we will retrieve MyImage.PNG which is NOT the correct image capture for MyImage.BMP.
               </p>
              </detailed_desc> </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" 
                   expectFailSupport="YES" 
                   expectWarnSupport="YES" >
	       <libraryInfo name="GenericMasterFunctions" 
                            doc="GenericMasterFunctions.htm" 
                            sourcecode="GenericMasterFunctions.sbl" 
                            class="ALL" />
           </engine>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20080311" expectFailSupport="NO" expectWarnSupport="NO">
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine vendor="Apple" tool="IOS" name="Apple XCode Instruments" since="20111115" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/ios/CFComponent.html" 
                            sourcecode="org.safs.ios.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20080926" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
	      <engine vendor="OpenQA" tool="Selenium" name="Selenium" since="20080926" >
	    	<libraryInfo name="CFComponent" 
			doc="org/safs/selenium/CFComponent.html" 
			sourcecode="org.safs.selenium.CFComponent.java" 
			class="ALL" />
            </engine>
	      <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140808">
	        <libraryInfo name="CFComponent" 
			doc="org/safs/selenium/webdriver/CFComponent.html" 
			sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
			class="CFComponent" />
          </engine>
		   <engine name="Test Complete" 
               expectFailSupport="YES" 
               expectWarnSupport="YES"
			   since="20110407" 
			   tool="TestComplete" 
			   vendor="Automated QA">
		       <libraryInfo class="GENERIC" 
				name="GenericMasterFunctions" 
				sourcecode="GenericMasterFunctions.SVB">
		       </libraryInfo>
	       </engine>
       </engines>

       <parameters>
        <parameter name="BENCHMARKFILE" displayText="BenchmarkFile" optional="NO">
           <description> <short_desc>
             Name of the benchmark image file.
              </short_desc> <detailed_desc>
              Name of the benchmark image file.
              Relative paths suitable for FindSQAFile can be used. Normally,
              the Benchmark file would reside in the Project's Datapool\Bench
              directory. A test file with the same name would be created in
              the Datapool\Test folder. The resulting dif file with .txt
              extension would be saved under the Datapool\Dif folder. The
              extension of the benchmark file should be .bmp or .jpg. If not,
              it is considered a BMP file, i.e. the test file would have a
              .bmp extension.
              </detailed_desc> </description> </parameter>
        <parameter name="SUBAREA" displayText="SubArea" optional="YES">
           <description> <short_desc>
             Optional app map subkey indicating partial image of the component to verify.
              </short_desc> <detailed_desc>
              Optional app map subkey indicating partial image of the component to verify.
              Value of this app map reference must be in the format of a
              top-left and bottom-right pair, and can be either absolute
              coordinates or percentages ("x1,y1,x2,y2" or "x1%,y1%,x2%,y2%").
              Coordinates are relative to the component, i.e. (0,0) and
              (0%,0%) are the minimum, and (COMPONENT_WIDTH, COMPONENT_HEIGHT)
              and (100%,100%) are the maximum. Values exceeding the minimun/
              maximum are forced to the nearest limiting value. Absolute and
              percent values can be mixed, so "0,0,50%,50%" is valid. If this
              parameter is omitted, full image of the component is captured
              (equivalent to "0,0,100%,100%").
              </detailed_desc> </description> </parameter>
        <parameter name="PERCENTAGETOLERANCE" displayText="PercentageTolerance" optional="YES">
           <description> <short_desc>
             The percentage of bits need to be matched.
              </short_desc> <detailed_desc>
	            The percentage of bits need to be matched. it is between 0 and 100.<br/>
	            100 means only all bits of images match, the images will be considered matched.<br/>
	            0 means even no bits matche, the images will be considered matched.<br/>
              </detailed_desc> </description> </parameter>
        <parameter name="UUIDFLAG" displayText="UUIDFlag" optional="YES">
           <description> <short_desc>
             "UUID=False" to make Test/Actuals Filenames the same as the Benchmark.
              </short_desc> <detailed_desc>
              If "UUID=False" is present, and the Engine defaults to appending Universally Unique IDs to 
              the filenames stored as runtime Test/Actuals, then this setting will prevent the appending of those 
              UUIDs to the runtime Test/Actual filename. Essentially, the Test/Actual filename will generally be 
              given the same filename as the benchmark.
              </detailed_desc> </description> </parameter>
        <parameter name="FILTEREDAREAS" displayText="FilteredAreas" optional="YES">
           <description> <short_desc>
              "<b>Filter=</b>one or multiple areas" to filter the GUI image (or sub image of GUI if the parameter "SubArea" is present)
              and it will also be used to filter the bench image before comparing. If there are some differences, the diff image
              will be made between these 2 filtered images (not the acutal and bench image).
             </short_desc> <detailed_desc>
              "<b>Filter=</b>one or multiple areas" to filter the GUI image (or sub image of GUI if the parameter "SubArea" is present)
              and it will also be used to filter the bench image before comparing. If there are some differences, the diff image
              will be made between these 2 filtered images (not the acutal and bench image).<br/>
              The area is in the same format described for the parameter "SubArea".<br/>
              Multiple areas are separated by a space character, such as "subarea1 subarea2 subarea3"<br/>
              The actual-image and bench-image will be covered by black color at filtered areas.<br/>
              Do NOT forget the prefix "Filter=", without it this parameter will be ignored.
             </detailed_desc> </description> </parameter>
     </parameters><examples>
        <example>
           <usage>T, WINDOW, COMPONENT, VerifyGUIImageToFile, "comp.bmp"</usage>
           <description> <short_desc>
             Verify the full component image with BITMAP file "&lt;project&gt;\Datapool\Bench\comp.bmp".
              </short_desc> </description> </example>
        <example>
           <usage>T, WINDOW, COMPONENT, VerifyGUIImageToFile, "comp.bmp", "", "", "UUID=False"</usage>
           <description> <short_desc>
             Verify the full component image with BITMAP file "&lt;project&gt;\Datapool\Bench\comp.bmp".
              </short_desc> <detailed_desc>
              If the runtime GUIImage is to be saved to the Test/Actuals directory it should NOT have 
              a Universally Unique ID appended to the filename.
              </detailed_desc></description> </example>
        <example>
           <usage>T, WINDOW, COMPONENT, VerifyGUIImageToFile, "comp.jpg"</usage>
           <description> <short_desc>
             Verify the full component image with JPEG file "&lt;project&gt;\Datapool\Bench\comp.jpg"
              </short_desc> </description> </example>
        <example>
           <usage>T, WINDOW, COMPONENT, VerifyGUIImageToFile, "comp.jpg", "", 95</usage>
           <description> <short_desc>
             Verify the full component image with JPEG file "&lt;project&gt;\Datapool\Bench\comp.jpg"<br/>
             If 95% of bits match, then the verification will pass.<br/>
              </short_desc> </description> </example>
        <example>
           <usage>T, WINDOW, COMPONENT, VerifyGUIImageToFile, "comp.bmp", SUBAREA</usage>
           <description> <short_desc>
             Verify specified part of the component image with a bench file.
              </short_desc> <detailed_desc>
              Verify specified part of the component image with a bench file
              Depending on the definition of SUBAREA in the app map, the command verifies:<br/>

              UNDER [COMPONENT] IN APP MAP    PART OF COMPONENT<br/>
              ----------------------------    ---------------------<br/>
              SUBAREA="0,0,10,10"             top-left 10x10 square<br/>
              SUBAREA="0,80%,100%,100%"       bottom fifth<br/>
              </detailed_desc> </description> </example>
        <example>
           <usage>T, WINDOW, COMPONENT, VerifyGUIImageToFile, "comp.jpg", "", "", "", "Filter=0;0;10;10 60;60;10;15"</usage>
           <description> <short_desc>
             Filter specified parts of the component image and of a bench file, and verify 2-filtered images.
              </short_desc><detailed_desc>
             Get the full component image, and draw "10x10 black square" at "top-left" and "10x15 black rectangle" at "60,60"
             to make a filtered image, then get the image of JPEG file "&lt;project&gt;\Datapool\Bench\comp.jpg"
             and filter it the same way, finally compare these 2 filtered images.
              </detailed_desc> </description> </example>
        <example>
           <usage>T, WINDOW, COMPONENT, VerifyGUIImageToFile, "comp.jpg", "", "", "", "FilterMapKey"</usage>
           <description> <short_desc>
             Filter specified parts of the component image and of a bench file, and verify 2-filtered images.
              </short_desc><detailed_desc>
             Get the full component image, and draw "10x10 black square" at "top-left" and "10x15 black rectangle" at "60,60"
             to make a filtered image, then get the image of JPEG file "&lt;project&gt;\Datapool\Bench\comp.jpg"
             and filter it the same way, finally compare these 2 filtered images.<br/>
              ----------------------------       Map            ---------------------<br/>
              [COMPONENT]<br/>
              FilterMapKey="Filter=0,0,10,10 60,60,10,15"<br/>
              </detailed_desc> </description> </example>
     </examples></keyword>
     
  <keyword name="VERIFYOBJECTDATATOFILE" 
           displayText="VerifyObjectDataToFile" 
           expectFailSupport="YES" 
           expectWarnSupport="YES" 
           deprecated="NO">
           
       <description> <short_desc>
             Verify the current contents of an object's data with a benchmark file.
              </short_desc> <detailed_desc>
             <p>
             Typically, benchmarks are stored in the Datapool\Bench directory.
             In that event, only the filename.ext is needed.  Only an object that 
             Robot can perform an ObjectData VP on can use this command.</p>
             <p>
             The command will produce a TEST WARNING if the user has configured an 
             alternate DIFF tool for which we have no means to compare the diff results.
             If this WARNING is expected, the user should use the "TW" test record type.</p>
              </detailed_desc> </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" 
                   expectFailSupport="YES" 
                   expectWarnSupport="YES" >
	       <libraryInfo name="GenericMasterFunctions" 
                            doc="GenericMasterFunctions.htm" 
                            sourcecode="GenericMasterFunctions.sbl" 
                            class="ALL" />
           </engine>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20030827" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="ALL" />
           </engine>
	   		<engine vendor="OpenQA" tool="Selenium" name="Selenium" since="20070130" >
		    	<libraryInfo name="CFComponent" 
				doc="org/safs/selenium/CFComponent.html" 
				sourcecode="org.safs.selenium.CFComponent.java" 
				class="CFComponent" />
            </engine>
	   		<engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140807" >
		    	<libraryInfo name="CFComponent" 
				doc="org/safs/selenium/webdriver/CFComponent.html" 
				sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
				class="CFComponent" />
            </engine>
       </engines>

       <parameters>
        <parameter name="BENCHMARKFILE" displayText="BenchmarkFile" optional="NO">
           <description> <short_desc>
             The name of the file used as the comparison benchmark.
              </short_desc> <detailed_desc>
             The name of the file used as the comparison benchmark.<br />
             Typically, benchmarks are stored in the Datapool\Bench directory.
             In that event, only the filename.ext is needed.
              </detailed_desc> </description> </parameter>
        <parameter name="FILEENCODING" displayText="FileEncoding" optional="YES" default="">
           <description> <short_desc>
             Specify a character encoding to be used when opening a bench file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            </short_desc> </description>
        </parameter>              
        <parameter name="FILTERMODE" displayText="FilterMode" optional="YES" default="">
           <description> <short_desc>
             (Future) Specify a file filter to use to process the text before comparison.
              </short_desc> </description> </parameter>
        <parameter name="FILTEROPTIONS" displayText="FilterOptions" optional="YES" default="">
           <description> <short_desc>
             (Future) Specify filter options to use with the file filter.
              </short_desc> </description> </parameter>
     </parameters><examples>
        <example>
           <usage>T, Browser, HTMLTable, VerifyObjectDataToFile, aFilename.ext, , "", ""</usage>
           <description> <short_desc>
               Verify the HTMLTable object data contents with the benchmark file.
              </short_desc> <detailed_desc>
               The benchmark file is located within the Project at Datapool\Bench\aFilename.ext<br />
               Note the unused reserved fields for FileFilter and FilterOptions.
              </detailed_desc> </description>
        </example>
        <example>
           <usage>T, Browser, HTMLTable, VerifyObjectDataToFile, aFilename.ext, "UTF-8"</usage>
           <description> <short_desc>
               Verify the HTMLTable object data contents with the benchmark file.
              </short_desc> <detailed_desc>
               The benchmark file is located within the Project at Datapool\Bench\aFilename.ext<br />
               The benchmark file will be opened with "UTF-8" file-encoding.
              </detailed_desc> </description>
        </example>
     </examples></keyword>
     
  <keyword name="SETPROPERTYVALUE" 
           displayText="SetPropertyValue"
           expectFailSupport="NO" 
           expectWarnSupport="NO" 
           deprecated="NO">
           
       <description> <short_desc>
             Sets a value to the property of an object.
              </short_desc> <detailed_desc>
             <p>Routine to set a value to the property of an object.</p>.
	     <p>The routine expects that the given object already has Context or Focus.
		It also expects that Global StepDriverTestInfo contains all the information
		it needs to perform its function.</p>
	     <p>The routine will set the StepDriverTestInfo.statuscode and log any pass/fail info 
		using the StepDriverTestInfo.fac LogFacility.</p>
		<p>RJ implementation directly modifies the object in the software under test;therefore, it should be done with extreme care.
		Avoid using setPropertyValue whenever possible because it allows you to modify the software under test in ways that a typical user cannot.</p>
              </detailed_desc> </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20041110" 
                   expectFailSupport="NO" 
                   expectWarnSupport="NO" >
	       <libraryInfo name="GenericMasterFunctions" 
                            doc="GenericMasterFunctions.htm" 
                            sourcecode="GenericMasterFunctions.sbl" 
                            class="ALL" />
           </engine>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20080311" expectFailSupport="NO" expectWarnSupport="NO">
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="ALL" />
           </engine>
		   <engine vendor="Automated QA" tool="TestComplete" name="Test Complete" since="20110826" >
		       <libraryInfo name="GenericMasterFunctions"  
				            class="GENERIC"
				            sourcecode="GenericMasterFunctions.SVB" />
           </engine>           
       </engines>

       <parameters>
        <parameter name="OBJECTPROPERTYNAME" displayText="ObjectPropertyName" optional="NO">
           <description> <short_desc>
             The name of the property of the object.
              </short_desc> <detailed_desc>
             The name of the property of the object.  This property will have the value set.<br />
              </detailed_desc> </description> </parameter>
        <parameter name="PROPERTYVALUE" displayText="PropertyValue" optional="NO">
           <description> <short_desc>
             The value to set the property to.
              </short_desc> </description> </parameter>
      </parameters><examples>
        <example>
           <usage>T, Browser, RadioButton, SetPropertyValue, "checked", True, ""</usage>
           <description> <short_desc>
               This example sets the checked property of the RadioButton object to true.
              </short_desc> <detailed_desc>
              </detailed_desc> </description> </example>
     </examples></keyword>

  <keyword name="CAPTUREOBJECTDATATOFILE" 
           displayText="CaptureObjectDataToFile" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description> <short_desc>
             Copy the current contents of an object's data to a file.
              </short_desc> <detailed_desc>
             Only an object that Robot can perform an ObjectData VP 
             on can use this command.  By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
              </detailed_desc> </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20030827" >
	       <libraryInfo name="GenericMasterFunctions" 
                            doc="GenericMasterFunctions.htm" 
                            sourcecode="GenericMasterFunctions.sbl" 
                            class="ALL" />
           </engine>
		   <engine name="Test Complete" since="20111212" tool="TestComplete" vendor="Automated QA">
		       <libraryInfo class="GENERIC" 
				            name="GenericMasterFunctions" 
				            sourcecode="GenericMasterFunctions.SVB">
		       </libraryInfo>
	       </engine>           
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20031203" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="ALL" />
           </engine>
	   		<engine vendor="OpenQA" tool="Selenium" name="Selenium" since="20070130" >
		    	<libraryInfo name="CFComponent" 
				doc="org/safs/selenium/CFComponent.html" 
				sourcecode="org.safs.selenium.CFComponent.java" 
				class="CFComponent" />
            </engine>
	   		<engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140807" >
		    	<libraryInfo name="CFComponent" 
				doc="org/safs/selenium/webdriver/CFComponent.html" 
				sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
				class="CFComponent" />
            </engine>
       </engines>

       <parameters>
        <parameter name="FILE" displayText="File" optional="NO">
           <description> <short_desc>
             The name of the file used to store the object data.
              </short_desc> <detailed_desc>
             The name of the file used to store the object data.
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
              </detailed_desc> </description> </parameter>
        <parameter name="FILEENCODING" displayText="FileEncoding" optional="YES" default="">
           <description> <short_desc>
             Specify a character encoding to be used when saving data to a file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            </short_desc> </description>
        </parameter>
        <parameter name="FILTERMODE" displayText="FilterMode" optional="YES" default="">
           <description> <short_desc>
             (Future) Specify a file filter to use to process the text before comparison.
              </short_desc> </description> </parameter>
        <parameter name="FILTEROPTIONS" displayText="FilterOptions" optional="YES" default="">
           <description> <short_desc>
             (Future) Specify filter options to use with the file filter.
              </short_desc> </description> </parameter>
     </parameters>
        <examples>
        <example>
           <usage>T, Browser, HTMLTable, CaptureObjectDataToFile, aFilename.ext, , "", ""</usage>
           <description> <short_desc>
               Capture the HTMLTable object data contents to a file.
              </short_desc> <detailed_desc>
               Capture the HTMLTable object data contents to the 
               Datapool\Test\aFilename.ext file.<br />
               Note the unused reserved fields for FileFilter and FilterOptions.
              </detailed_desc> </description> </example>
        <example>
           <usage>T, Browser, HTMLTable, CaptureObjectDataToFile, myDirectory\aFilename.ext, , "", ""</usage>
           <description> <short_desc>
               Capture the HTMLTable object data contents to a file.
              </short_desc> <detailed_desc>
               Capture the HTMLTable object data contents to the 
               [project]\myDirectory\aFilename.ext file.<br />
               Note the unused reserved fields for FileFilter and FilterOptions.
              </detailed_desc> </description>
        </example>
        <example>
           <usage>T, Browser, HTMLTable, CaptureObjectDataToFile, tableContent.ext</usage>
           <description> <short_desc>
               Capture the HTMLTable object data contents to a file.
              </short_desc> <detailed_desc>
               Capture the HTMLTable object data contents,
               save it to file tableContent.ext by the system default file encoding.
              </detailed_desc> </description>
        </example>
        <example>
           <usage>T, Browser, HTMLTable, CaptureObjectDataToFile, tableContent.ext, "UTF-8"</usage>
           <description> <short_desc>
               Capture the HTMLTable object data contents to a file.
              </short_desc> <detailed_desc>
               Capture the HTMLTable object data contents,
               save it to file tableContent.ext by UTF-8 encoding.
              </detailed_desc> </description>
        </example>
     	</examples> 
     </keyword>

  <keyword name="CAPTUREPROPERTIESTOFILE" 
           displayText="CapturePropertiesToFile" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description> <short_desc>
             Copy all of the value properties a test object to a file.
              </short_desc> <detailed_desc>
             Copy all of the value properties a test object to a file.
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path must already exist.
              </detailed_desc> </description>
           
       <engines>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20031216" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine vendor="Apple" tool="IOS" name="Apple XCode Instruments" since="20111118" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/ios/CFComponent.html" 
                            sourcecode="org.safs.ios.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine vendor="OpenQA" tool="Selenium" name="Selenium" since="20110628" >
	    	  <libraryInfo name="CFComponent" 
			               doc="org/safs/selenium/CFComponent.html" 
			               sourcecode="org.safs.selenium.CFComponent.java" 
			               class="CFComponent" />
           </engine>
		    <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140804">
		        <libraryInfo name="CFComponent" 
				doc="org/safs/selenium/webdriver/CFComponent.html" 
				sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
				class="CFComponent"/>
	        </engine>
		   <engine name="Test Complete" since="20110926" tool="TestComplete" vendor="Automated QA">
		       <libraryInfo class="GENERIC" 
				            name="GenericMasterFunctions" 
				            sourcecode="GenericMasterFunctions.SVB">
		       </libraryInfo>
	       </engine>           
            <engine vendor="Google" tool="Android" name="Android" since="20120814" >
				<libraryInfo name="CFViewFunctions" 
					 doc="http://safsdev.sourceforge.net/doc/org/safs/android/CFViewFunctions.html" 
					 sourcecode="org.safs.android.CFViewFunctions.java" 
					 class="GENERIC" />
            	<domains>
            		<domain name="DEV" since="20120814">
	        			<libraryInfo name="ViewProcessor" 
                             doc="http://safsdev.sourceforge.net/doc/org/safs/android/engine/ViewProcessor.html" 
                             sourcecode="org.safs.android.engine.ViewProcessor.java" 
                             class="GENERIC" />
                    </domain>
                </domains>
            </engine>
       </engines>

       <parameters>
        <parameter name="FILE" displayText="File" optional="NO">
           <description> <short_desc>
             The name of the file used to store the property list data.
              </short_desc> <detailed_desc>
             The name of the file used to store the property list data.
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
              </detailed_desc> </description> </parameter>
        <parameter name="FILEENCODING" displayText="FileEncoding" optional="YES" default="">
           <description> <short_desc>
             Specify a character encoding to be used when saving data to a file.
             </short_desc>
             <detailed_desc>
             Specify a character encoding to be used when saving data to a file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
             <p>This parameter was added to this command in Nov 2011 as implemented for 
             the Apple IOS engine and may not yet be supported in all engines otherwise 
             supporting this command.</p>
            </detailed_desc> </description>
        </parameter>              
     </parameters><examples>
        <example>
           <usage>T, Window, Comp, CapturePropertiesToFile, aFilename.ext</usage>
           <description> <short_desc>
               Capture the Comp properties to a file with comma as the delimiter.
              </short_desc> <detailed_desc>
               Capture the Comp properties to a file with comma as the delimiter.
              </detailed_desc> </description> </example>
        <example>
           <usage>T, Window, Comp, CapturePropertiesToFile, aFilename.properties, "UTF-8"</usage>
           <description> <short_desc>
               Capture the Comp properties to a file with comma as the delimiter.
              </short_desc> <detailed_desc>
               Capture the Comp properties to a file with comma as the delimiter.
              </detailed_desc> </description> </example>
     </examples></keyword>

  <keyword name="CAPTUREPROPERTYTOFILE" 
           displayText="CapturePropertyToFile" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description> <short_desc>
             Copy a propertie's value of a test object to to a file.
              </short_desc> <detailed_desc>
             Copy a propertie's value of a test object to to a file.
			 The file will be stored in the active "Test" directory. 
		     If you specify a relative path, the path will be relative 
		     to the project directory.  The directory for a full or 
		     relative path must already exist.
              </detailed_desc> </description>
           
       <engines>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20081113" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine vendor="Apple" tool="IOS" name="Apple XCode Instruments" since="20111118" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/ios/CFComponent.html" 
                            sourcecode="org.safs.ios.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine vendor="OpenQA" tool="Selenium" name="Selenium" since="20110628" >
	    	  <libraryInfo name="CFComponent" 
			               doc="org/safs/selenium/CFComponent.html" 
			               sourcecode="org.safs.selenium.CFComponent.java" 
			               class="CFComponent" />
           </engine>
		    <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140804">
		        <libraryInfo name="CFComponent" 
				doc="org/safs/selenium/webdriver/CFComponent.html" 
				sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
				class="CFComponent"/>
	        </engine>
		   <engine name="Test Complete" since="20110915" tool="TestComplete" vendor="Automated QA">
		       <libraryInfo class="GENERIC" 
				            name="GenericMasterFunctions" 
				            sourcecode="GenericMasterFunctions.SVB">
		       </libraryInfo>
	       </engine>           
       </engines>

       <parameters>
        <parameter name="PROPERTYNAME" displayText="PropertyName" optional="NO">
           <description> <short_desc>
             The case-sensitive name of the object array property to verify.
              </short_desc> </description>
		</parameter>		   
        <parameter name="FILE" displayText="File" optional="NO">
           <description> <short_desc>
             The name of the file used to store the property list data.
              </short_desc> <detailed_desc>
             The name of the file used to store the property list data.
             By default, the files will be
             stored in the active "Test" directory.  If you specify a
             relative path, the path will be relative to the project
             directory.  The directory for a full or relative path 
             must already exist.
              </detailed_desc> </description>
        </parameter>
        <parameter name="FILEENCODING" displayText="FileEncoding" optional="YES" default="">
           <description> <short_desc>
             Specify a character encoding to be used when saving data to a file.
             If it is not specified, the system default file encoding will be used.
             The encoding should be a valid string supported by Java; if it is not valid,
             the system default file encoding will be used instead.
            </short_desc> </description>
        </parameter>              
     </parameters>
	  <examples>
        <example>
           <usage>T, Window, Comp, CapturePropertyToFile, propertyName, aFilename.ext</usage>
           <description> <short_desc>
               Capture the value of Comp's property described by propertyName to a file.
              </short_desc> <detailed_desc>
               Capture the value of Comp's property described by propertyName to a file.
              </detailed_desc> </description> </example>
		<example>
           <usage>T, Window, Comp, CapturePropertyToFile, propertyName, aFilename.ext</usage>
           <description> <short_desc>
               Capture the value of Comp's property described by propertyName to a file.
              </short_desc> <detailed_desc>
               Capture the value of Comp's property described by propertyName,
               save it to file aFilename.ext by the system default file encoding.
              </detailed_desc> </description>
        </example>     
		<example>
           <usage>T, Window, Comp, CapturePropertyToFile, propertyName, aFilename.ext, "UTF-8"</usage>
           <description> <short_desc>
               Capture the value of Comp's property described by propertyName to a file.
              </short_desc> <detailed_desc>
               Capture the value of Comp's property described by propertyName,
               save it to file aFilename.ext by UTF-8 encoding.
              </detailed_desc> </description>
        </example>
     </examples>
  </keyword>		
		
  <keyword name="CLEARAPPMAPCACHE" 
           displayText="ClearAppMapCache" 
           expectFailSupport="NO" 
           expectWarnSupport="NO" 
           deprecated="NO">
           
       <description> <short_desc>
             Clear the internal application map cache.
          </short_desc><detailed_desc>
             Some Engines maintain an internal cache of previously sought
             application objects.  In RobotJ, there exists a cache of
             TestObject objects, that cache is cleared by this command
             so that the recognition string algorithm has to be re-run
             the next time a window or component is to be recognized.
             This is useful for cases when a dialog pops up, goes
             away, then pops up again.  The cached version of the
             dialog or it's components may not correspond to the actual
             version.  This command lets a tester clear the cache when
             this kind of condition may arrise.
             (Future: instruct the safsmaps service
             to reload it's application map data)
          </detailed_desc></description>
           
       <engines>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20030827" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="ALL" />
           </engine>
		    <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140513">
		    	<libraryInfo name="CFComponent" 
				doc="org/safs/selenium/webdriver/CFComponent.html" 
				sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
				class="CFComponent" />
	        </engine>
       </engines>

       <parameters>
       </parameters>
       <examples>
        <example>
           <usage>T, any, any, ClearAppMapCache</usage>
           <description> <short_desc>
             clear the appmap cache
              </short_desc> </description> </example>
       </examples></keyword>
       
  <keyword name="HOVERMOUSE" 
           displayText="HoverMouse" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                Hover the mouse over an object.
              </short_desc>
              <detailed_desc>
                By default, hover on the center of the component for 2000 milliseconds.
                <p>We can also hover on any part of an object based on a stored x,y 
                coordinate.  The object containing the coordinate is first given 
                context and then the hover command is generated at the coordinate.  
                Thus, an item or object can be referenced by name even though it is only 
                recognized via coordinates.</p>
                <p>
                The coordinate lookup is done with the component name of the record AND 
                Field #5.</p>
                <p>
                Typical Data Table records:</p>
                <p>
                (1) t MainWindow Component HoverMouse           1000<br/>
                (2) t MainWindow MainWindow HoverMouse AnObject 2000<br/>
                (3) t MainWindow FolderTree HoverMouse Node1 3000</p>
                <p>
                #1 above will contain a blank as it's 5th field and 1000 as 6th field, 
                and it will hover at the center of the Component for 1000 milliseconds.</p>
                <p>
                #2 above will contain an AnObject="3,10" entry in the MainWindow section 
                of the Application Map to hover at x=3, y=10 in the MainWindow.</p>
                <p>
                #3 above will contain a FolderTree entry in the MainWindow section with 
                normal recognition information for it.  FolderTree will also have it's
                own section in the Application Map in which there will be an entry like 
                Node1="15,30".  This will tell Robot to locate the FolderTree Generic 
                object and hover at the coordinates specified by the reference.</p>               	              
              </detailed_desc>
              <note>
				<engines>
					<engine vendor="Rational" tool="Robot" name="Robot"/>
				</engines>
				<value>
					This command requires a version of Rational Robot that includes MousePause support (released 
                	and patched in Robot v2003).  Though not required, you may also choose to enable this 
                	functionality for Robot Recording (Tools->GUI Record Options...->General Tab).
                </value>
	      	  </note>
              <note>
				<engines>
					<engine name="Test Complete" tool="TestComplete" vendor="Automated QA"/>
				</engines>
				<value>
					The optional parameter HoverTime doesn't take effect, so don't supply it.
                </value>
	      	  </note>
              <note>
				<engines>
					<engine vendor="OpenQA" tool="Selenium" name="Selenium"/>
				</engines>
				<value>
					The optional parameter AppMapSubkey doesn't take effect, always hover at the center.
                </value>
	      	  </note>
           </description>
           
       <engines>
           <engine vendor="Rational" tool="Robot" name="Robot" since="20050919" >
	         <libraryInfo name="GenericMasterFunctions" 
                            doc="GenericMasterFunctions.htm" 
                            sourcecode="GenericMasterFunctions.sbl" 
                            class="GENERIC" />
           </engine>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20100324" >
	         <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
	   	   <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20080311" >
	         <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="ALL" />
           </engine>
		   <engine name="Test Complete" since="20110922" tool="TestComplete" vendor="Automated QA">
		       <libraryInfo class="GENERIC" 
				            name="GenericMasterFunctions" 
				            sourcecode="GenericMasterFunctions.SVB">
		       </libraryInfo>
	       </engine>
	       <engine vendor="OpenQA" tool="Selenium" name="Selenium" since="20140815" >
	   	     <libraryInfo name="CFComponent" 
		     doc="org/safs/selenium/CFComponent.html" 
		     sourcecode="org.safs.selenium.CFComponent.java" 
		     class="CFComponent" />
           </engine>
	       <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140815">
	         <libraryInfo name="CFComponent" 
		     doc="org/safs/selenium/webdriver/CFComponent.html" 
		     sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
		     class="CFComponent"/>
		   </engine>
       </engines>

       <parameters>
        <parameter name="APPMAPSUBKEY" displayText="AppMapSubkey" optional="YES">
           <description>
              <short_desc> 
                (Optional)Name of the AppMap subkey to lookup and use for the hover.
              </short_desc>
              <detailed_desc>
                Without this we should hover on the center of the object.
                <p>Name of the AppMap subkey to lookup and use for the hover.
                We expect the AppMap to contain the item in the format "x,y":</p>
                <p>
                [Component]<br/>
                Node1="33,120"      OR<br/>
                Node1="Coords=33,120"	OR<br/>
                Node1="Icon" (or whatever is appropriate)</p>
                <p>  
                The results from the lookup are appended to the "Coords=" string 
                used by the hover command in Robot (if necessary).  So any 
                valid content used with the hover command can be part of 
                this AppMap entry.</p>
                <p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
              </detailed_desc>
           </description>
        </parameter>
        <parameter name="HOVERTIME" displayText="HoverTime" optional="YES" default="2000">
	           <description>
	              <short_desc> 
	                (Optional)Number of milliseconds to hover.
	              </short_desc>
	              <detailed_desc>
	                If not specified, the mouse will hover for 2000 milliseconds over the object,
	              </detailed_desc>
	           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WINDOW, WINDOW, HoverMouse</usage>
           <description>
              <short_desc> 
               Hover the mouse over the center of WINDOW for 2000 milliseconds.
              </short_desc>
              <detailed_desc> 
               Hover the mouse over the center of WINDOW for 2000 milliseconds.
              </detailed_desc>
           </description>
        </example>
        <example>
	   <usage>T, WINDOW, AnObject, HoverMouse, "Coords=200,400"</usage>
	   <description>
	      <short_desc> 
	       Hover the mouse over coordinates 200,400 of AnObject for 2000 milliseconds.
	      </short_desc>
	      <detailed_desc> 
	       Hover the mouse over coordinates 200,400 of AnObject for 2000 milliseconds.
	      </detailed_desc>
	   </description>
        </example>
        <example>
           <usage>T, WINDOW, AnObject, HoverMouse, ASubObject, 1000</usage>
           <description>
              <short_desc> 
               Hover the mouse over an x,y coordinate indicated by the ASubObject reference in
               the Application Map for 1000 milliseconds.
              </short_desc>
              <detailed_desc> 
               Field  5 : TQ String. A reference identified in the Application Map identifying coordinates
               on which to hover.
               This example shows AnObject as a viable object in the WINDOW but that it also has its own
               section in the Application Map which contains one or more named references like
               ASubObject which are used for test.   
              </detailed_desc>
           </description>
        </example>
        <example>
	   <usage>T, WINDOW, AnObject, HoverMouse, , 3000</usage>
	   <description>
	      <short_desc> 
	       Hover the mouse over the center of AnObject for 3000 milliseconds.
	      </short_desc>
	      <detailed_desc> 
	       Hover the mouse over the center of AnObject for 3000 milliseconds.
	      </detailed_desc>
	   </description>
        </example>
     </examples></keyword>     

  <keyword name="HOVERSCREENLOCATION" 
           displayText="HoverScreenLocation" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc> 
                Hover the mouse over a specified screen location.
              </short_desc>
              <detailed_desc>
                Hover the mouse over a specified screen location.
                <p>We can hover on any screen location based on stored x,y 
                coordinates or hardcoded literal values. The Window:Component fields 
                can be anything at all and will be ignored if they do not exist in the app map, 
                or if the retrieved app map data does not contain coordinate data. 
                Thus, an item or object can be referenced by name even though it is only 
                known via coordinates.
                </p><p>
                If the Window:Component AppMap lookup does NOT contain coordinate data and is ignored, then 
                the AppMapSubKey field is REQUIRED and is expected to contain a reference or literal 
                text containing absolute screen coordinates.
                </p><p>
                If the Window:Component AppMap lookup DOES contain coordinate data, this data is treated as 
                the absolute screen coordinates to be used.  The AppMapSubKey field becomes OPTIONAL and 
                coordinate data in the field is treated as a relative offset added to the absolute values 
                found for the Window:Component.
                </p><p>
                Any AppMapSubKey lookup is done with the Component name in the record AND 
                Field #5.</p>
                <p>
                Typical Data Table records:</p>
                <p>
                (1) t MainWindow Component HoverScreenLocation           1000<br/>
                (2) t MainWindow MainWindow HoverScreenLocation AnObject 2000<br/>
                (3) t MainWindow MainWindow HoverScreenLocation 50,80 3000<br/>
                (4) t AnyWin AnyComp HoverScreenLocation Node1 3000</p>
                <p>
                #1 above will contain a blank as it's 5th field and 1000 as 6th field. Because the AppMapSubKey 
                field is blank, the [MainWindow] section of the AppMap MUST have a Component item with valid 
                absolute screen coordinate data. The mouse cursor will hover at the specified Component location 
                for 1000 milliseconds.</p>
                <p>
                #2 above will contain an AnObject="Coords=50,80" entry in the [MainWindow] section 
                of the AppMap. If there is a MainWindow component in the AppMap with valid screen coordinates 
                then the mouse cursor will hover with a relative offset of 50,80 from those absolute screen 
                coordinates. Otherwise, the mouse will hover at absolute screen coordinates 50,80.</p>
                <p>
                #3 If there is a MainWindow component in the [MainWindow] section of the AppMap with valid screen 
                coordinates then the mouse cursor will hover with a relative offset of 50,80 from those absolute 
                screen coordinates. Otherwise, the mouse will hover at absolute screen coordinates 50,80.</p>
                <p>
                #4 above will contain no valid AnyWin:AnyComp coordinate data and 
                those fields will be ignored.  However, Node1 MUST exist in the 
                Application Map [AnyComp] section to provide absolute screen coordinates.</p>
              </detailed_desc>
           </description>
           
       <engines>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20100324" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
       </engines>

       <parameters>
        <parameter name="APPMAPSUBKEY" displayText="AppMapSubkey" optional="YES">
           <description>
              <short_desc> 
                (Sometimes Optional)Name of the AppMap subkey to lookup and use for the hover.
              </short_desc>
              <detailed_desc>
                Without this there MUST be absolute screen coordinates stored in the AppMap 
                for the Window:Component specified.
                <p>
                Name of the AppMap subkey to lookup and use for the hover.  
                We expect the AppMap to contain the coordinates in the following supported formats:
                </p><p><pre>
                [Component]
                Node1="33,120"        (comma-delimited)      OR
                Node1="33;120"        (semi-colon delimited) OR
                Node1="33 120"        (space-delimited)      OR
                Node1="Coords=33,120" (comma-delimited)      OR
                Node1="Coords=33;120" (semi-colon delimited) OR
                Node1="Coords=33 120" (space-delimited)
                </pre></p><p>
                Both Fields #3 and #5 are used to locate the item in the App Map.
                This routine does not specify an App Map so only the current Map
                is used and it is expected to be valid.</p>
                <p>
                This field can instead contain the literal text of any absolute or relative coordinates 
                in the same formats as shown above. </p>
              </detailed_desc>
           </description>
        </parameter>
        <parameter name="HOVERTIME" displayText="HoverTime" optional="YES" default="2000">
	           <description>
	              <short_desc> 
	                (Optional)Number of milliseconds to hover.
	              </short_desc>
	              <detailed_desc>
	                If not specified, the mouse will hover at the specified coordinates for 2000 milliseconds.
	              </detailed_desc>
	           </description>
        </parameter>
     </parameters><examples>

        <example>
           <usage>T, WINDOW, WINDOW, HoverScreenLocation</usage>
           <description>
              <short_desc> 
               Hover the mouse at specified WINDOW coordinates for 2000 milliseconds.
              </short_desc>
              <detailed_desc> 
               Hover the mouse at screen coordinates specified for the Window item stored in the 
               [Window] section of the current AppMap.
              </detailed_desc>
           </description>
        </example>
        <example>
	   <usage>T, WINDOW, AnObject, HoverScreenLocation, "Coords=200,400"</usage>
	   <description>
	      <short_desc> 
	       Hover the mouse at coordinates 200,400 for 2000 milliseconds.
	      </short_desc>
	      <detailed_desc> 
	       Hover the mouse at coordinates 200,400 for 2000 milliseconds.  This assumes AnObject 
	       is NOT an item in the [Window] section of the current AppMap with valid coordinate data.
	      </detailed_desc>
	   </description>
        </example>
        <example>
           <usage>T, WINDOW, AnObject, HoverScreenLocation, ASubObject, 1000</usage>
           <description>
              <short_desc> 
               Hover the mouse using x,y screen coordinates stored in the ASubObject reference in the 
               [AnObject] section of the current AppMap for 1000 milliseconds.
              </short_desc>
              <detailed_desc> 
               ASubObject reference found in the AppMap [AnObject] section stores screen coordinates
               on which to hover.
              </detailed_desc>
           </description>
        </example>
        <example>
	   <usage>T, WINDOW, AnObject, HoverScreenLocation, , 3000</usage>
	   <description>
	      <short_desc> 
	       Hover the mouse over the Window:AnObject screen coordinates for 3000 milliseconds.
	      </short_desc>
	      <detailed_desc> 
	       Because no AppMapSubKey is provided the AnObject item MUST exist in the [WINDOW] section 
	       of the current AppMap and it MUST contain valid screen coordinate data.
	      </detailed_desc>
	   </description>
        </example>
     </examples></keyword>     

  <keyword name="SENDEVENT" 
           displayText="SendEvent" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description> <short_desc>
             Send or trigger an "event" with 0 or more arguments.
             </short_desc> <detailed_desc>
             For objects or technologies that can be effectively event-driven, rather than GUI-driven.
             <p>
             The first implementation is in IBM Rational Functional Tester for Flex testing.  Many Flex objects 
             respond to events, in addition to traditional GUI interaction.  Some Flex objects ONLY respond to 
             events.  This is especially true of many custom Flex delegates.</p>
             <p>
             The tester must know the events and arguments available for their particular object and technology. 
             The generic nature for this command cannot generally know if a particular event or set of 
             arguments is valid or not.  Thus, the implementation may not be able issue failures resulting from 
             invalid events, arguments, or other issues not generating recognizable failure conditions.
             </p>
       	     </detailed_desc> </description>           
       <engines>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20100205" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="ALL" />
           </engine>
		   <engine vendor="Automated QA" tool="TestComplete" name="Test Complete" since="20111001" >
		       <libraryInfo name="GenericMasterFunctions"  
				            class="GENERIC"
				            sourcecode="GenericMasterFunctions.SVB" />
	       </engine>
       </engines>

       <parameters>
        <parameter name="EVENT" displayText="Event" optional="NO">
           <description> <short_desc>
             The potentially case-sensitive name of the event to send or trigger.
              </short_desc> <detailed_desc>
              Some technologies may enforce case-sensitivity for event names while others will not.  
              The tester is responsible to ensure the event name is appropriate for the item(s) being tested.
              </detailed_desc>
           </description>
		</parameter>		   
        <parameter name="PARAM_N" displayText="PARAM_N" optional="YES">
           <description> <short_desc>
             The first of 0 or more parameters needed for the event.
             </short_desc> <detailed_desc>
             This field will be blank or contain an empty string if no parameter value is to be sent.  
             Otherwise, the field will contain an appropriate value as might be required or optional for 
             the event being sent.
             <p>
             If the event accepts multiple parameters, then each parameter must be provided in a separate 
             field in the test record.  All fields will be evaluated until no more fields are found to exist. 
             All fields will be sent in the order they are provided.
             </p>
             </detailed_desc> </description> </parameter>
     </parameters>
	  <examples>
        <example>
           <usage>T, Window, Comp, SendEvent, Close</usage>
           <description> <short_desc>
               Issue a "Close" event that needs no parameters.
              </short_desc> <detailed_desc>
              </detailed_desc> </description> 
        </example>
        <example>
           <usage>T, Window, Comp, SendEvent, Change, Browse</usage>
           <description> <short_desc>
               Issue a "Change" event and provide one parameter.
              </short_desc> </description> 
        </example>
        <example>
           <usage>T, Window, Comp, SendEvent, MyEvent, AnArg, 100, 200</usage>
           <description> <short_desc>
               Issue a "MyEvent" event that accepts at least 3 parameters.
              </short_desc> <detailed_desc>
              Note all event parameters are provided in separate fields of the record.
              </detailed_desc> </description> 
        </example>
     </examples></keyword>		

  <keyword name="GETTEXTFROMGUI" 
           displayText="GetTextFromGUI" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description> <short_desc>
             Incorporate OCR technology to detect the text on a GUI component and save the text to a variable.
             </short_desc> <detailed_desc>
             Two open-source OCRs are integrated into SAFS. One is TesseractOCR (TOCR) at 
             http://code.google.com/p/tesseract-ocr; the other GOCR at http://jocr.sourceforge.net. 
             <p>
             TOCR 2.0.4 and GOCR 0.48 are the latest release. They are available in SAFS and only 
             support English. Both two OCR owners claim to support more languages in next release. Chinese, 
             Japanese, and Korean are going to be supported in TOCR's next release 3.00.
			</p>
       	     </detailed_desc> </description>           
       	<engines>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20100302" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20100415" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java"
                            class="ALL" />
           </engine>
	       <engine vendor="OpenQA" tool="Selenium" name="Selenium" since="20140813" >
	   	     <libraryInfo name="CFComponent" 
		     doc="org/safs/selenium/CFComponent.html" 
		     sourcecode="org.safs.selenium.CFComponent.java" 
		     class="CFComponent" />
           </engine>
	       <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140813">
	         <libraryInfo name="CFComponent" 
		     doc="org/safs/selenium/webdriver/CFComponent.html" 
		     sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
		     class="CFComponent"/>
	       </engine>
       </engines>

       <parameters>
        <parameter name="VARIABLENAME" displayText="VariableName" optional="NO">
           <description> <short_desc>
             The name of the variable to receive detected text.
              </short_desc> <detailed_desc>
              The name of the variable to receive detected text. Note, if you supply the name of the variable 
              and include the leading caret (^) symbol then the variable must be enclosed in quotes. Otherwise, 
              that variable will be used like any other variable and the substituted value of that variable will 
              be interpreted as the name of the variable you wish to use.
              </detailed_desc>
           </description>
		</parameter>		   
        <parameter name="SUBAREA" displayText="SubArea" optional="YES">
           <description> <short_desc>
             Optional app map subkey indicating partial image of the component to capture.
             </short_desc> <detailed_desc>
             Optional app map subkey indicating partial image of the component to capture. Value of this app 
             map reference must be in the format of a top-left and bottom-right pair, and can be either absolute 
             coordinates or percentages ("x1,y1,x2,y2" or "x1%,y1%,x2%,y2%"). Coordinates are relative to the 
             component, i.e. (0,0) and (0%,0%) are the minimum, and (COMPONENT_WIDTH, COMPONENT_HEIGHT) and 
             (100%,100%) are the maximum. Values exceeding the minimun/ maximum are forced to the nearest 
             limiting value. Absolute and percent values can be mixed, so "0,0,50%,50%" is valid. 
             <p>
             If this parameter is omitted with blank or empty string, full image of the component is captured 
             (equivalent to "0,0,100%,100%"). 
             </p>
             </detailed_desc> 
           </description> 
         </parameter>
        <parameter name="OCRID" displayText="OCRId" optional="YES">
           <description> <short_desc>
             OCRId indicating the OCR used to recognize text.
             </short_desc> <detailed_desc>
             Two OCR engines are supported. "TOCR" will be taken as default if the parameter is blank.
             "TOCR" stands for Tesseract OCR; "GOCR" stands for GOCR.
             <p>
             Note: Seems TOCR performs a bit better than GOCR (personal experience). 
             </p>
             </detailed_desc> 
           </description> 
         </parameter>
        <parameter name="LANGID" displayText="LangId" optional="YES">
           <description> <short_desc>
             Optional LangId representing the language in use for selected OCR to recognize text. 
             </short_desc> <detailed_desc>
             For both TOCR and GOCR, only English is supported so far. Language Id takes standard language code, 
             which can be gotten by calling Locale.ENGLISH.getLanguage(). 
             <p><pre>
				LangId      Language
				"en"   ---  English
				"cn"   ---  Chinese
			 </pre></p>
             <p>
             If LangId is not specified with blank or empty string, the language of System locale will be 
             used as default. 
             </p>
             </detailed_desc> 
           </description> 
         </parameter>
        <parameter name="SCALERATIO" displayText="ScaleRatio" optional="YES">
           <description> <short_desc>
             Optional ScaleRatio indicating the scale ratio for resizing the original image.
             </short_desc> <detailed_desc>
             To fit in font size and DPI required by OCR, SAFS needs to resize images before sending them 
             to OCR engines. For screen-captured images with 96DPI, TOCR takes 1.9 as default; GOCR takes 1.5 
             as default. You may try different ScaleRatio to find an appropriate value if default setting is 
             unable to meet your requirement.
             </detailed_desc> 
           </description> 
         </parameter>

     </parameters>
	  <examples>
        <example>
           <usage>T, Window, Comp, GetTextFromGUI, Var1,  , GOCR, en, </usage>
           <description> <short_desc>
               Detect the text in the full image of Comp using GOCR with English and default ScaleRatio(1.5), 
               then save it to variable Var1.
              </short_desc> <detailed_desc>
              </detailed_desc> </description> 
        </example>
     </examples>
   </keyword>		

  <keyword name="SAVETEXTFROMGUI" 
           displayText="SaveTextFromGUI" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description> <short_desc>
             Incorporate OCR technology to detect the text on a GUI component and save the text to a text file.
             </short_desc> <detailed_desc>
             Two open-source OCRs are integrated into SAFS. One is TesseractOCR (TOCR) at 
             http://code.google.com/p/tesseract-ocr; the other GOCR at http://jocr.sourceforge.net. 
             <p>
             TOCR 2.0.4 and GOCR 0.48 are the latest release. They are available in SAFS and only 
             support English. Both two OCR owners claim to support more languages in next release. Chinese, 
             Japanese, and Korean are going to be supported in TOCR's next release 3.00.
			</p>
       	     </detailed_desc> </description>           
       	<engines>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20100302" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20100415" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
	       <engine vendor="OpenQA" tool="Selenium" name="Selenium" since="20140813" >
	   	     <libraryInfo name="CFComponent" 
		     doc="org/safs/selenium/CFComponent.html" 
		     sourcecode="org.safs.selenium.CFComponent.java" 
		     class="CFComponent" />
           </engine>
	       <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140813">
	         <libraryInfo name="CFComponent" 
		     doc="org/safs/selenium/webdriver/CFComponent.html" 
		     sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
		     class="CFComponent"/>
	       </engine>
       </engines>

       <parameters>
        <parameter name="OUTPUTFILE" displayText="OutputFile" optional="NO">
           <description> <short_desc>
             The name of the text file used to store detected text.
              </short_desc> <detailed_desc>
              The name of the text file used to store detected text. By default, the files will be stored in 
              the active "Test" directory. If you specify a relative path, the path will be relative to the 
              project directory. The directory for a full or relative path must already exist.
              </detailed_desc>
           </description>
		</parameter>		   
        <parameter name="SUBAREA" displayText="SubArea" optional="YES">
           <description> <short_desc>
             Optional app map subkey indicating partial image of the component to capture.
             </short_desc> <detailed_desc>
             Optional app map subkey indicating partial image of the component to capture. Value of this app 
             map reference must be in the format of a top-left and bottom-right pair, and can be either absolute 
             coordinates or percentages ("x1,y1,x2,y2" or "x1%,y1%,x2%,y2%"). Coordinates are relative to the 
             component, i.e. (0,0) and (0%,0%) are the minimum, and (COMPONENT_WIDTH, COMPONENT_HEIGHT) and 
             (100%,100%) are the maximum. Values exceeding the minimun/ maximum are forced to the nearest 
             limiting value. Absolute and percent values can be mixed, so "0,0,50%,50%" is valid. 
             <p>
             If this parameter is omitted with blank or empty string, full image of the component is captured 
             (equivalent to "0,0,100%,100%"). 
             </p>
             </detailed_desc> 
           </description> 
         </parameter>
        <parameter name="OCRID" displayText="OCRId" optional="YES">
           <description> <short_desc>
             OCRId indicating the OCR used to recognize text.
             </short_desc> <detailed_desc>
             Two OCR engines are supported. "TOCR" will be taken as default if the parameter is blank.
             "TOCR" stands for Tesseract OCR; "GOCR" stands for GOCR.
             <p>
             Note: Seems TOCR performs a bit better than GOCR (personal experience). 
             </p>
             </detailed_desc> 
           </description> 
         </parameter>
        <parameter name="LANGID" displayText="LangId" optional="YES">
           <description> <short_desc>
             Optional LangId representing the language in use for selected OCR to recognize text. 
             </short_desc> <detailed_desc>
             For both TOCR and GOCR, only English is supported so far. Language Id takes standard language code, 
             which can be gotten by calling Locale.ENGLISH.getLanguage(). 
             <p><pre>
				LangId      Language
				"en"   ---  English
				"cn"   ---  Chinese
			 </pre></p>
             <p>
             If LangId is not specified with blank or empty string, the language of System locale will be 
             used as default. 
             </p>
             </detailed_desc> 
           </description> 
         </parameter>
        <parameter name="SCALERATIO" displayText="ScaleRatio" optional="YES">
           <description> <short_desc>
             Optional ScaleRatio indicating the scale ratio for resizing the original image.
             </short_desc> <detailed_desc>
             To fit in font size and DPI required by OCR, SAFS needs to resize images before sending them 
             to OCR engines. For screen-captured images with 96DPI, TOCR takes 1.9 as default; GOCR takes 1.5 
             as default. You may try different ScaleRatio to find an appropriate value if default setting is 
             unable to meet your requirement.
             </detailed_desc> 
           </description> 
         </parameter>

     </parameters>
	  <examples>
        <example>
           <usage>T, Window, Comp, SaveTextFromGUI, ocr.txt,   , TOCR, en, 2.0</usage>
           <description> <short_desc>
              Detect the text in the full image of Comp using TOCR with English and ScaleRatio 2.0, 
              then save the text to [project]\Datapool\test\ocr.txt.
              </short_desc> <detailed_desc>
              </detailed_desc> </description> 
        </example>
     </examples>
   </keyword>		
  <keyword name="LOCATESCREENIMAGE" 
           displayText="LocateScreenImage" 
           expectFailSupport="NO" 
           expectWarnSupport="NO" 
           deprecated="NO">
           
       <description> <short_desc>
               Store the location and dimensions of a component.
              </short_desc> <detailed_desc>
               Store the location and dimensions of a component.
               The component can be <a href="http://safsdev.sourceforge.net/sqabasic2000/SAFSImageBasedRecognition.htm" target="_blank" alt="SAFS Image-Based Testing Info">SAFS IBT</a>, RJ, Selenium object.<br/>
               The information is stored in a collection of variables using the variable root name provided. 
               <p>
               The following variables are set by this command:</p>
               <p>
               <ul>
               rootname=x y w h [space delimited values]<br/>
               rootname.x=x<br/>
               rootname.y=y<br/>
               rootname.w=w<br/>
               rootname.h=h<br/>
               </ul></p>
              </detailed_desc>
              <note>
				<engines>
					<engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver"></engine>
				</engines>
				<value>
					Currently in IBT, all coordinates are relative to the screen and not to any 
					parent window location or other client area.
                </value>
	      	  </note>
       </description>
           
       <engines>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20100415" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="ALL" />
           </engine>
           <engine vendor="SAFS" tool="TIDComponent" name="Tool-Independent Driver" since="20080926" >
	       <libraryInfo name="TIDComponent" 
                            doc="org/safs/tools/engines/TIDComponent.html" 
                            sourcecode="org.safs.tools.engines.TIDComponent.java" 
                            class="ALL" />
           </engine>
		   <engine name="Test Complete" since="20110922" tool="TestComplete" vendor="Automated QA">
		       <libraryInfo class="GENERIC" 
				            name="GenericMasterFunctions" 
				            sourcecode="GenericMasterFunctions.SVB">
		       </libraryInfo>
	       </engine>
	       <engine vendor="OpenQA" tool="Selenium" name="Selenium" since="20140815" >
	   	     <libraryInfo name="CFComponent" 
		     doc="org/safs/selenium/CFComponent.html" 
		     sourcecode="org.safs.selenium.CFComponent.java" 
		     class="CFComponent" />
           </engine>
	       <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140815">
	         <libraryInfo name="CFComponent" 
		     doc="org/safs/selenium/webdriver/CFComponent.html" 
		     sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
		     class="CFComponent"/>
	       </engine>
       </engines>

       <parameters>
        <parameter name="VARIABLENAME" displayText="VariableName" optional="NO">
           <description> <short_desc>
             The root name of the collection of variables to receive the location and dimensions.
              </short_desc></description> </parameter>
        <parameter name="WhomRelativeTo" displayText="WhomRelativeTo" optional="YES" default="screen">
           <description> <short_desc>
             This parameter decides the coordinates stored in VariableName is relative to the screen or the parent window.
             'screen' means they are relative to the screen; 'parent' means they are relative to the parent window.
             The parameter is curently available in RJ only. 
              </short_desc></description> </parameter>      
     </parameters>
     <examples>
        <example>
           <usage>T, WindowID, WindowID, LocateScreenImage, AVariableName</usage>
           <description> <short_desc>
             Stores the following variable values:<p>
             <ul>
             AVariableName=x y w h [space delimited values]<br/>
             AVariableName.x=x<br/>
             AVariableName.y=y<br/>
             AVariableName.w=w<br/>
             AVariableName.h=h<br/>
             </ul></p>
           </short_desc> </description> </example>
        <example>
           <usage>C, SetVariableValues, ^AVariableName="NextVariableName" <br />
                  T, WindowID, WindowID, LocateScreenImage, ^AVariableName</usage>
           <description> <short_desc>
             Stores the following variable values:<p>
             <ul>
             NextVariableName=x y w h [space delimited values]<br/>
             NextVariableName.x=x<br/>
             NextVariableName.y=y<br/>
             NextVariableName.w=w<br/>
             NextVariableName.h=h<br/>
             </ul></p>
              </short_desc> </description> </example>
         <example>
           <usage>T, ParentWindow, Component, LocateScreenImage, AVariableName, parent</usage>
           <description> <short_desc>
             AVariableName stores the coordinates that are relative to the left-top point of the ParentWindow:<p>
             <ul>
             AVariableName=x y w h [space delimited values]<br/>
             AVariableName.x=x<br/>
             AVariableName.y=y<br/>
             AVariableName.w=w<br/>
             AVariableName.h=h<br/>
             </ul></p>
           </short_desc> </description> </example>               
     </examples></keyword>
	
	 <keyword name="ISPROPERTYEXIST" 
             displayText="IsPropertyExist" 
             expectFailSupport="YES" 
             expectWarnSupport="NO" 
             deprecated="NO">
             
         <description> <short_desc>
             Verify if object's property exists or not.
              </short_desc> </description>
           
       <engines>
           <engine vendor="Rational" tool="RobotJ" name="RobotJ" since="20110113" >
	       <libraryInfo name="CFComponent" 
                            doc="org/safs/rational/CFComponent.html" 
                            sourcecode="org.safs.rational.CFComponent.java" 
                            class="ALL" />
           </engine>
		   <engine name="Test Complete" since="20110926" tool="TestComplete" vendor="Automated QA">
		       <libraryInfo class="GENERIC" 
				            name="GenericMasterFunctions" 
				            sourcecode="GenericMasterFunctions.SVB">
		       </libraryInfo>
	       </engine>
		    <engine vendor="OpenQA" tool="Selenium" name="Selenium" since="20140804">
		        <libraryInfo name="CFComponent" 
				doc="org/safs/selenium/CFComponent.html" 
				sourcecode="org.safs.selenium.CFComponent.java" 
				class="CFComponent"/>
	        </engine>
		    <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140804">
		        <libraryInfo name="CFComponent" 
				doc="org/safs/selenium/webdriver/CFComponent.html" 
				sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
				class="CFComponent"/>
	        </engine>
       </engines>

       <parameters>
        <parameter name="PROPERTYNAME" displayText="PropertyName" optional="NO">
           <description> <short_desc>
             The case-sensitive name of the object property to verify.
              </short_desc> </description> </parameter>
        <parameter name="PROPERTYEXISTVARIABLE" displayText="PropertyExistVariable" optional="NO">
           <description> <short_desc>
             The variable to store 'true' or 'false' to indicate if the property exist or not.
              </short_desc> </description> </parameter>
     </parameters><examples>
        <example>
           <usage>T, Window, Component, IsPropertyExist, Visible, existVar</usage>
           <description> <short_desc>
             If the "Visible" property of Component exist, variable existVar will contain 'true';
             Otherwise, existVar will contain 'false'.
              </short_desc> </description> </example>
     </examples></keyword>
 
   <keyword name="EXECUTESCRIPT" 
           displayText="ExecuteScript" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc>
                Execute a piece of script on the specified component synchronously.
              </short_desc>
              <detailed_desc>
                Execute a piece of script on the specified component synchronously.
              </detailed_desc>
	   	      <note>
		        <engines>
		            <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140429">
		                <domains>
		                    <domain name="HTML"></domain>
		                </domains>
		            </engine>
		        </engines>
		        <value>Execute a piece of javascript on the specified component synchronously.</value>
		      </note>
           </description>
           
       <engines>
	   		<engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140429">
		    	<libraryInfo name="CFComponent" 
					doc="org/safs/selenium/webdriver/CFComponent.html" 
					sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
					class="CFComponent" />
            </engine>
       </engines>

       <parameters>
        <parameter name="SCRIPT" displayText="script" optional="NO">
           <description>
              <short_desc>
                The script to execute.
              </short_desc>
              <detailed_desc>
                The script to execute.
              </detailed_desc>
           </description>
        </parameter>
        <parameter name="PARAMN" displayText="paramN" optional="YES">
           <description>
              <short_desc>
                The paramters passed to script.
              </short_desc>
              <detailed_desc>
                The paramters passed to script. You can specify more than one parameter or no parameter.<br/>
			    If the script will return a value, you can get it from variable "__$_SAFS_JAVASCRIPT_RESULT_$__".<br/>
			    Now, only the string result is supported.<br/>
              </detailed_desc>
              <note>
		        <engines>
		            <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140429">
		                <domains>
		                    <domain name="HTML"></domain>
		                </domains>
		            </engine>
		        </engines>
		        <value>
		        	The parameters specified here will feed the script's parameters from the 2th place.
		        	The script's first parameter will be always the component itself.
		        </value>
		      </note>              
           </description>
        </parameter>
     </parameters>
     
     <examples>
        <example>
           <usage>T, WINDOW, COMPONENT, ExecuteScript, "arguments[0].innerHTML=arguments[1];", "The text to shown on page"</usage>
           <description>
              <short_desc>
               	This action will set the 'innerHTML' of COMPONENT to "The text to shown on page".
              </short_desc>
              <detailed_desc>
				arguments[0] is the first parameter of script, it will be repalced by COMPONENT at runtime.
				arguments[1] is the 2th parameter of script, it will be repalced by "The text to shown on page" at runtime.
              </detailed_desc>
           </description>
        </example>
     </examples>
  </keyword>
     	     
   <keyword name="VERIFYCOMPUTEDSTYLE" 
           displayText="VerifyComputedStyle" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc>
                Verify a component's 'computed style' against a benchmark file.
              </short_desc>
              <detailed_desc>
                Verify a component's 'computed style' against a benchmark file.<br/>
                If the comparison fails, a copy of the captured 'computed style' should be stored in 
                the project's Test directory.  This file, once verified, should be suitable to become a 
                new benchmark, if needed.
              </detailed_desc>
	   	      <note>
		        <engines>
		            <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140513">
		                <domains>
		                    <domain name="HTML"></domain>
		                </domains>
		            </engine>
		        </engines>
		        <value>'Computed Style' is typically a derived property of the HTML domain.</value>
		      </note>
           </description>
           
       <engines>
	    <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140513">
	    <libraryInfo name="CFComponent" 
			doc="org/safs/selenium/webdriver/CFComponent.html" 
			sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
			class="CFComponent" />
            </engine>
       </engines>

       <parameters>
        <parameter name="BENCHFILE" displayText="BenchFile" optional="NO">
           <description>
              <short_desc>
                The benchmake file to compare against.
              </short_desc>
              <detailed_desc>
                The benchmark file to compare against.<br/>
                The full absolute path to the benchmark file or a relative path.<br/>
                Relative path's should be sought in this order:
                <p><ol>
                <li>The Project's Bench directory;</li>
                <li>Relative to the Project's Datapool directory;</li>
                <li>Relative to the Project's root directory;</li>
                </ol></p>
              </detailed_desc>
              <note>
			    <engines>
			      <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140513">
				  <domains>
				    <domain name="HTML"></domain>
				  </domains>
			      </engine>
			    </engines>
			    <value>The benchmark file is expected to be in JSON format.</value>
              </note> 
           </description>             
        </parameter>
     </parameters>
     
     <examples>
        <example>
           <usage>T, WINDOW, COMPONENT, VerifyComputedStyle, "ComponentStyle.txt"</usage>
           <description>
              <short_desc>
               	Capture the COMPONENT's 'computed style' and verify it against the ComponentStyle.txt benchmark file.
              </short_desc>
           </description>
        </example>
     </examples>
  </keyword>
  
   <keyword name="GETCOMPUTEDSTYLE" 
           displayText="GetComputedStyle" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc>
                Get a component's 'computed style', and save them to a file.
              </short_desc>
              <detailed_desc>
                Get a component's 'computed style', and save them to a file.<br/>
              </detailed_desc>
	   	      <note>
		        <engines>
		            <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20141125">
		                <domains>
		                    <domain name="HTML"></domain>
		                </domains>
		            </engine>
		        </engines>
		        <value>'Computed Style' is typically a derived property of the HTML domain.</value>
		      </note>
           </description>
           
       <engines>
	    <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140513">
	    <libraryInfo name="CFComponent" 
			doc="org/safs/selenium/webdriver/CFComponent.html" 
			sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
			class="CFComponent" />
            </engine>
       </engines>

       <parameters>
        <parameter name="TESTFILE" displayText="TestFile" optional="NO">
           <description>
              <short_desc>
                The test file to save 'computed style'.
              </short_desc>
              <detailed_desc>
                The test file to save 'computed style'.<br/>
                The full absolute path to the test file or a relative path.<br/>
                Relative path's should be sought in this order:
                <p><ol>
                <li>The Project's Test directory;</li>
                <li>Relative to the Project's Datapool directory;</li>
                <li>Relative to the Project's root directory;</li>
                </ol></p>
              </detailed_desc>
              <note>
			    <engines>
			      <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140513">
				  <domains>
				    <domain name="HTML"></domain>
				  </domains>
			      </engine>
			    </engines>
			    <value>The test file is in JSON format.</value>
              </note> 
           </description>
        </parameter>
     </parameters>
     
     <examples>
        <example>
           <usage>T, WINDOW, COMPONENT, GetComputedStyle, "ComponentStyle.txt"</usage>
           <description>
              <short_desc>
               	Capture the COMPONENT's 'computed style' and save them to the ComponentStyle.txt test file.
              </short_desc>
           </description>
        </example>
     </examples>
  </keyword>
  
   <keyword name="CLEARCACHE" 
           displayText="ClearCache" 
           deprecated="NO" 
           expectFailSupport="NO" 
           expectWarnSupport="NO">
           
       <description>
              <short_desc>
                Clear the cache of a component.
              </short_desc>
              <detailed_desc>
                Clear the cache of a component. To save time, component may contain a cache to store its content
                or some time-consuming resource. But sometime, the cache's content may not be fresh, which will
                 affect the test, at this situation, user may call this keyword to clear the cache and SAFS will
                 use the latest content.
              </detailed_desc>
	   	      <note>
		        <engines>
		            <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140714">
		            </engine>
		        </engines>
		        <value>Supported For Selenium WebDriver.</value>
		      </note>
     </description>

     <engines>
	    <engine vendor="OpenQA" tool="Selenium" name="Selenium2.0" since="20140513">
	    	<libraryInfo name="CFComponent" 
			doc="org/safs/selenium/webdriver/CFComponent.html" 
			sourcecode="org.safs.selenium.webdriver.CFComponent.java" 
			class="CFComponent" />
        </engine>
     </engines>
     
     <examples>
        <example>
           <usage>T, WINDOW, COMPONENT, ClearCache</usage>
           <description>
              <short_desc>
               	Clear the current component's cache.
              </short_desc>
           </description>
        </example>
     </examples>
  </keyword>
</keywords>
</keyword_library>
